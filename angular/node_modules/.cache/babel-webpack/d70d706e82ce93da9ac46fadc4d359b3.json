{"ast":null,"code":"import _createClass from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license Angular v12.0.5\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\n/**\r\n * An injectable service that produces an animation sequence programmatically within an\r\n * Angular component or directive.\r\n * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.\r\n *\r\n * @usageNotes\r\n *\r\n * To use this service, add it to your component or directive as a dependency.\r\n * The service is instantiated along with your component.\r\n *\r\n * Apps do not typically need to create their own animation players, but if you\r\n * do need to, follow these steps:\r\n *\r\n * 1. Use the `build()` method to create a programmatic animation using the\r\n * `animate()` function. The method returns an `AnimationFactory` instance.\r\n *\r\n * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.\r\n *\r\n * 3. Use the player object to control the animation programmatically.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * // import the service from BrowserAnimationsModule\r\n * import {AnimationBuilder} from '@angular/animations';\r\n * // require the service as a dependency\r\n * class MyCmp {\r\n *   constructor(private _builder: AnimationBuilder) {}\r\n *\r\n *   makeAnimation(element: any) {\r\n *     // first define a reusable animation\r\n *     const myAnimation = this._builder.build([\r\n *       style({ width: 0 }),\r\n *       animate(1000, style({ width: '100px' }))\r\n *     ]);\r\n *\r\n *     // use the returned factory object to create a player\r\n *     const player = myAnimation.create(element);\r\n *\r\n *     player.play();\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\nvar AnimationBuilder = function AnimationBuilder() {\n  _classCallCheck(this, AnimationBuilder);\n};\n/**\r\n * A factory object returned from the `AnimationBuilder`.`build()` method.\r\n *\r\n * @publicApi\r\n */\n\n\nvar AnimationFactory = function AnimationFactory() {\n  _classCallCheck(this, AnimationFactory);\n};\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Specifies automatic styling.\r\n *\r\n * @publicApi\r\n */\n\n\nvar AUTO_STYLE = '*';\n/**\r\n * Creates a named animation trigger, containing a  list of `state()`\r\n * and `transition()` entries to be evaluated when the expression\r\n * bound to the trigger changes.\r\n *\r\n * @param name An identifying string.\r\n * @param definitions  An animation definition object, containing an array of `state()`\r\n * and `transition()` declarations.\r\n *\r\n * @return An object that encapsulates the trigger data.\r\n *\r\n * @usageNotes\r\n * Define an animation trigger in the `animations` section of `@Component` metadata.\r\n * In the template, reference the trigger by name and bind it to a trigger expression that\r\n * evaluates to a defined animation state, using the following format:\r\n *\r\n * `[@triggerName]=\"expression\"`\r\n *\r\n * Animation trigger bindings convert all values to strings, and then match the\r\n * previous and current values against any linked transitions.\r\n * Booleans can be specified as `1` or `true` and `0` or `false`.\r\n *\r\n * ### Usage Example\r\n *\r\n * The following example creates an animation trigger reference based on the provided\r\n * name value.\r\n * The provided animation value is expected to be an array consisting of state and\r\n * transition declarations.\r\n *\r\n * ```typescript\r\n * @Component({\r\n *   selector: \"my-component\",\r\n *   templateUrl: \"my-component-tpl.html\",\r\n *   animations: [\r\n *     trigger(\"myAnimationTrigger\", [\r\n *       state(...),\r\n *       state(...),\r\n *       transition(...),\r\n *       transition(...)\r\n *     ])\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   myStatusExp = \"something\";\r\n * }\r\n * ```\r\n *\r\n * The template associated with this component makes use of the defined trigger\r\n * by binding to an element within its template code.\r\n *\r\n * ```html\r\n * <!-- somewhere inside of my-component-tpl.html -->\r\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\r\n * ```\r\n *\r\n * ### Using an inline function\r\n * The `transition` animation method also supports reading an inline function which can decide\r\n * if its associated animation should be run.\r\n *\r\n * ```typescript\r\n * // this method is run each time the `myAnimationTrigger` trigger value changes.\r\n * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:\r\n string]: any}): boolean {\r\n *   // notice that `element` and `params` are also available here\r\n *   return toState == 'yes-please-animate';\r\n * }\r\n *\r\n * @Component({\r\n *   selector: 'my-component',\r\n *   templateUrl: 'my-component-tpl.html',\r\n *   animations: [\r\n *     trigger('myAnimationTrigger', [\r\n *       transition(myInlineMatcherFn, [\r\n *         // the animation sequence code\r\n *       ]),\r\n *     ])\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   myStatusExp = \"yes-please-animate\";\r\n * }\r\n * ```\r\n *\r\n * ### Disabling Animations\r\n * When true, the special animation control binding `@.disabled` binding prevents\r\n * all animations from rendering.\r\n * Place the  `@.disabled` binding on an element to disable\r\n * animations on the element itself, as well as any inner animation triggers\r\n * within the element.\r\n *\r\n * The following example shows how to use this feature:\r\n *\r\n * ```typescript\r\n * @Component({\r\n *   selector: 'my-component',\r\n *   template: `\r\n *     <div [@.disabled]=\"isDisabled\">\r\n *       <div [@childAnimation]=\"exp\"></div>\r\n *     </div>\r\n *   `,\r\n *   animations: [\r\n *     trigger(\"childAnimation\", [\r\n *       // ...\r\n *     ])\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   isDisabled = true;\r\n *   exp = '...';\r\n * }\r\n * ```\r\n *\r\n * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,\r\n * along with any inner animations.\r\n *\r\n * ### Disable animations application-wide\r\n * When an area of the template is set to have animations disabled,\r\n * **all** inner components have their animations disabled as well.\r\n * This means that you can disable all animations for an app\r\n * by placing a host binding set on `@.disabled` on the topmost Angular component.\r\n *\r\n * ```typescript\r\n * import {Component, HostBinding} from '@angular/core';\r\n *\r\n * @Component({\r\n *   selector: 'app-component',\r\n *   templateUrl: 'app.component.html',\r\n * })\r\n * class AppComponent {\r\n *   @HostBinding('@.disabled')\r\n *   public animationsDisabled = true;\r\n * }\r\n * ```\r\n *\r\n * ### Overriding disablement of inner animations\r\n * Despite inner animations being disabled, a parent animation can `query()`\r\n * for inner elements located in disabled areas of the template and still animate\r\n * them if needed. This is also the case for when a sub animation is\r\n * queried by a parent and then later animated using `animateChild()`.\r\n *\r\n * ### Detecting when an animation is disabled\r\n * If a region of the DOM (or the entire application) has its animations disabled, the animation\r\n * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides\r\n * an instance of an `AnimationEvent`. If animations are disabled,\r\n * the `.disabled` flag on the event is true.\r\n *\r\n * @publicApi\r\n */\n\nfunction trigger(name, definitions) {\n  return {\n    type: 7\n    /* Trigger */\n    ,\n    name: name,\n    definitions: definitions,\n    options: {}\n  };\n}\n/**\r\n * Defines an animation step that combines styling information with timing information.\r\n *\r\n * @param timings Sets `AnimateTimings` for the parent animation.\r\n * A string in the format \"duration [delay] [easing]\".\r\n *  - Duration and delay are expressed as a number and optional time unit,\r\n * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\r\n * The default unit is milliseconds.\r\n *  - The easing value controls how the animation accelerates and decelerates\r\n * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,\r\n * `ease-in-out`, or a `cubic-bezier()` function call.\r\n * If not supplied, no easing is applied.\r\n *\r\n * For example, the string \"1s 100ms ease-out\" specifies a duration of\r\n * 1000 milliseconds, and delay of 100 ms, and the \"ease-out\" easing style,\r\n * which decelerates near the end of the duration.\r\n * @param styles Sets AnimationStyles for the parent animation.\r\n * A function call to either `style()` or `keyframes()`\r\n * that returns a collection of CSS style entries to be applied to the parent animation.\r\n * When null, uses the styles from the destination state.\r\n * This is useful when describing an animation step that will complete an animation;\r\n * see \"Animating to the final state\" in `transitions()`.\r\n * @returns An object that encapsulates the animation step.\r\n *\r\n * @usageNotes\r\n * Call within an animation `sequence()`, `{@link animations/group group()}`, or\r\n * `transition()` call to specify an animation step\r\n * that applies given style data to the parent animation for a given amount of time.\r\n *\r\n * ### Syntax Examples\r\n * **Timing examples**\r\n *\r\n * The following examples show various `timings` specifications.\r\n * - `animate(500)` : Duration is 500 milliseconds.\r\n * - `animate(\"1s\")` : Duration is 1000 milliseconds.\r\n * - `animate(\"100ms 0.5s\")` : Duration is 100 milliseconds, delay is 500 milliseconds.\r\n * - `animate(\"5s ease-in\")` : Duration is 5000 milliseconds, easing in.\r\n * - `animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\")` : Duration is 5000 milliseconds, delay is 10\r\n * milliseconds, easing according to a bezier curve.\r\n *\r\n * **Style examples**\r\n *\r\n * The following example calls `style()` to set a single CSS style.\r\n * ```typescript\r\n * animate(500, style({ background: \"red\" }))\r\n * ```\r\n * The following example calls `keyframes()` to set a CSS style\r\n * to different values for successive keyframes.\r\n * ```typescript\r\n * animate(500, keyframes(\r\n *  [\r\n *   style({ background: \"blue\" }),\r\n *   style({ background: \"red\" })\r\n *  ])\r\n * ```\r\n *\r\n * @publicApi\r\n */\n\n\nfunction animate(timings) {\n  var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return {\n    type: 4\n    /* Animate */\n    ,\n    styles: styles,\n    timings: timings\n  };\n}\n/**\r\n * @description Defines a list of animation steps to be run in parallel.\r\n *\r\n * @param steps An array of animation step objects.\r\n * - When steps are defined by `style()` or `animate()`\r\n * function calls, each call within the group is executed instantly.\r\n * - To specify offset styles to be applied at a later time, define steps with\r\n * `keyframes()`, or use `animate()` calls with a delay value.\r\n * For example:\r\n *\r\n * ```typescript\r\n * group([\r\n *   animate(\"1s\", style({ background: \"black\" })),\r\n *   animate(\"2s\", style({ color: \"white\" }))\r\n * ])\r\n * ```\r\n *\r\n * @param options An options object containing a delay and\r\n * developer-defined parameters that provide styling defaults and\r\n * can be overridden on invocation.\r\n *\r\n * @return An object that encapsulates the group data.\r\n *\r\n * @usageNotes\r\n * Grouped animations are useful when a series of styles must be\r\n * animated at different starting times and closed off at different ending times.\r\n *\r\n * When called within a `sequence()` or a\r\n * `transition()` call, does not continue to the next\r\n * instruction until all of the inner animation steps have completed.\r\n *\r\n * @publicApi\r\n */\n\n\nfunction group(steps) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return {\n    type: 3\n    /* Group */\n    ,\n    steps: steps,\n    options: options\n  };\n}\n/**\r\n * Defines a list of animation steps to be run sequentially, one by one.\r\n *\r\n * @param steps An array of animation step objects.\r\n * - Steps defined by `style()` calls apply the styling data immediately.\r\n * - Steps defined by `animate()` calls apply the styling data over time\r\n *   as specified by the timing data.\r\n *\r\n * ```typescript\r\n * sequence([\r\n *   style({ opacity: 0 }),\r\n *   animate(\"1s\", style({ opacity: 1 }))\r\n * ])\r\n * ```\r\n *\r\n * @param options An options object containing a delay and\r\n * developer-defined parameters that provide styling defaults and\r\n * can be overridden on invocation.\r\n *\r\n * @return An object that encapsulates the sequence data.\r\n *\r\n * @usageNotes\r\n * When you pass an array of steps to a\r\n * `transition()` call, the steps run sequentially by default.\r\n * Compare this to the `{@link animations/group group()}` call, which runs animation steps in\r\n *parallel.\r\n *\r\n * When a sequence is used within a `{@link animations/group group()}` or a `transition()` call,\r\n * execution continues to the next instruction only after each of the inner animation\r\n * steps have completed.\r\n *\r\n * @publicApi\r\n **/\n\n\nfunction sequence(steps) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return {\n    type: 2\n    /* Sequence */\n    ,\n    steps: steps,\n    options: options\n  };\n}\n/**\r\n * Declares a key/value object containing CSS properties/styles that\r\n * can then be used for an animation `state`, within an animation `sequence`,\r\n * or as styling data for calls to `animate()` and `keyframes()`.\r\n *\r\n * @param tokens A set of CSS styles or HTML styles associated with an animation state.\r\n * The value can be any of the following:\r\n * - A key-value style pair associating a CSS property with a value.\r\n * - An array of key-value style pairs.\r\n * - An asterisk (*), to use auto-styling, where styles are derived from the element\r\n * being animated and applied to the animation when it starts.\r\n *\r\n * Auto-styling can be used to define a state that depends on layout or other\r\n * environmental factors.\r\n *\r\n * @return An object that encapsulates the style data.\r\n *\r\n * @usageNotes\r\n * The following examples create animation styles that collect a set of\r\n * CSS property values:\r\n *\r\n * ```typescript\r\n * // string values for CSS properties\r\n * style({ background: \"red\", color: \"blue\" })\r\n *\r\n * // numerical pixel values\r\n * style({ width: 100, height: 0 })\r\n * ```\r\n *\r\n * The following example uses auto-styling to allow a component to animate from\r\n * a height of 0 up to the height of the parent element:\r\n *\r\n * ```\r\n * style({ height: 0 }),\r\n * animate(\"1s\", style({ height: \"*\" }))\r\n * ```\r\n *\r\n * @publicApi\r\n **/\n\n\nfunction style(tokens) {\n  return {\n    type: 6\n    /* Style */\n    ,\n    styles: tokens,\n    offset: null\n  };\n}\n/**\r\n * Declares an animation state within a trigger attached to an element.\r\n *\r\n * @param name One or more names for the defined state in a comma-separated string.\r\n * The following reserved state names can be supplied to define a style for specific use\r\n * cases:\r\n *\r\n * - `void` You can associate styles with this name to be used when\r\n * the element is detached from the application. For example, when an `ngIf` evaluates\r\n * to false, the state of the associated element is void.\r\n *  - `*` (asterisk) Indicates the default state. You can associate styles with this name\r\n * to be used as the fallback when the state that is being animated is not declared\r\n * within the trigger.\r\n *\r\n * @param styles A set of CSS styles associated with this state, created using the\r\n * `style()` function.\r\n * This set of styles persists on the element once the state has been reached.\r\n * @param options Parameters that can be passed to the state when it is invoked.\r\n * 0 or more key-value pairs.\r\n * @return An object that encapsulates the new state data.\r\n *\r\n * @usageNotes\r\n * Use the `trigger()` function to register states to an animation trigger.\r\n * Use the `transition()` function to animate between states.\r\n * When a state is active within a component, its associated styles persist on the element,\r\n * even when the animation ends.\r\n *\r\n * @publicApi\r\n **/\n\n\nfunction state(name, styles, options) {\n  return {\n    type: 0\n    /* State */\n    ,\n    name: name,\n    styles: styles,\n    options: options\n  };\n}\n/**\r\n * Defines a set of animation styles, associating each style with an optional `offset` value.\r\n *\r\n * @param steps A set of animation styles with optional offset data.\r\n * The optional `offset` value for a style specifies a percentage of the total animation\r\n * time at which that style is applied.\r\n * @returns An object that encapsulates the keyframes data.\r\n *\r\n * @usageNotes\r\n * Use with the `animate()` call. Instead of applying animations\r\n * from the current state\r\n * to the destination state, keyframes describe how each style entry is applied and at what point\r\n * within the animation arc.\r\n * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).\r\n *\r\n * ### Usage\r\n *\r\n * In the following example, the offset values describe\r\n * when each `backgroundColor` value is applied. The color is red at the start, and changes to\r\n * blue when 20% of the total time has elapsed.\r\n *\r\n * ```typescript\r\n * // the provided offset values\r\n * animate(\"5s\", keyframes([\r\n *   style({ backgroundColor: \"red\", offset: 0 }),\r\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\r\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\r\n *   style({ backgroundColor: \"black\", offset: 1 })\r\n * ]))\r\n * ```\r\n *\r\n * If there are no `offset` values specified in the style entries, the offsets\r\n * are calculated automatically.\r\n *\r\n * ```typescript\r\n * animate(\"5s\", keyframes([\r\n *   style({ backgroundColor: \"red\" }) // offset = 0\r\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\r\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\r\n *   style({ backgroundColor: \"black\" }) // offset = 1\r\n * ]))\r\n *```\r\n\r\n * @publicApi\r\n */\n\n\nfunction keyframes(steps) {\n  return {\n    type: 5\n    /* Keyframes */\n    ,\n    steps: steps\n  };\n}\n/**\r\n * Declares an animation transition as a sequence of animation steps to run when a given\r\n * condition is satisfied. The condition is a Boolean expression or function that compares\r\n * the previous and current animation states, and returns true if this transition should occur.\r\n * When the state criteria of a defined transition are met, the associated animation is\r\n * triggered.\r\n *\r\n * @param stateChangeExpr A Boolean expression or function that compares the previous and current\r\n * animation states, and returns true if this transition should occur. Note that  \"true\" and \"false\"\r\n * match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the\r\n * animation trigger element.\r\n * The animation steps run when the expression evaluates to true.\r\n *\r\n * - A state-change string takes the form \"state1 => state2\", where each side is a defined animation\r\n * state, or an asterix (*) to refer to a dynamic start or end state.\r\n *   - The expression string can contain multiple comma-separated statements;\r\n * for example \"state1 => state2, state3 => state4\".\r\n *   - Special values `:enter` and `:leave` initiate a transition on the entry and exit states,\r\n * equivalent to  \"void => *\"  and \"* => void\".\r\n *   - Special values `:increment` and `:decrement` initiate a transition when a numeric value has\r\n * increased or decreased in value.\r\n * - A function is executed each time a state change occurs in the animation trigger element.\r\n * The animation steps run when the function returns true.\r\n *\r\n * @param steps One or more animation objects, as returned by the `animate()` or\r\n * `sequence()` function, that form a transformation from one state to another.\r\n * A sequence is used by default when you pass an array.\r\n * @param options An options object that can contain a delay value for the start of the animation,\r\n * and additional developer-defined parameters. Provided values for additional parameters are used\r\n * as defaults, and override values can be passed to the caller on invocation.\r\n * @returns An object that encapsulates the transition data.\r\n *\r\n * @usageNotes\r\n * The template associated with a component binds an animation trigger to an element.\r\n *\r\n * ```HTML\r\n * <!-- somewhere inside of my-component-tpl.html -->\r\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\r\n * ```\r\n *\r\n * All transitions are defined within an animation trigger,\r\n * along with named states that the transitions change to and from.\r\n *\r\n * ```typescript\r\n * trigger(\"myAnimationTrigger\", [\r\n *  // define states\r\n *  state(\"on\", style({ background: \"green\" })),\r\n *  state(\"off\", style({ background: \"grey\" })),\r\n *  ...]\r\n * ```\r\n *\r\n * Note that when you call the `sequence()` function within a `{@link animations/group group()}`\r\n * or a `transition()` call, execution does not continue to the next instruction\r\n * until each of the inner animation steps have completed.\r\n *\r\n * ### Syntax examples\r\n *\r\n * The following examples define transitions between the two defined states (and default states),\r\n * using various options:\r\n *\r\n * ```typescript\r\n * // Transition occurs when the state value\r\n * // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\r\n * transition(\"on => off\", animate(500))\r\n * // Run the same animation for both directions\r\n * transition(\"on <=> off\", animate(500))\r\n * // Define multiple state-change pairs separated by commas\r\n * transition(\"on => off, off => void\", animate(500))\r\n * ```\r\n *\r\n * ### Special values for state-change expressions\r\n *\r\n * - Catch-all state change for when an element is inserted into the page and the\r\n * destination state is unknown:\r\n *\r\n * ```typescript\r\n * transition(\"void => *\", [\r\n *  style({ opacity: 0 }),\r\n *  animate(500)\r\n *  ])\r\n * ```\r\n *\r\n * - Capture a state change between any states:\r\n *\r\n *  `transition(\"* => *\", animate(\"1s 0s\"))`\r\n *\r\n * - Entry and exit transitions:\r\n *\r\n * ```typescript\r\n * transition(\":enter\", [\r\n *   style({ opacity: 0 }),\r\n *   animate(500, style({ opacity: 1 }))\r\n *   ]),\r\n * transition(\":leave\", [\r\n *   animate(500, style({ opacity: 0 }))\r\n *   ])\r\n * ```\r\n *\r\n * - Use `:increment` and `:decrement` to initiate transitions:\r\n *\r\n * ```typescript\r\n * transition(\":increment\", group([\r\n *  query(':enter', [\r\n *     style({ left: '100%' }),\r\n *     animate('0.5s ease-out', style('*'))\r\n *   ]),\r\n *  query(':leave', [\r\n *     animate('0.5s ease-out', style({ left: '-100%' }))\r\n *  ])\r\n * ]))\r\n *\r\n * transition(\":decrement\", group([\r\n *  query(':enter', [\r\n *     style({ left: '100%' }),\r\n *     animate('0.5s ease-out', style('*'))\r\n *   ]),\r\n *  query(':leave', [\r\n *     animate('0.5s ease-out', style({ left: '-100%' }))\r\n *  ])\r\n * ]))\r\n * ```\r\n *\r\n * ### State-change functions\r\n *\r\n * Here is an example of a `fromState` specified as a state-change function that invokes an\r\n * animation when true:\r\n *\r\n * ```typescript\r\n * transition((fromState, toState) =>\r\n *  {\r\n *   return fromState == \"off\" && toState == \"on\";\r\n *  },\r\n *  animate(\"1s 0s\"))\r\n * ```\r\n *\r\n * ### Animating to the final state\r\n *\r\n * If the final step in a transition is a call to `animate()` that uses a timing value\r\n * with no style data, that step is automatically considered the final animation arc,\r\n * for the element to reach the final state. Angular automatically adds or removes\r\n * CSS styles to ensure that the element is in the correct final state.\r\n *\r\n * The following example defines a transition that starts by hiding the element,\r\n * then makes sure that it animates properly to whatever state is currently active for trigger:\r\n *\r\n * ```typescript\r\n * transition(\"void => *\", [\r\n *   style({ opacity: 0 }),\r\n *   animate(500)\r\n *  ])\r\n * ```\r\n * ### Boolean value matching\r\n * If a trigger binding value is a Boolean, it can be matched using a transition expression\r\n * that compares true and false or 1 and 0. For example:\r\n *\r\n * ```\r\n * // in the template\r\n * <div [@openClose]=\"open ? true : false\">...</div>\r\n * // in the component metadata\r\n * trigger('openClose', [\r\n *   state('true', style({ height: '*' })),\r\n *   state('false', style({ height: '0px' })),\r\n *   transition('false <=> true', animate(500))\r\n * ])\r\n * ```\r\n *\r\n * @publicApi\r\n **/\n\n\nfunction transition(stateChangeExpr, steps) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return {\n    type: 1\n    /* Transition */\n    ,\n    expr: stateChangeExpr,\n    animation: steps,\n    options: options\n  };\n}\n/**\r\n * Produces a reusable animation that can be invoked in another animation or sequence,\r\n * by calling the `useAnimation()` function.\r\n *\r\n * @param steps One or more animation objects, as returned by the `animate()`\r\n * or `sequence()` function, that form a transformation from one state to another.\r\n * A sequence is used by default when you pass an array.\r\n * @param options An options object that can contain a delay value for the start of the\r\n * animation, and additional developer-defined parameters.\r\n * Provided values for additional parameters are used as defaults,\r\n * and override values can be passed to the caller on invocation.\r\n * @returns An object that encapsulates the animation data.\r\n *\r\n * @usageNotes\r\n * The following example defines a reusable animation, providing some default parameter\r\n * values.\r\n *\r\n * ```typescript\r\n * var fadeAnimation = animation([\r\n *   style({ opacity: '{{ start }}' }),\r\n *   animate('{{ time }}',\r\n *   style({ opacity: '{{ end }}'}))\r\n *   ],\r\n *   { params: { time: '1000ms', start: 0, end: 1 }});\r\n * ```\r\n *\r\n * The following invokes the defined animation with a call to `useAnimation()`,\r\n * passing in override parameter values.\r\n *\r\n * ```js\r\n * useAnimation(fadeAnimation, {\r\n *   params: {\r\n *     time: '2s',\r\n *     start: 1,\r\n *     end: 0\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * If any of the passed-in parameter values are missing from this call,\r\n * the default values are used. If one or more parameter values are missing before a step is\r\n * animated, `useAnimation()` throws an error.\r\n *\r\n * @publicApi\r\n */\n\n\nfunction animation(steps) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return {\n    type: 8\n    /* Reference */\n    ,\n    animation: steps,\n    options: options\n  };\n}\n/**\r\n * Executes a queried inner animation element within an animation sequence.\r\n *\r\n * @param options An options object that can contain a delay value for the start of the\r\n * animation, and additional override values for developer-defined parameters.\r\n * @return An object that encapsulates the child animation data.\r\n *\r\n * @usageNotes\r\n * Each time an animation is triggered in Angular, the parent animation\r\n * has priority and any child animations are blocked. In order\r\n * for a child animation to run, the parent animation must query each of the elements\r\n * containing child animations, and run them using this function.\r\n *\r\n * Note that this feature is designed to be used with `query()` and it will only work\r\n * with animations that are assigned using the Angular animation library. CSS keyframes\r\n * and transitions are not handled by this API.\r\n *\r\n * @publicApi\r\n */\n\n\nfunction animateChild() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return {\n    type: 9\n    /* AnimateChild */\n    ,\n    options: options\n  };\n}\n/**\r\n * Starts a reusable animation that is created using the `animation()` function.\r\n *\r\n * @param animation The reusable animation to start.\r\n * @param options An options object that can contain a delay value for the start of\r\n * the animation, and additional override values for developer-defined parameters.\r\n * @return An object that contains the animation parameters.\r\n *\r\n * @publicApi\r\n */\n\n\nfunction useAnimation(animation) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return {\n    type: 10\n    /* AnimateRef */\n    ,\n    animation: animation,\n    options: options\n  };\n}\n/**\r\n * Finds one or more inner elements within the current element that is\r\n * being animated within a sequence. Use with `animate()`.\r\n *\r\n * @param selector The element to query, or a set of elements that contain Angular-specific\r\n * characteristics, specified with one or more of the following tokens.\r\n *  - `query(\":enter\")` or `query(\":leave\")` : Query for newly inserted/removed elements.\r\n *  - `query(\":animating\")` : Query all currently animating elements.\r\n *  - `query(\"@triggerName\")` : Query elements that contain an animation trigger.\r\n *  - `query(\"@*\")` : Query all elements that contain an animation triggers.\r\n *  - `query(\":self\")` : Include the current element into the animation sequence.\r\n *\r\n * @param animation One or more animation steps to apply to the queried element or elements.\r\n * An array is treated as an animation sequence.\r\n * @param options An options object. Use the 'limit' field to limit the total number of\r\n * items to collect.\r\n * @return An object that encapsulates the query data.\r\n *\r\n * @usageNotes\r\n * Tokens can be merged into a combined query selector string. For example:\r\n *\r\n * ```typescript\r\n *  query(':self, .record:enter, .record:leave, @subTrigger', [...])\r\n * ```\r\n *\r\n * The `query()` function collects multiple elements and works internally by using\r\n * `element.querySelectorAll`. Use the `limit` field of an options object to limit\r\n * the total number of items to be collected. For example:\r\n *\r\n * ```js\r\n * query('div', [\r\n *   animate(...),\r\n *   animate(...)\r\n * ], { limit: 1 })\r\n * ```\r\n *\r\n * By default, throws an error when zero items are found. Set the\r\n * `optional` flag to ignore this error. For example:\r\n *\r\n * ```js\r\n * query('.some-element-that-may-not-be-there', [\r\n *   animate(...),\r\n *   animate(...)\r\n * ], { optional: true })\r\n * ```\r\n *\r\n * ### Usage Example\r\n *\r\n * The following example queries for inner elements and animates them\r\n * individually using `animate()`.\r\n *\r\n * ```typescript\r\n * @Component({\r\n *   selector: 'inner',\r\n *   template: `\r\n *     <div [@queryAnimation]=\"exp\">\r\n *       <h1>Title</h1>\r\n *       <div class=\"content\">\r\n *         Blah blah blah\r\n *       </div>\r\n *     </div>\r\n *   `,\r\n *   animations: [\r\n *    trigger('queryAnimation', [\r\n *      transition('* => goAnimate', [\r\n *        // hide the inner elements\r\n *        query('h1', style({ opacity: 0 })),\r\n *        query('.content', style({ opacity: 0 })),\r\n *\r\n *        // animate the inner elements in, one by one\r\n *        query('h1', animate(1000, style({ opacity: 1 }))),\r\n *        query('.content', animate(1000, style({ opacity: 1 }))),\r\n *      ])\r\n *    ])\r\n *  ]\r\n * })\r\n * class Cmp {\r\n *   exp = '';\r\n *\r\n *   goAnimate() {\r\n *     this.exp = 'goAnimate';\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\n\n\nfunction query(selector, animation) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return {\n    type: 11\n    /* Query */\n    ,\n    selector: selector,\n    animation: animation,\n    options: options\n  };\n}\n/**\r\n * Use within an animation `query()` call to issue a timing gap after\r\n * each queried item is animated.\r\n *\r\n * @param timings A delay value.\r\n * @param animation One ore more animation steps.\r\n * @returns An object that encapsulates the stagger data.\r\n *\r\n * @usageNotes\r\n * In the following example, a container element wraps a list of items stamped out\r\n * by an `ngFor`. The container element contains an animation trigger that will later be set\r\n * to query for each of the inner items.\r\n *\r\n * Each time items are added, the opacity fade-in animation runs,\r\n * and each removed item is faded out.\r\n * When either of these animations occur, the stagger effect is\r\n * applied after each item's animation is started.\r\n *\r\n * ```html\r\n * <!-- list.component.html -->\r\n * <button (click)=\"toggle()\">Show / Hide Items</button>\r\n * <hr />\r\n * <div [@listAnimation]=\"items.length\">\r\n *   <div *ngFor=\"let item of items\">\r\n *     {{ item }}\r\n *   </div>\r\n * </div>\r\n * ```\r\n *\r\n * Here is the component code:\r\n *\r\n * ```typescript\r\n * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';\r\n * @Component({\r\n *   templateUrl: 'list.component.html',\r\n *   animations: [\r\n *     trigger('listAnimation', [\r\n *     ...\r\n *     ])\r\n *   ]\r\n * })\r\n * class ListComponent {\r\n *   items = [];\r\n *\r\n *   showItems() {\r\n *     this.items = [0,1,2,3,4];\r\n *   }\r\n *\r\n *   hideItems() {\r\n *     this.items = [];\r\n *   }\r\n *\r\n *   toggle() {\r\n *     this.items.length ? this.hideItems() : this.showItems();\r\n *    }\r\n *  }\r\n * ```\r\n *\r\n * Here is the animation trigger code:\r\n *\r\n * ```typescript\r\n * trigger('listAnimation', [\r\n *   transition('* => *', [ // each time the binding value changes\r\n *     query(':leave', [\r\n *       stagger(100, [\r\n *         animate('0.5s', style({ opacity: 0 }))\r\n *       ])\r\n *     ]),\r\n *     query(':enter', [\r\n *       style({ opacity: 0 }),\r\n *       stagger(100, [\r\n *         animate('0.5s', style({ opacity: 1 }))\r\n *       ])\r\n *     ])\r\n *   ])\r\n * ])\r\n * ```\r\n *\r\n * @publicApi\r\n */\n\n\nfunction stagger(timings, animation) {\n  return {\n    type: 12\n    /* Stagger */\n    ,\n    timings: timings,\n    animation: animation\n  };\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nfunction scheduleMicroTask(cb) {\n  Promise.resolve(null).then(cb);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * An empty programmatic controller for reusable animations.\r\n * Used internally when animations are disabled, to avoid\r\n * checking for the null case when an animation player is expected.\r\n *\r\n * @see `animate()`\r\n * @see `AnimationPlayer`\r\n * @see `GroupPlayer`\r\n *\r\n * @publicApi\r\n */\n\n\nvar NoopAnimationPlayer = /*#__PURE__*/function () {\n  function NoopAnimationPlayer() {\n    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, NoopAnimationPlayer);\n\n    this._onDoneFns = [];\n    this._onStartFns = [];\n    this._onDestroyFns = [];\n    this._started = false;\n    this._destroyed = false;\n    this._finished = false;\n    this._position = 0;\n    this.parentPlayer = null;\n    this.totalTime = duration + delay;\n  }\n\n  _createClass(NoopAnimationPlayer, [{\n    key: \"_onFinish\",\n    value: function _onFinish() {\n      if (!this._finished) {\n        this._finished = true;\n\n        this._onDoneFns.forEach(function (fn) {\n          return fn();\n        });\n\n        this._onDoneFns = [];\n      }\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(fn) {\n      this._onStartFns.push(fn);\n    }\n  }, {\n    key: \"onDone\",\n    value: function onDone(fn) {\n      this._onDoneFns.push(fn);\n    }\n  }, {\n    key: \"onDestroy\",\n    value: function onDestroy(fn) {\n      this._onDestroyFns.push(fn);\n    }\n  }, {\n    key: \"hasStarted\",\n    value: function hasStarted() {\n      return this._started;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"play\",\n    value: function play() {\n      if (!this.hasStarted()) {\n        this._onStart();\n\n        this.triggerMicrotask();\n      }\n\n      this._started = true;\n    }\n    /** @internal */\n\n  }, {\n    key: \"triggerMicrotask\",\n    value: function triggerMicrotask() {\n      var _this = this;\n\n      scheduleMicroTask(function () {\n        return _this._onFinish();\n      });\n    }\n  }, {\n    key: \"_onStart\",\n    value: function _onStart() {\n      this._onStartFns.forEach(function (fn) {\n        return fn();\n      });\n\n      this._onStartFns = [];\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {}\n  }, {\n    key: \"restart\",\n    value: function restart() {}\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this._onFinish();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (!this._destroyed) {\n        this._destroyed = true;\n\n        if (!this.hasStarted()) {\n          this._onStart();\n        }\n\n        this.finish();\n\n        this._onDestroyFns.forEach(function (fn) {\n          return fn();\n        });\n\n        this._onDestroyFns = [];\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._started = false;\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(position) {\n      this._position = this.totalTime ? position * this.totalTime : 1;\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return this.totalTime ? this._position / this.totalTime : 1;\n    }\n    /** @internal */\n\n  }, {\n    key: \"triggerCallback\",\n    value: function triggerCallback(phaseName) {\n      var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n      methods.forEach(function (fn) {\n        return fn();\n      });\n      methods.length = 0;\n    }\n  }]);\n\n  return NoopAnimationPlayer;\n}();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * A programmatic controller for a group of reusable animations.\r\n * Used internally to control animations.\r\n *\r\n * @see `AnimationPlayer`\r\n * @see `{@link animations/group group()}`\r\n *\r\n */\n\n\nvar AnimationGroupPlayer = /*#__PURE__*/function () {\n  function AnimationGroupPlayer(_players) {\n    var _this2 = this;\n\n    _classCallCheck(this, AnimationGroupPlayer);\n\n    this._onDoneFns = [];\n    this._onStartFns = [];\n    this._finished = false;\n    this._started = false;\n    this._destroyed = false;\n    this._onDestroyFns = [];\n    this.parentPlayer = null;\n    this.totalTime = 0;\n    this.players = _players;\n    var doneCount = 0;\n    var destroyCount = 0;\n    var startCount = 0;\n    var total = this.players.length;\n\n    if (total == 0) {\n      scheduleMicroTask(function () {\n        return _this2._onFinish();\n      });\n    } else {\n      this.players.forEach(function (player) {\n        player.onDone(function () {\n          if (++doneCount == total) {\n            _this2._onFinish();\n          }\n        });\n        player.onDestroy(function () {\n          if (++destroyCount == total) {\n            _this2._onDestroy();\n          }\n        });\n        player.onStart(function () {\n          if (++startCount == total) {\n            _this2._onStart();\n          }\n        });\n      });\n    }\n\n    this.totalTime = this.players.reduce(function (time, player) {\n      return Math.max(time, player.totalTime);\n    }, 0);\n  }\n\n  _createClass(AnimationGroupPlayer, [{\n    key: \"_onFinish\",\n    value: function _onFinish() {\n      if (!this._finished) {\n        this._finished = true;\n\n        this._onDoneFns.forEach(function (fn) {\n          return fn();\n        });\n\n        this._onDoneFns = [];\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.players.forEach(function (player) {\n        return player.init();\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(fn) {\n      this._onStartFns.push(fn);\n    }\n  }, {\n    key: \"_onStart\",\n    value: function _onStart() {\n      if (!this.hasStarted()) {\n        this._started = true;\n\n        this._onStartFns.forEach(function (fn) {\n          return fn();\n        });\n\n        this._onStartFns = [];\n      }\n    }\n  }, {\n    key: \"onDone\",\n    value: function onDone(fn) {\n      this._onDoneFns.push(fn);\n    }\n  }, {\n    key: \"onDestroy\",\n    value: function onDestroy(fn) {\n      this._onDestroyFns.push(fn);\n    }\n  }, {\n    key: \"hasStarted\",\n    value: function hasStarted() {\n      return this._started;\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      if (!this.parentPlayer) {\n        this.init();\n      }\n\n      this._onStart();\n\n      this.players.forEach(function (player) {\n        return player.play();\n      });\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.players.forEach(function (player) {\n        return player.pause();\n      });\n    }\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      this.players.forEach(function (player) {\n        return player.restart();\n      });\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this._onFinish();\n\n      this.players.forEach(function (player) {\n        return player.finish();\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._onDestroy();\n    }\n  }, {\n    key: \"_onDestroy\",\n    value: function _onDestroy() {\n      if (!this._destroyed) {\n        this._destroyed = true;\n\n        this._onFinish();\n\n        this.players.forEach(function (player) {\n          return player.destroy();\n        });\n\n        this._onDestroyFns.forEach(function (fn) {\n          return fn();\n        });\n\n        this._onDestroyFns = [];\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.players.forEach(function (player) {\n        return player.reset();\n      });\n      this._destroyed = false;\n      this._finished = false;\n      this._started = false;\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(p) {\n      var timeAtPosition = p * this.totalTime;\n      this.players.forEach(function (player) {\n        var position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\n        player.setPosition(position);\n      });\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      var longestPlayer = this.players.reduce(function (longestSoFar, player) {\n        var newPlayerIsLongest = longestSoFar === null || player.totalTime > longestSoFar.totalTime;\n        return newPlayerIsLongest ? player : longestSoFar;\n      }, null);\n      return longestPlayer != null ? longestPlayer.getPosition() : 0;\n    }\n  }, {\n    key: \"beforeDestroy\",\n    value: function beforeDestroy() {\n      this.players.forEach(function (player) {\n        if (player.beforeDestroy) {\n          player.beforeDestroy();\n        }\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"triggerCallback\",\n    value: function triggerCallback(phaseName) {\n      var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n      methods.forEach(function (fn) {\n        return fn();\n      });\n      methods.length = 0;\n    }\n  }]);\n\n  return AnimationGroupPlayer;\n}();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar ɵPRE_STYLE = '!';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AUTO_STYLE, AnimationBuilder, AnimationFactory, NoopAnimationPlayer, animate, animateChild, animation, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, AnimationGroupPlayer as ɵAnimationGroupPlayer, ɵPRE_STYLE }; //# sourceMappingURL=animations.js.map","map":{"version":3,"sources":["C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@angular/animations/__ivy_ngcc__/fesm2015/animations.js"],"names":["AnimationBuilder","AnimationFactory","AUTO_STYLE","trigger","name","definitions","type","options","animate","timings","styles","group","steps","sequence","style","tokens","offset","state","keyframes","transition","stateChangeExpr","expr","animation","animateChild","useAnimation","query","selector","stagger","scheduleMicroTask","cb","Promise","resolve","then","NoopAnimationPlayer","duration","delay","_onDoneFns","_onStartFns","_onDestroyFns","_started","_destroyed","_finished","_position","parentPlayer","totalTime","forEach","fn","push","hasStarted","_onStart","triggerMicrotask","_onFinish","finish","position","phaseName","methods","length","AnimationGroupPlayer","_players","players","doneCount","destroyCount","startCount","total","player","onDone","onDestroy","_onDestroy","onStart","reduce","time","Math","max","init","play","pause","restart","destroy","reset","p","timeAtPosition","min","setPosition","longestPlayer","longestSoFar","newPlayerIsLongest","getPosition","beforeDestroy","ɵPRE_STYLE","ɵAnimationGroupPlayer"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACMA,gB;;;AAEN;AACA;AACA;AACA;AACA;;;IACMC,gB;;;AAGN;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,UAAU,GAAG,GAAniBC,IAAjB,EAAuBC,WAAvB,EAAoC;AAChC,SAAO;AAAEC,IAAAA,IAAI,EAAE;AAAE;AAAV;AAAyBF,IAAAA,IAAI,EAAJA,IAAzB;AAA+BC,IAAAA,WAAW,EAAXA,WAA/B;AAA4CE,IAAAA,OAAO,EAAE;AAArD,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBC,OAAjB,EAAyC;AAAA,MAAfC,MAAe,uEAAN,IAAM;AACrC,SAAO;AAAEJ,IAAAA,IAAI,EAAE;AAAE;AAAV;AAAyBI,IAAAA,MAAM,EAANA,MAAzB;AAAiCD,IAAAA,OAAO,EAAPA;AAAjC,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,KAAT,CAAeC,KAAf,EAAsC;AAAA,MAAhBL,OAAgB,uEAAN,IAAM;AAClC,SAAO;AAAED,IAAAA,IAAI,EAAE;AAAE;AAAV;AAAuBM,IAAAA,KAAK,EAALA,KAAvB;AAA8BL,IAAAA,OAAO,EAAPA;AAA9B,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,QAAT,CAAkBD,KAAlB,EAAyC;AAAA,MAAhBL,OAAgB,uEAAN,IAAM;AACrC,SAAO;AAAED,IAAAA,IAAI,EAAE;AAAE;AAAV;AAA0BM,IAAAA,KAAK,EAALA,KAA1B;AAAiCL,IAAAA,OAAO,EAAPA;AAAjC,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,KAAT,CAAeC,MAAf,EAAuB;AACnB,SAAO;AAAET,IAAAA,IAAI,EAAE;AAAE;AAAV;AAAuBI,IAAAA,MAAM,EAAEK,MAA/B;AAAuCC,IAAAA,MAAM,EAAE;AAA/C,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAeb,IAAf,EAAqBM,MAArB,EAA6BH,OAA7B,EAAsC;AAClC,SAAO;AAAED,IAAAA,IAAI,EAAE;AAAE;AAAV;AAAuBF,IAAAA,IAAI,EAAJA,IAAvB;AAA6BM,IAAAA,MAAM,EAANA,MAA7B;AAAqCH,IAAAA,OAAO,EAAPA;AAArC,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,SAAT,CAAmBN,KAAnB,EAA0B;AACtB,SAAO;AAAEN,IAAAA,IAAI,EAAE;AAAE;AAAV;AAA2BM,IAAAA,KAAK,EAALA;AAA3B,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,UAAT,CAAoBC,eAApB,EAAqCR,KAArC,EAA4D;AAAA,MAAhBL,OAAgB,uEAAN,IAAM;AACxD,SAAO;AAAED,IAAAA,IAAI,EAAE;AAAE;AAAV;AAA4Be,IAAAA,IAAI,EAAED,eAAlC;AAAmDE,IAAAA,SAAS,EAAEV,KAA9D;AAAqEL,IAAAA,OAAO,EAAPA;AAArE,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASe,SAAT,CAAmBV,KAAnB,EAA0C;AAAA,MAAhBL,OAAgB,uEAAN,IAAM;AACtC,SAAO;AAAED,IAAAA,IAAI,EAAE;AAAE;AAAV;AAA2BgB,IAAAA,SAAS,EAAEV,KAAtC;AAA6CL,IAAAA,OAAO,EAAPA;AAA7C,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgB,YAAT,GAAsC;AAAA,MAAhBhB,OAAgB,uEAAN,IAAM;AAClC,SAAO;AAAED,IAAAA,IAAI,EAAE;AAAE;AAAV;AAA8BC,IAAAA,OAAO,EAAPA;AAA9B,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiB,YAAT,CAAsBF,SAAtB,EAAiD;AAAA,MAAhBf,OAAgB,uEAAN,IAAM;AAC7C,SAAO;AAAED,IAAAA,IAAI,EAAE;AAAG;AAAX;AAA6BgB,IAAAA,SAAS,EAATA,SAA7B;AAAwCf,IAAAA,OAAO,EAAPA;AAAxC,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkB,KAAT,CAAeC,QAAf,EAAyBJ,SAAzB,EAAoD;AAAA,MAAhBf,OAAgB,uEAAN,IAAM;AAChD,SAAO;AAAED,IAAAA,IAAI,EAAE;AAAG;AAAX;AAAwBoB,IAAAA,QAAQ,EAARA,QAAxB;AAAkCJ,IAAAA,SAAS,EAATA,SAAlC;AAA6Cf,IAAAA,OAAO,EAAPA;AAA7C,GAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoB,OAAT,CAAiBlB,OAAjB,EAA0Ba,SAA1B,EAAqC;AACjC,SAAO;AAAEhB,IAAAA,IAAI,EAAE;AAAG;AAAX;AAA0BG,IAAAA,OAAO,EAAPA,OAA1B;AAAmCa,IAAAA,SAAS,EAATA;AAAnC,GAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,iBAAT,CAA2BC,EAA3B,EAA+B;AAC3BC,EAAAA,OAAO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","sourcesContent":["/**\r\n * @license Angular v12.0.5\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\n/**\r\n * An injectable service that produces an animation sequence programmatically within an\r\n * Angular component or directive.\r\n * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.\r\n *\r\n * @usageNotes\r\n *\r\n * To use this service, add it to your component or directive as a dependency.\r\n * The service is instantiated along with your component.\r\n *\r\n * Apps do not typically need to create their own animation players, but if you\r\n * do need to, follow these steps:\r\n *\r\n * 1. Use the `build()` method to create a programmatic animation using the\r\n * `animate()` function. The method returns an `AnimationFactory` instance.\r\n *\r\n * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.\r\n *\r\n * 3. Use the player object to control the animation programmatically.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * // import the service from BrowserAnimationsModule\r\n * import {AnimationBuilder} from '@angular/animations';\r\n * // require the service as a dependency\r\n * class MyCmp {\r\n *   constructor(private _builder: AnimationBuilder) {}\r\n *\r\n *   makeAnimation(element: any) {\r\n *     // first define a reusable animation\r\n *     const myAnimation = this._builder.build([\r\n *       style({ width: 0 }),\r\n *       animate(1000, style({ width: '100px' }))\r\n *     ]);\r\n *\r\n *     // use the returned factory object to create a player\r\n *     const player = myAnimation.create(element);\r\n *\r\n *     player.play();\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nclass AnimationBuilder {\r\n}\r\n/**\r\n * A factory object returned from the `AnimationBuilder`.`build()` method.\r\n *\r\n * @publicApi\r\n */\r\nclass AnimationFactory {\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Specifies automatic styling.\r\n *\r\n * @publicApi\r\n */\r\nconst AUTO_STYLE = '*';\r\n/**\r\n * Creates a named animation trigger, containing a  list of `state()`\r\n * and `transition()` entries to be evaluated when the expression\r\n * bound to the trigger changes.\r\n *\r\n * @param name An identifying string.\r\n * @param definitions  An animation definition object, containing an array of `state()`\r\n * and `transition()` declarations.\r\n *\r\n * @return An object that encapsulates the trigger data.\r\n *\r\n * @usageNotes\r\n * Define an animation trigger in the `animations` section of `@Component` metadata.\r\n * In the template, reference the trigger by name and bind it to a trigger expression that\r\n * evaluates to a defined animation state, using the following format:\r\n *\r\n * `[@triggerName]=\"expression\"`\r\n *\r\n * Animation trigger bindings convert all values to strings, and then match the\r\n * previous and current values against any linked transitions.\r\n * Booleans can be specified as `1` or `true` and `0` or `false`.\r\n *\r\n * ### Usage Example\r\n *\r\n * The following example creates an animation trigger reference based on the provided\r\n * name value.\r\n * The provided animation value is expected to be an array consisting of state and\r\n * transition declarations.\r\n *\r\n * ```typescript\r\n * @Component({\r\n *   selector: \"my-component\",\r\n *   templateUrl: \"my-component-tpl.html\",\r\n *   animations: [\r\n *     trigger(\"myAnimationTrigger\", [\r\n *       state(...),\r\n *       state(...),\r\n *       transition(...),\r\n *       transition(...)\r\n *     ])\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   myStatusExp = \"something\";\r\n * }\r\n * ```\r\n *\r\n * The template associated with this component makes use of the defined trigger\r\n * by binding to an element within its template code.\r\n *\r\n * ```html\r\n * <!-- somewhere inside of my-component-tpl.html -->\r\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\r\n * ```\r\n *\r\n * ### Using an inline function\r\n * The `transition` animation method also supports reading an inline function which can decide\r\n * if its associated animation should be run.\r\n *\r\n * ```typescript\r\n * // this method is run each time the `myAnimationTrigger` trigger value changes.\r\n * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:\r\n string]: any}): boolean {\r\n *   // notice that `element` and `params` are also available here\r\n *   return toState == 'yes-please-animate';\r\n * }\r\n *\r\n * @Component({\r\n *   selector: 'my-component',\r\n *   templateUrl: 'my-component-tpl.html',\r\n *   animations: [\r\n *     trigger('myAnimationTrigger', [\r\n *       transition(myInlineMatcherFn, [\r\n *         // the animation sequence code\r\n *       ]),\r\n *     ])\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   myStatusExp = \"yes-please-animate\";\r\n * }\r\n * ```\r\n *\r\n * ### Disabling Animations\r\n * When true, the special animation control binding `@.disabled` binding prevents\r\n * all animations from rendering.\r\n * Place the  `@.disabled` binding on an element to disable\r\n * animations on the element itself, as well as any inner animation triggers\r\n * within the element.\r\n *\r\n * The following example shows how to use this feature:\r\n *\r\n * ```typescript\r\n * @Component({\r\n *   selector: 'my-component',\r\n *   template: `\r\n *     <div [@.disabled]=\"isDisabled\">\r\n *       <div [@childAnimation]=\"exp\"></div>\r\n *     </div>\r\n *   `,\r\n *   animations: [\r\n *     trigger(\"childAnimation\", [\r\n *       // ...\r\n *     ])\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   isDisabled = true;\r\n *   exp = '...';\r\n * }\r\n * ```\r\n *\r\n * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,\r\n * along with any inner animations.\r\n *\r\n * ### Disable animations application-wide\r\n * When an area of the template is set to have animations disabled,\r\n * **all** inner components have their animations disabled as well.\r\n * This means that you can disable all animations for an app\r\n * by placing a host binding set on `@.disabled` on the topmost Angular component.\r\n *\r\n * ```typescript\r\n * import {Component, HostBinding} from '@angular/core';\r\n *\r\n * @Component({\r\n *   selector: 'app-component',\r\n *   templateUrl: 'app.component.html',\r\n * })\r\n * class AppComponent {\r\n *   @HostBinding('@.disabled')\r\n *   public animationsDisabled = true;\r\n * }\r\n * ```\r\n *\r\n * ### Overriding disablement of inner animations\r\n * Despite inner animations being disabled, a parent animation can `query()`\r\n * for inner elements located in disabled areas of the template and still animate\r\n * them if needed. This is also the case for when a sub animation is\r\n * queried by a parent and then later animated using `animateChild()`.\r\n *\r\n * ### Detecting when an animation is disabled\r\n * If a region of the DOM (or the entire application) has its animations disabled, the animation\r\n * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides\r\n * an instance of an `AnimationEvent`. If animations are disabled,\r\n * the `.disabled` flag on the event is true.\r\n *\r\n * @publicApi\r\n */\r\nfunction trigger(name, definitions) {\r\n    return { type: 7 /* Trigger */, name, definitions, options: {} };\r\n}\r\n/**\r\n * Defines an animation step that combines styling information with timing information.\r\n *\r\n * @param timings Sets `AnimateTimings` for the parent animation.\r\n * A string in the format \"duration [delay] [easing]\".\r\n *  - Duration and delay are expressed as a number and optional time unit,\r\n * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\r\n * The default unit is milliseconds.\r\n *  - The easing value controls how the animation accelerates and decelerates\r\n * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,\r\n * `ease-in-out`, or a `cubic-bezier()` function call.\r\n * If not supplied, no easing is applied.\r\n *\r\n * For example, the string \"1s 100ms ease-out\" specifies a duration of\r\n * 1000 milliseconds, and delay of 100 ms, and the \"ease-out\" easing style,\r\n * which decelerates near the end of the duration.\r\n * @param styles Sets AnimationStyles for the parent animation.\r\n * A function call to either `style()` or `keyframes()`\r\n * that returns a collection of CSS style entries to be applied to the parent animation.\r\n * When null, uses the styles from the destination state.\r\n * This is useful when describing an animation step that will complete an animation;\r\n * see \"Animating to the final state\" in `transitions()`.\r\n * @returns An object that encapsulates the animation step.\r\n *\r\n * @usageNotes\r\n * Call within an animation `sequence()`, `{@link animations/group group()}`, or\r\n * `transition()` call to specify an animation step\r\n * that applies given style data to the parent animation for a given amount of time.\r\n *\r\n * ### Syntax Examples\r\n * **Timing examples**\r\n *\r\n * The following examples show various `timings` specifications.\r\n * - `animate(500)` : Duration is 500 milliseconds.\r\n * - `animate(\"1s\")` : Duration is 1000 milliseconds.\r\n * - `animate(\"100ms 0.5s\")` : Duration is 100 milliseconds, delay is 500 milliseconds.\r\n * - `animate(\"5s ease-in\")` : Duration is 5000 milliseconds, easing in.\r\n * - `animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\")` : Duration is 5000 milliseconds, delay is 10\r\n * milliseconds, easing according to a bezier curve.\r\n *\r\n * **Style examples**\r\n *\r\n * The following example calls `style()` to set a single CSS style.\r\n * ```typescript\r\n * animate(500, style({ background: \"red\" }))\r\n * ```\r\n * The following example calls `keyframes()` to set a CSS style\r\n * to different values for successive keyframes.\r\n * ```typescript\r\n * animate(500, keyframes(\r\n *  [\r\n *   style({ background: \"blue\" }),\r\n *   style({ background: \"red\" })\r\n *  ])\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nfunction animate(timings, styles = null) {\r\n    return { type: 4 /* Animate */, styles, timings };\r\n}\r\n/**\r\n * @description Defines a list of animation steps to be run in parallel.\r\n *\r\n * @param steps An array of animation step objects.\r\n * - When steps are defined by `style()` or `animate()`\r\n * function calls, each call within the group is executed instantly.\r\n * - To specify offset styles to be applied at a later time, define steps with\r\n * `keyframes()`, or use `animate()` calls with a delay value.\r\n * For example:\r\n *\r\n * ```typescript\r\n * group([\r\n *   animate(\"1s\", style({ background: \"black\" })),\r\n *   animate(\"2s\", style({ color: \"white\" }))\r\n * ])\r\n * ```\r\n *\r\n * @param options An options object containing a delay and\r\n * developer-defined parameters that provide styling defaults and\r\n * can be overridden on invocation.\r\n *\r\n * @return An object that encapsulates the group data.\r\n *\r\n * @usageNotes\r\n * Grouped animations are useful when a series of styles must be\r\n * animated at different starting times and closed off at different ending times.\r\n *\r\n * When called within a `sequence()` or a\r\n * `transition()` call, does not continue to the next\r\n * instruction until all of the inner animation steps have completed.\r\n *\r\n * @publicApi\r\n */\r\nfunction group(steps, options = null) {\r\n    return { type: 3 /* Group */, steps, options };\r\n}\r\n/**\r\n * Defines a list of animation steps to be run sequentially, one by one.\r\n *\r\n * @param steps An array of animation step objects.\r\n * - Steps defined by `style()` calls apply the styling data immediately.\r\n * - Steps defined by `animate()` calls apply the styling data over time\r\n *   as specified by the timing data.\r\n *\r\n * ```typescript\r\n * sequence([\r\n *   style({ opacity: 0 }),\r\n *   animate(\"1s\", style({ opacity: 1 }))\r\n * ])\r\n * ```\r\n *\r\n * @param options An options object containing a delay and\r\n * developer-defined parameters that provide styling defaults and\r\n * can be overridden on invocation.\r\n *\r\n * @return An object that encapsulates the sequence data.\r\n *\r\n * @usageNotes\r\n * When you pass an array of steps to a\r\n * `transition()` call, the steps run sequentially by default.\r\n * Compare this to the `{@link animations/group group()}` call, which runs animation steps in\r\n *parallel.\r\n *\r\n * When a sequence is used within a `{@link animations/group group()}` or a `transition()` call,\r\n * execution continues to the next instruction only after each of the inner animation\r\n * steps have completed.\r\n *\r\n * @publicApi\r\n **/\r\nfunction sequence(steps, options = null) {\r\n    return { type: 2 /* Sequence */, steps, options };\r\n}\r\n/**\r\n * Declares a key/value object containing CSS properties/styles that\r\n * can then be used for an animation `state`, within an animation `sequence`,\r\n * or as styling data for calls to `animate()` and `keyframes()`.\r\n *\r\n * @param tokens A set of CSS styles or HTML styles associated with an animation state.\r\n * The value can be any of the following:\r\n * - A key-value style pair associating a CSS property with a value.\r\n * - An array of key-value style pairs.\r\n * - An asterisk (*), to use auto-styling, where styles are derived from the element\r\n * being animated and applied to the animation when it starts.\r\n *\r\n * Auto-styling can be used to define a state that depends on layout or other\r\n * environmental factors.\r\n *\r\n * @return An object that encapsulates the style data.\r\n *\r\n * @usageNotes\r\n * The following examples create animation styles that collect a set of\r\n * CSS property values:\r\n *\r\n * ```typescript\r\n * // string values for CSS properties\r\n * style({ background: \"red\", color: \"blue\" })\r\n *\r\n * // numerical pixel values\r\n * style({ width: 100, height: 0 })\r\n * ```\r\n *\r\n * The following example uses auto-styling to allow a component to animate from\r\n * a height of 0 up to the height of the parent element:\r\n *\r\n * ```\r\n * style({ height: 0 }),\r\n * animate(\"1s\", style({ height: \"*\" }))\r\n * ```\r\n *\r\n * @publicApi\r\n **/\r\nfunction style(tokens) {\r\n    return { type: 6 /* Style */, styles: tokens, offset: null };\r\n}\r\n/**\r\n * Declares an animation state within a trigger attached to an element.\r\n *\r\n * @param name One or more names for the defined state in a comma-separated string.\r\n * The following reserved state names can be supplied to define a style for specific use\r\n * cases:\r\n *\r\n * - `void` You can associate styles with this name to be used when\r\n * the element is detached from the application. For example, when an `ngIf` evaluates\r\n * to false, the state of the associated element is void.\r\n *  - `*` (asterisk) Indicates the default state. You can associate styles with this name\r\n * to be used as the fallback when the state that is being animated is not declared\r\n * within the trigger.\r\n *\r\n * @param styles A set of CSS styles associated with this state, created using the\r\n * `style()` function.\r\n * This set of styles persists on the element once the state has been reached.\r\n * @param options Parameters that can be passed to the state when it is invoked.\r\n * 0 or more key-value pairs.\r\n * @return An object that encapsulates the new state data.\r\n *\r\n * @usageNotes\r\n * Use the `trigger()` function to register states to an animation trigger.\r\n * Use the `transition()` function to animate between states.\r\n * When a state is active within a component, its associated styles persist on the element,\r\n * even when the animation ends.\r\n *\r\n * @publicApi\r\n **/\r\nfunction state(name, styles, options) {\r\n    return { type: 0 /* State */, name, styles, options };\r\n}\r\n/**\r\n * Defines a set of animation styles, associating each style with an optional `offset` value.\r\n *\r\n * @param steps A set of animation styles with optional offset data.\r\n * The optional `offset` value for a style specifies a percentage of the total animation\r\n * time at which that style is applied.\r\n * @returns An object that encapsulates the keyframes data.\r\n *\r\n * @usageNotes\r\n * Use with the `animate()` call. Instead of applying animations\r\n * from the current state\r\n * to the destination state, keyframes describe how each style entry is applied and at what point\r\n * within the animation arc.\r\n * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).\r\n *\r\n * ### Usage\r\n *\r\n * In the following example, the offset values describe\r\n * when each `backgroundColor` value is applied. The color is red at the start, and changes to\r\n * blue when 20% of the total time has elapsed.\r\n *\r\n * ```typescript\r\n * // the provided offset values\r\n * animate(\"5s\", keyframes([\r\n *   style({ backgroundColor: \"red\", offset: 0 }),\r\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\r\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\r\n *   style({ backgroundColor: \"black\", offset: 1 })\r\n * ]))\r\n * ```\r\n *\r\n * If there are no `offset` values specified in the style entries, the offsets\r\n * are calculated automatically.\r\n *\r\n * ```typescript\r\n * animate(\"5s\", keyframes([\r\n *   style({ backgroundColor: \"red\" }) // offset = 0\r\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\r\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\r\n *   style({ backgroundColor: \"black\" }) // offset = 1\r\n * ]))\r\n *```\r\n\r\n * @publicApi\r\n */\r\nfunction keyframes(steps) {\r\n    return { type: 5 /* Keyframes */, steps };\r\n}\r\n/**\r\n * Declares an animation transition as a sequence of animation steps to run when a given\r\n * condition is satisfied. The condition is a Boolean expression or function that compares\r\n * the previous and current animation states, and returns true if this transition should occur.\r\n * When the state criteria of a defined transition are met, the associated animation is\r\n * triggered.\r\n *\r\n * @param stateChangeExpr A Boolean expression or function that compares the previous and current\r\n * animation states, and returns true if this transition should occur. Note that  \"true\" and \"false\"\r\n * match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the\r\n * animation trigger element.\r\n * The animation steps run when the expression evaluates to true.\r\n *\r\n * - A state-change string takes the form \"state1 => state2\", where each side is a defined animation\r\n * state, or an asterix (*) to refer to a dynamic start or end state.\r\n *   - The expression string can contain multiple comma-separated statements;\r\n * for example \"state1 => state2, state3 => state4\".\r\n *   - Special values `:enter` and `:leave` initiate a transition on the entry and exit states,\r\n * equivalent to  \"void => *\"  and \"* => void\".\r\n *   - Special values `:increment` and `:decrement` initiate a transition when a numeric value has\r\n * increased or decreased in value.\r\n * - A function is executed each time a state change occurs in the animation trigger element.\r\n * The animation steps run when the function returns true.\r\n *\r\n * @param steps One or more animation objects, as returned by the `animate()` or\r\n * `sequence()` function, that form a transformation from one state to another.\r\n * A sequence is used by default when you pass an array.\r\n * @param options An options object that can contain a delay value for the start of the animation,\r\n * and additional developer-defined parameters. Provided values for additional parameters are used\r\n * as defaults, and override values can be passed to the caller on invocation.\r\n * @returns An object that encapsulates the transition data.\r\n *\r\n * @usageNotes\r\n * The template associated with a component binds an animation trigger to an element.\r\n *\r\n * ```HTML\r\n * <!-- somewhere inside of my-component-tpl.html -->\r\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\r\n * ```\r\n *\r\n * All transitions are defined within an animation trigger,\r\n * along with named states that the transitions change to and from.\r\n *\r\n * ```typescript\r\n * trigger(\"myAnimationTrigger\", [\r\n *  // define states\r\n *  state(\"on\", style({ background: \"green\" })),\r\n *  state(\"off\", style({ background: \"grey\" })),\r\n *  ...]\r\n * ```\r\n *\r\n * Note that when you call the `sequence()` function within a `{@link animations/group group()}`\r\n * or a `transition()` call, execution does not continue to the next instruction\r\n * until each of the inner animation steps have completed.\r\n *\r\n * ### Syntax examples\r\n *\r\n * The following examples define transitions between the two defined states (and default states),\r\n * using various options:\r\n *\r\n * ```typescript\r\n * // Transition occurs when the state value\r\n * // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\r\n * transition(\"on => off\", animate(500))\r\n * // Run the same animation for both directions\r\n * transition(\"on <=> off\", animate(500))\r\n * // Define multiple state-change pairs separated by commas\r\n * transition(\"on => off, off => void\", animate(500))\r\n * ```\r\n *\r\n * ### Special values for state-change expressions\r\n *\r\n * - Catch-all state change for when an element is inserted into the page and the\r\n * destination state is unknown:\r\n *\r\n * ```typescript\r\n * transition(\"void => *\", [\r\n *  style({ opacity: 0 }),\r\n *  animate(500)\r\n *  ])\r\n * ```\r\n *\r\n * - Capture a state change between any states:\r\n *\r\n *  `transition(\"* => *\", animate(\"1s 0s\"))`\r\n *\r\n * - Entry and exit transitions:\r\n *\r\n * ```typescript\r\n * transition(\":enter\", [\r\n *   style({ opacity: 0 }),\r\n *   animate(500, style({ opacity: 1 }))\r\n *   ]),\r\n * transition(\":leave\", [\r\n *   animate(500, style({ opacity: 0 }))\r\n *   ])\r\n * ```\r\n *\r\n * - Use `:increment` and `:decrement` to initiate transitions:\r\n *\r\n * ```typescript\r\n * transition(\":increment\", group([\r\n *  query(':enter', [\r\n *     style({ left: '100%' }),\r\n *     animate('0.5s ease-out', style('*'))\r\n *   ]),\r\n *  query(':leave', [\r\n *     animate('0.5s ease-out', style({ left: '-100%' }))\r\n *  ])\r\n * ]))\r\n *\r\n * transition(\":decrement\", group([\r\n *  query(':enter', [\r\n *     style({ left: '100%' }),\r\n *     animate('0.5s ease-out', style('*'))\r\n *   ]),\r\n *  query(':leave', [\r\n *     animate('0.5s ease-out', style({ left: '-100%' }))\r\n *  ])\r\n * ]))\r\n * ```\r\n *\r\n * ### State-change functions\r\n *\r\n * Here is an example of a `fromState` specified as a state-change function that invokes an\r\n * animation when true:\r\n *\r\n * ```typescript\r\n * transition((fromState, toState) =>\r\n *  {\r\n *   return fromState == \"off\" && toState == \"on\";\r\n *  },\r\n *  animate(\"1s 0s\"))\r\n * ```\r\n *\r\n * ### Animating to the final state\r\n *\r\n * If the final step in a transition is a call to `animate()` that uses a timing value\r\n * with no style data, that step is automatically considered the final animation arc,\r\n * for the element to reach the final state. Angular automatically adds or removes\r\n * CSS styles to ensure that the element is in the correct final state.\r\n *\r\n * The following example defines a transition that starts by hiding the element,\r\n * then makes sure that it animates properly to whatever state is currently active for trigger:\r\n *\r\n * ```typescript\r\n * transition(\"void => *\", [\r\n *   style({ opacity: 0 }),\r\n *   animate(500)\r\n *  ])\r\n * ```\r\n * ### Boolean value matching\r\n * If a trigger binding value is a Boolean, it can be matched using a transition expression\r\n * that compares true and false or 1 and 0. For example:\r\n *\r\n * ```\r\n * // in the template\r\n * <div [@openClose]=\"open ? true : false\">...</div>\r\n * // in the component metadata\r\n * trigger('openClose', [\r\n *   state('true', style({ height: '*' })),\r\n *   state('false', style({ height: '0px' })),\r\n *   transition('false <=> true', animate(500))\r\n * ])\r\n * ```\r\n *\r\n * @publicApi\r\n **/\r\nfunction transition(stateChangeExpr, steps, options = null) {\r\n    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps, options };\r\n}\r\n/**\r\n * Produces a reusable animation that can be invoked in another animation or sequence,\r\n * by calling the `useAnimation()` function.\r\n *\r\n * @param steps One or more animation objects, as returned by the `animate()`\r\n * or `sequence()` function, that form a transformation from one state to another.\r\n * A sequence is used by default when you pass an array.\r\n * @param options An options object that can contain a delay value for the start of the\r\n * animation, and additional developer-defined parameters.\r\n * Provided values for additional parameters are used as defaults,\r\n * and override values can be passed to the caller on invocation.\r\n * @returns An object that encapsulates the animation data.\r\n *\r\n * @usageNotes\r\n * The following example defines a reusable animation, providing some default parameter\r\n * values.\r\n *\r\n * ```typescript\r\n * var fadeAnimation = animation([\r\n *   style({ opacity: '{{ start }}' }),\r\n *   animate('{{ time }}',\r\n *   style({ opacity: '{{ end }}'}))\r\n *   ],\r\n *   { params: { time: '1000ms', start: 0, end: 1 }});\r\n * ```\r\n *\r\n * The following invokes the defined animation with a call to `useAnimation()`,\r\n * passing in override parameter values.\r\n *\r\n * ```js\r\n * useAnimation(fadeAnimation, {\r\n *   params: {\r\n *     time: '2s',\r\n *     start: 1,\r\n *     end: 0\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * If any of the passed-in parameter values are missing from this call,\r\n * the default values are used. If one or more parameter values are missing before a step is\r\n * animated, `useAnimation()` throws an error.\r\n *\r\n * @publicApi\r\n */\r\nfunction animation(steps, options = null) {\r\n    return { type: 8 /* Reference */, animation: steps, options };\r\n}\r\n/**\r\n * Executes a queried inner animation element within an animation sequence.\r\n *\r\n * @param options An options object that can contain a delay value for the start of the\r\n * animation, and additional override values for developer-defined parameters.\r\n * @return An object that encapsulates the child animation data.\r\n *\r\n * @usageNotes\r\n * Each time an animation is triggered in Angular, the parent animation\r\n * has priority and any child animations are blocked. In order\r\n * for a child animation to run, the parent animation must query each of the elements\r\n * containing child animations, and run them using this function.\r\n *\r\n * Note that this feature is designed to be used with `query()` and it will only work\r\n * with animations that are assigned using the Angular animation library. CSS keyframes\r\n * and transitions are not handled by this API.\r\n *\r\n * @publicApi\r\n */\r\nfunction animateChild(options = null) {\r\n    return { type: 9 /* AnimateChild */, options };\r\n}\r\n/**\r\n * Starts a reusable animation that is created using the `animation()` function.\r\n *\r\n * @param animation The reusable animation to start.\r\n * @param options An options object that can contain a delay value for the start of\r\n * the animation, and additional override values for developer-defined parameters.\r\n * @return An object that contains the animation parameters.\r\n *\r\n * @publicApi\r\n */\r\nfunction useAnimation(animation, options = null) {\r\n    return { type: 10 /* AnimateRef */, animation, options };\r\n}\r\n/**\r\n * Finds one or more inner elements within the current element that is\r\n * being animated within a sequence. Use with `animate()`.\r\n *\r\n * @param selector The element to query, or a set of elements that contain Angular-specific\r\n * characteristics, specified with one or more of the following tokens.\r\n *  - `query(\":enter\")` or `query(\":leave\")` : Query for newly inserted/removed elements.\r\n *  - `query(\":animating\")` : Query all currently animating elements.\r\n *  - `query(\"@triggerName\")` : Query elements that contain an animation trigger.\r\n *  - `query(\"@*\")` : Query all elements that contain an animation triggers.\r\n *  - `query(\":self\")` : Include the current element into the animation sequence.\r\n *\r\n * @param animation One or more animation steps to apply to the queried element or elements.\r\n * An array is treated as an animation sequence.\r\n * @param options An options object. Use the 'limit' field to limit the total number of\r\n * items to collect.\r\n * @return An object that encapsulates the query data.\r\n *\r\n * @usageNotes\r\n * Tokens can be merged into a combined query selector string. For example:\r\n *\r\n * ```typescript\r\n *  query(':self, .record:enter, .record:leave, @subTrigger', [...])\r\n * ```\r\n *\r\n * The `query()` function collects multiple elements and works internally by using\r\n * `element.querySelectorAll`. Use the `limit` field of an options object to limit\r\n * the total number of items to be collected. For example:\r\n *\r\n * ```js\r\n * query('div', [\r\n *   animate(...),\r\n *   animate(...)\r\n * ], { limit: 1 })\r\n * ```\r\n *\r\n * By default, throws an error when zero items are found. Set the\r\n * `optional` flag to ignore this error. For example:\r\n *\r\n * ```js\r\n * query('.some-element-that-may-not-be-there', [\r\n *   animate(...),\r\n *   animate(...)\r\n * ], { optional: true })\r\n * ```\r\n *\r\n * ### Usage Example\r\n *\r\n * The following example queries for inner elements and animates them\r\n * individually using `animate()`.\r\n *\r\n * ```typescript\r\n * @Component({\r\n *   selector: 'inner',\r\n *   template: `\r\n *     <div [@queryAnimation]=\"exp\">\r\n *       <h1>Title</h1>\r\n *       <div class=\"content\">\r\n *         Blah blah blah\r\n *       </div>\r\n *     </div>\r\n *   `,\r\n *   animations: [\r\n *    trigger('queryAnimation', [\r\n *      transition('* => goAnimate', [\r\n *        // hide the inner elements\r\n *        query('h1', style({ opacity: 0 })),\r\n *        query('.content', style({ opacity: 0 })),\r\n *\r\n *        // animate the inner elements in, one by one\r\n *        query('h1', animate(1000, style({ opacity: 1 }))),\r\n *        query('.content', animate(1000, style({ opacity: 1 }))),\r\n *      ])\r\n *    ])\r\n *  ]\r\n * })\r\n * class Cmp {\r\n *   exp = '';\r\n *\r\n *   goAnimate() {\r\n *     this.exp = 'goAnimate';\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nfunction query(selector, animation, options = null) {\r\n    return { type: 11 /* Query */, selector, animation, options };\r\n}\r\n/**\r\n * Use within an animation `query()` call to issue a timing gap after\r\n * each queried item is animated.\r\n *\r\n * @param timings A delay value.\r\n * @param animation One ore more animation steps.\r\n * @returns An object that encapsulates the stagger data.\r\n *\r\n * @usageNotes\r\n * In the following example, a container element wraps a list of items stamped out\r\n * by an `ngFor`. The container element contains an animation trigger that will later be set\r\n * to query for each of the inner items.\r\n *\r\n * Each time items are added, the opacity fade-in animation runs,\r\n * and each removed item is faded out.\r\n * When either of these animations occur, the stagger effect is\r\n * applied after each item's animation is started.\r\n *\r\n * ```html\r\n * <!-- list.component.html -->\r\n * <button (click)=\"toggle()\">Show / Hide Items</button>\r\n * <hr />\r\n * <div [@listAnimation]=\"items.length\">\r\n *   <div *ngFor=\"let item of items\">\r\n *     {{ item }}\r\n *   </div>\r\n * </div>\r\n * ```\r\n *\r\n * Here is the component code:\r\n *\r\n * ```typescript\r\n * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';\r\n * @Component({\r\n *   templateUrl: 'list.component.html',\r\n *   animations: [\r\n *     trigger('listAnimation', [\r\n *     ...\r\n *     ])\r\n *   ]\r\n * })\r\n * class ListComponent {\r\n *   items = [];\r\n *\r\n *   showItems() {\r\n *     this.items = [0,1,2,3,4];\r\n *   }\r\n *\r\n *   hideItems() {\r\n *     this.items = [];\r\n *   }\r\n *\r\n *   toggle() {\r\n *     this.items.length ? this.hideItems() : this.showItems();\r\n *    }\r\n *  }\r\n * ```\r\n *\r\n * Here is the animation trigger code:\r\n *\r\n * ```typescript\r\n * trigger('listAnimation', [\r\n *   transition('* => *', [ // each time the binding value changes\r\n *     query(':leave', [\r\n *       stagger(100, [\r\n *         animate('0.5s', style({ opacity: 0 }))\r\n *       ])\r\n *     ]),\r\n *     query(':enter', [\r\n *       style({ opacity: 0 }),\r\n *       stagger(100, [\r\n *         animate('0.5s', style({ opacity: 1 }))\r\n *       ])\r\n *     ])\r\n *   ])\r\n * ])\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nfunction stagger(timings, animation) {\r\n    return { type: 12 /* Stagger */, timings, animation };\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction scheduleMicroTask(cb) {\r\n    Promise.resolve(null).then(cb);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An empty programmatic controller for reusable animations.\r\n * Used internally when animations are disabled, to avoid\r\n * checking for the null case when an animation player is expected.\r\n *\r\n * @see `animate()`\r\n * @see `AnimationPlayer`\r\n * @see `GroupPlayer`\r\n *\r\n * @publicApi\r\n */\r\nclass NoopAnimationPlayer {\r\n    constructor(duration = 0, delay = 0) {\r\n        this._onDoneFns = [];\r\n        this._onStartFns = [];\r\n        this._onDestroyFns = [];\r\n        this._started = false;\r\n        this._destroyed = false;\r\n        this._finished = false;\r\n        this._position = 0;\r\n        this.parentPlayer = null;\r\n        this.totalTime = duration + delay;\r\n    }\r\n    _onFinish() {\r\n        if (!this._finished) {\r\n            this._finished = true;\r\n            this._onDoneFns.forEach(fn => fn());\r\n            this._onDoneFns = [];\r\n        }\r\n    }\r\n    onStart(fn) {\r\n        this._onStartFns.push(fn);\r\n    }\r\n    onDone(fn) {\r\n        this._onDoneFns.push(fn);\r\n    }\r\n    onDestroy(fn) {\r\n        this._onDestroyFns.push(fn);\r\n    }\r\n    hasStarted() {\r\n        return this._started;\r\n    }\r\n    init() { }\r\n    play() {\r\n        if (!this.hasStarted()) {\r\n            this._onStart();\r\n            this.triggerMicrotask();\r\n        }\r\n        this._started = true;\r\n    }\r\n    /** @internal */\r\n    triggerMicrotask() {\r\n        scheduleMicroTask(() => this._onFinish());\r\n    }\r\n    _onStart() {\r\n        this._onStartFns.forEach(fn => fn());\r\n        this._onStartFns = [];\r\n    }\r\n    pause() { }\r\n    restart() { }\r\n    finish() {\r\n        this._onFinish();\r\n    }\r\n    destroy() {\r\n        if (!this._destroyed) {\r\n            this._destroyed = true;\r\n            if (!this.hasStarted()) {\r\n                this._onStart();\r\n            }\r\n            this.finish();\r\n            this._onDestroyFns.forEach(fn => fn());\r\n            this._onDestroyFns = [];\r\n        }\r\n    }\r\n    reset() {\r\n        this._started = false;\r\n    }\r\n    setPosition(position) {\r\n        this._position = this.totalTime ? position * this.totalTime : 1;\r\n    }\r\n    getPosition() {\r\n        return this.totalTime ? this._position / this.totalTime : 1;\r\n    }\r\n    /** @internal */\r\n    triggerCallback(phaseName) {\r\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\r\n        methods.forEach(fn => fn());\r\n        methods.length = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A programmatic controller for a group of reusable animations.\r\n * Used internally to control animations.\r\n *\r\n * @see `AnimationPlayer`\r\n * @see `{@link animations/group group()}`\r\n *\r\n */\r\nclass AnimationGroupPlayer {\r\n    constructor(_players) {\r\n        this._onDoneFns = [];\r\n        this._onStartFns = [];\r\n        this._finished = false;\r\n        this._started = false;\r\n        this._destroyed = false;\r\n        this._onDestroyFns = [];\r\n        this.parentPlayer = null;\r\n        this.totalTime = 0;\r\n        this.players = _players;\r\n        let doneCount = 0;\r\n        let destroyCount = 0;\r\n        let startCount = 0;\r\n        const total = this.players.length;\r\n        if (total == 0) {\r\n            scheduleMicroTask(() => this._onFinish());\r\n        }\r\n        else {\r\n            this.players.forEach(player => {\r\n                player.onDone(() => {\r\n                    if (++doneCount == total) {\r\n                        this._onFinish();\r\n                    }\r\n                });\r\n                player.onDestroy(() => {\r\n                    if (++destroyCount == total) {\r\n                        this._onDestroy();\r\n                    }\r\n                });\r\n                player.onStart(() => {\r\n                    if (++startCount == total) {\r\n                        this._onStart();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        this.totalTime = this.players.reduce((time, player) => Math.max(time, player.totalTime), 0);\r\n    }\r\n    _onFinish() {\r\n        if (!this._finished) {\r\n            this._finished = true;\r\n            this._onDoneFns.forEach(fn => fn());\r\n            this._onDoneFns = [];\r\n        }\r\n    }\r\n    init() {\r\n        this.players.forEach(player => player.init());\r\n    }\r\n    onStart(fn) {\r\n        this._onStartFns.push(fn);\r\n    }\r\n    _onStart() {\r\n        if (!this.hasStarted()) {\r\n            this._started = true;\r\n            this._onStartFns.forEach(fn => fn());\r\n            this._onStartFns = [];\r\n        }\r\n    }\r\n    onDone(fn) {\r\n        this._onDoneFns.push(fn);\r\n    }\r\n    onDestroy(fn) {\r\n        this._onDestroyFns.push(fn);\r\n    }\r\n    hasStarted() {\r\n        return this._started;\r\n    }\r\n    play() {\r\n        if (!this.parentPlayer) {\r\n            this.init();\r\n        }\r\n        this._onStart();\r\n        this.players.forEach(player => player.play());\r\n    }\r\n    pause() {\r\n        this.players.forEach(player => player.pause());\r\n    }\r\n    restart() {\r\n        this.players.forEach(player => player.restart());\r\n    }\r\n    finish() {\r\n        this._onFinish();\r\n        this.players.forEach(player => player.finish());\r\n    }\r\n    destroy() {\r\n        this._onDestroy();\r\n    }\r\n    _onDestroy() {\r\n        if (!this._destroyed) {\r\n            this._destroyed = true;\r\n            this._onFinish();\r\n            this.players.forEach(player => player.destroy());\r\n            this._onDestroyFns.forEach(fn => fn());\r\n            this._onDestroyFns = [];\r\n        }\r\n    }\r\n    reset() {\r\n        this.players.forEach(player => player.reset());\r\n        this._destroyed = false;\r\n        this._finished = false;\r\n        this._started = false;\r\n    }\r\n    setPosition(p) {\r\n        const timeAtPosition = p * this.totalTime;\r\n        this.players.forEach(player => {\r\n            const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\r\n            player.setPosition(position);\r\n        });\r\n    }\r\n    getPosition() {\r\n        const longestPlayer = this.players.reduce((longestSoFar, player) => {\r\n            const newPlayerIsLongest = longestSoFar === null || player.totalTime > longestSoFar.totalTime;\r\n            return newPlayerIsLongest ? player : longestSoFar;\r\n        }, null);\r\n        return longestPlayer != null ? longestPlayer.getPosition() : 0;\r\n    }\r\n    beforeDestroy() {\r\n        this.players.forEach(player => {\r\n            if (player.beforeDestroy) {\r\n                player.beforeDestroy();\r\n            }\r\n        });\r\n    }\r\n    /** @internal */\r\n    triggerCallback(phaseName) {\r\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\r\n        methods.forEach(fn => fn());\r\n        methods.length = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst ɵPRE_STYLE = '!';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { AUTO_STYLE, AnimationBuilder, AnimationFactory, NoopAnimationPlayer, animate, animateChild, animation, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, AnimationGroupPlayer as ɵAnimationGroupPlayer, ɵPRE_STYLE };\r\n\r\n//# sourceMappingURL=animations.js.map"]},"metadata":{},"sourceType":"module"}