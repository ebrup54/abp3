{"ast":null,"code":"import _classCallCheck from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nexport var Observable = /*#__PURE__*/function () {\n  function Observable(subscribe) {\n    _classCallCheck(this, Observable);\n\n    this._isScalar = false;\n\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  _createClass(Observable, [{\n    key: \"lift\",\n    value: function lift(operator) {\n      var observable = new Observable();\n      observable.source = this;\n      observable.operator = operator;\n      return observable;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(observerOrNext, error, complete) {\n      var operator = this.operator;\n      var sink = toSubscriber(observerOrNext, error, complete);\n\n      if (operator) {\n        sink.add(operator.call(sink, this.source));\n      } else {\n        sink.add(this.source || config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n      }\n\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        if (sink.syncErrorThrowable) {\n          sink.syncErrorThrowable = false;\n\n          if (sink.syncErrorThrown) {\n            throw sink.syncErrorValue;\n          }\n        }\n      }\n\n      return sink;\n    }\n  }, {\n    key: \"_trySubscribe\",\n    value: function _trySubscribe(sink) {\n      try {\n        return this._subscribe(sink);\n      } catch (err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n          sink.syncErrorThrown = true;\n          sink.syncErrorValue = err;\n        }\n\n        if (canReportError(sink)) {\n          sink.error(err);\n        } else {\n          console.warn(err);\n        }\n      }\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(next, promiseCtor) {\n      var _this = this;\n\n      promiseCtor = getPromiseCtor(promiseCtor);\n      return new promiseCtor(function (resolve, reject) {\n        var subscription;\n        subscription = _this.subscribe(function (value) {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n\n            if (subscription) {\n              subscription.unsubscribe();\n            }\n          }\n        }, reject, resolve);\n      });\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      var source = this.source;\n      return source && source.subscribe(subscriber);\n    }\n  }, {\n    key: Symbol_observable,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"pipe\",\n    value: function pipe() {\n      for (var _len = arguments.length, operations = new Array(_len), _key = 0; _key < _len; _key++) {\n        operations[_key] = arguments[_key];\n      }\n\n      if (operations.length === 0) {\n        return this;\n      }\n\n      return pipeFromArray(operations)(this);\n    }\n  }, {\n    key: \"toPromise\",\n    value: function toPromise(promiseCtor) {\n      var _this2 = this;\n\n      promiseCtor = getPromiseCtor(promiseCtor);\n      return new promiseCtor(function (resolve, reject) {\n        var value;\n\n        _this2.subscribe(function (x) {\n          return value = x;\n        }, function (err) {\n          return reject(err);\n        }, function () {\n          return resolve(value);\n        });\n      });\n    }\n  }]);\n\n  return Observable;\n}();\n\nObservable.create = function (subscribe) {\n  return new Observable(subscribe);\n};\n\nfunction getPromiseCtor(promiseCtor) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n} //# sourceMappingURL=Observable.js.map","map":{"version":3,"sources":["C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/rxjs/_esm2015/internal/Observable.js"],"names":["canReportError","toSubscriber","observable","Symbol_observable","pipeFromArray","config","Observable","subscribe","_isScalar","_subscribe","operator","source","observerOrNext","error","complete","sink","add","call","useDeprecatedSynchronousErrorHandling","syncErrorThrowable","_trySubscribe","syncErrorThrown","syncErrorValue","err","console","warn","next","promiseCtor","getPromiseCtor","resolve","reject","subscription","value","unsubscribe","subscriber","operations","length","x","create","Promise","Error"],"mappings":"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","sourcesContent":["import { canReportError } from './util/canReportError';\r\nimport { toSubscriber } from './util/toSubscriber';\r\nimport { observable as Symbol_observable } from './symbol/observable';\r\nimport { pipeFromArray } from './util/pipe';\r\nimport { config } from './config';\r\nexport class Observable {\r\n    constructor(subscribe) {\r\n        this._isScalar = false;\r\n        if (subscribe) {\r\n            this._subscribe = subscribe;\r\n        }\r\n    }\r\n    lift(operator) {\r\n        const observable = new Observable();\r\n        observable.source = this;\r\n        observable.operator = operator;\r\n        return observable;\r\n    }\r\n    subscribe(observerOrNext, error, complete) {\r\n        const { operator } = this;\r\n        const sink = toSubscriber(observerOrNext, error, complete);\r\n        if (operator) {\r\n            sink.add(operator.call(sink, this.source));\r\n        }\r\n        else {\r\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\r\n                this._subscribe(sink) :\r\n                this._trySubscribe(sink));\r\n        }\r\n        if (config.useDeprecatedSynchronousErrorHandling) {\r\n            if (sink.syncErrorThrowable) {\r\n                sink.syncErrorThrowable = false;\r\n                if (sink.syncErrorThrown) {\r\n                    throw sink.syncErrorValue;\r\n                }\r\n            }\r\n        }\r\n        return sink;\r\n    }\r\n    _trySubscribe(sink) {\r\n        try {\r\n            return this._subscribe(sink);\r\n        }\r\n        catch (err) {\r\n            if (config.useDeprecatedSynchronousErrorHandling) {\r\n                sink.syncErrorThrown = true;\r\n                sink.syncErrorValue = err;\r\n            }\r\n            if (canReportError(sink)) {\r\n                sink.error(err);\r\n            }\r\n            else {\r\n                console.warn(err);\r\n            }\r\n        }\r\n    }\r\n    forEach(next, promiseCtor) {\r\n        promiseCtor = getPromiseCtor(promiseCtor);\r\n        return new promiseCtor((resolve, reject) => {\r\n            let subscription;\r\n            subscription = this.subscribe((value) => {\r\n                try {\r\n                    next(value);\r\n                }\r\n                catch (err) {\r\n                    reject(err);\r\n                    if (subscription) {\r\n                        subscription.unsubscribe();\r\n                    }\r\n                }\r\n            }, reject, resolve);\r\n        });\r\n    }\r\n    _subscribe(subscriber) {\r\n        const { source } = this;\r\n        return source && source.subscribe(subscriber);\r\n    }\r\n    [Symbol_observable]() {\r\n        return this;\r\n    }\r\n    pipe(...operations) {\r\n        if (operations.length === 0) {\r\n            return this;\r\n        }\r\n        return pipeFromArray(operations)(this);\r\n    }\r\n    toPromise(promiseCtor) {\r\n        promiseCtor = getPromiseCtor(promiseCtor);\r\n        return new promiseCtor((resolve, reject) => {\r\n            let value;\r\n            this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));\r\n        });\r\n    }\r\n}\r\nObservable.create = (subscribe) => {\r\n    return new Observable(subscribe);\r\n};\r\nfunction getPromiseCtor(promiseCtor) {\r\n    if (!promiseCtor) {\r\n        promiseCtor = config.Promise || Promise;\r\n    }\r\n    if (!promiseCtor) {\r\n        throw new Error('no Promise impl found');\r\n    }\r\n    return promiseCtor;\r\n}\r\n//# sourceMappingURL=Observable.js.map"]},"metadata":{},"sourceType":"module"}