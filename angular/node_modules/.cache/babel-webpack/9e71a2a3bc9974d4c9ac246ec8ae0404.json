{"ast":null,"code":"import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var config;\n\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime: windowTime,\n      refCount: false,\n      scheduler: scheduler\n    };\n  }\n\n  return function (source) {\n    return source.lift(shareReplayOperator(config));\n  };\n}\n\nfunction shareReplayOperator(_ref) {\n  var _ref$bufferSize = _ref.bufferSize,\n      bufferSize = _ref$bufferSize === void 0 ? Number.POSITIVE_INFINITY : _ref$bufferSize,\n      _ref$windowTime = _ref.windowTime,\n      windowTime = _ref$windowTime === void 0 ? Number.POSITIVE_INFINITY : _ref$windowTime,\n      useRefCount = _ref.refCount,\n      scheduler = _ref.scheduler;\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    var innerSub;\n\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next: function next(value) {\n          subject.next(value);\n        },\n        error: function error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function complete() {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n\n      if (isComplete) {\n        subscription = undefined;\n      }\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n\n    this.add(function () {\n      refCount--;\n      innerSub.unsubscribe();\n      innerSub = undefined;\n\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n} //# sourceMappingURL=shareReplay.js.map","map":{"version":3,"sources":["C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/rxjs/_esm2015/internal/operators/shareReplay.js"],"names":["ReplaySubject","shareReplay","configOrBufferSize","windowTime","scheduler","config","bufferSize","refCount","source","lift","shareReplayOperator","Number","POSITIVE_INFINITY","useRefCount","subject","subscription","hasError","isComplete","shareReplayOperation","innerSub","subscribe","next","value","error","err","complete","undefined","add","unsubscribe"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,OAAO,SAASC,WAAT,CAAqBC,kBAArB,EAAyCC,UAAzC,EAAqDC,SAArD,EAAgE;AACnE,MAAIC,MAAJ;;AACA,MAAIH,kBAAkB,IAAI,OAAOA,kBAAP,KAA8B,QAAxD,EAAkE;AAC9DG,IAAAA,MAAM,GAAGH,kBAAT;AACH,GAFD,MAGK;AACDG,IAAAA,MAAM,GAAG;AACLC,MAAAA,UAAU,EAAEJ,kBADP;AAELC,MAAAA,UAAU,EAAVA,UAFK;AAGLI,MAAAA,QAAQ,EAAE,KAHL;AAILH,MAAAA,SAAS,EAATA;AAJK,KAAT;AAMH;;AACD,SAAO,UAACI,MAAD;AAAA,WAAYA,MAAM,CAACC,IAAP,CAAYC,mBAAmB,CAACL,MAAD,CAA/B,CAAZ;AAAA,GAAP;AACH;;AACD,SAASK,mBAAT,OAAkJ;AAAA,6BAAnHJ,UAAmH;AAAA,MAAnHA,UAAmH,gCAAtGK,MAAM,CAACC,iBAA+F;AAAA,6BAA5ET,UAA4E;AAAA,MAA5EA,UAA4E,gCAA/DQ,MAAM,CAACC,iBAAwD;AAAA,MAA3BC,WAA2B,QAArCN,QAAqC;AAAA,MAAdH,SAAc,QAAdA,SAAc;AAC9I,MAAIU,OAAJ;AACA,MAAIP,QAAQ,GAAG,CAAf;AACA,MAAIQ,YAAJ;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,UAAU,GAAG,KAAjB;AACA,SAAO,SAASC,oBAAT,CAA8BV,MAA9B,EAAsC;AACzCD,IAAAA,QAAQ;AACR,QAAIY,QAAJ;;AACA,QAAI,CAACL,OAAD,IAAYE,QAAhB,EAA0B;AACtBA,MAAAA,QAAQ,GAAG,KAAX;AACAF,MAAAA,OAAO,GAAG,IAAId,aAAJ,CAAkBM,UAAlB,EAA8BH,UAA9B,EAA0CC,SAA1C,CAAV;AACAe,MAAAA,QAAQ,GAAGL,OAAO,CAACM,SAAR,CAAkB,IAAlB,CAAX;AACAL,MAAAA,YAAY,GAAGP,MAAM,CAACY,SAAP,CAAiB;AAC5BC,QAAAA,IAD4B,gBACvBC,KADuB,EAChB;AACRR,UAAAA,OAAO,CAACO,IAAR,CAAaC,KAAb;AACH,SAH2B;AAI5BC,QAAAA,KAJ4B,iBAItBC,GAJsB,EAIjB;AACPR,UAAAA,QAAQ,GAAG,IAAX;AACAF,UAAAA,OAAO,CAACS,KAAR,CAAcC,GAAd;AACH,SAP2B;AAQ5BC,QAAAA,QAR4B,sBAQjB;AACPR,UAAAA,UAAU,GAAG,IAAb;AACAF,UAAAA,YAAY,GAAGW,SAAf;AACAZ,UAAAA,OAAO,CAACW,QAAR;AACH;AAZ2B,OAAjB,CAAf;;AAcA,UAAIR,UAAJ,EAAgB;AACZF,QAAAA,YAAY,GAAGW,SAAf;AACH;AACJ,KArBD,MAsBK;AACDP,MAAAA,QAAQ,GAAGL,OAAO,CAACM,SAAR,CAAkB,IAAlB,CAAX;AACH;;AACD,SAAKO,GAAL,CAAS,YAAM;AACXpB,MAAAA,QAAQ;AACRY,MAAAA,QAAQ,CAACS,WAAT;AACAT,MAAAA,QAAQ,GAAGO,SAAX;;AACA,UAAIX,YAAY,IAAI,CAACE,UAAjB,IAA+BJ,WAA/B,IAA8CN,QAAQ,KAAK,CAA/D,EAAkE;AAC9DQ,QAAAA,YAAY,CAACa,WAAb;AACAb,QAAAA,YAAY,GAAGW,SAAf;AACAZ,QAAAA,OAAO,GAAGY,SAAV;AACH;AACJ,KATD;AAUH,GAtCD;AAuCH,C,CACD","sourcesContent":["import { ReplaySubject } from '../ReplaySubject';\r\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\r\n    let config;\r\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\r\n        config = configOrBufferSize;\r\n    }\r\n    else {\r\n        config = {\r\n            bufferSize: configOrBufferSize,\r\n            windowTime,\r\n            refCount: false,\r\n            scheduler,\r\n        };\r\n    }\r\n    return (source) => source.lift(shareReplayOperator(config));\r\n}\r\nfunction shareReplayOperator({ bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, refCount: useRefCount, scheduler, }) {\r\n    let subject;\r\n    let refCount = 0;\r\n    let subscription;\r\n    let hasError = false;\r\n    let isComplete = false;\r\n    return function shareReplayOperation(source) {\r\n        refCount++;\r\n        let innerSub;\r\n        if (!subject || hasError) {\r\n            hasError = false;\r\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\r\n            innerSub = subject.subscribe(this);\r\n            subscription = source.subscribe({\r\n                next(value) {\r\n                    subject.next(value);\r\n                },\r\n                error(err) {\r\n                    hasError = true;\r\n                    subject.error(err);\r\n                },\r\n                complete() {\r\n                    isComplete = true;\r\n                    subscription = undefined;\r\n                    subject.complete();\r\n                },\r\n            });\r\n            if (isComplete) {\r\n                subscription = undefined;\r\n            }\r\n        }\r\n        else {\r\n            innerSub = subject.subscribe(this);\r\n        }\r\n        this.add(() => {\r\n            refCount--;\r\n            innerSub.unsubscribe();\r\n            innerSub = undefined;\r\n            if (subscription && !isComplete && useRefCount && refCount === 0) {\r\n                subscription.unsubscribe();\r\n                subscription = undefined;\r\n                subject = undefined;\r\n            }\r\n        });\r\n    };\r\n}\r\n//# sourceMappingURL=shareReplay.js.map"]},"metadata":{},"sourceType":"module"}