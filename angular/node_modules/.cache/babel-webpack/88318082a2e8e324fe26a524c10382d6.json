{"ast":null,"code":"import _inherits from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowWhen(closingSelector) {\n  return function windowWhenOperatorFunction(source) {\n    return source.lift(new WindowOperator(closingSelector));\n  };\n}\n\nvar WindowOperator = /*#__PURE__*/function () {\n  function WindowOperator(closingSelector) {\n    _classCallCheck(this, WindowOperator);\n\n    this.closingSelector = closingSelector;\n  }\n\n  _createClass(WindowOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    }\n  }]);\n\n  return WindowOperator;\n}();\n\nvar WindowSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(WindowSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(WindowSubscriber);\n\n  function WindowSubscriber(destination, closingSelector) {\n    var _this;\n\n    _classCallCheck(this, WindowSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.destination = destination;\n    _this.closingSelector = closingSelector;\n\n    _this.openWindow();\n\n    return _this;\n  }\n\n  _createClass(WindowSubscriber, [{\n    key: \"notifyNext\",\n    value: function notifyNext(_outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n      this.openWindow(innerSub);\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(error) {\n      this._error(error);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(innerSub) {\n      this.openWindow(innerSub);\n    }\n  }, {\n    key: \"_next\",\n    value: function _next(value) {\n      this.window.next(value);\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.window.error(err);\n      this.destination.error(err);\n      this.unsubscribeClosingNotification();\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.window.complete();\n      this.destination.complete();\n      this.unsubscribeClosingNotification();\n    }\n  }, {\n    key: \"unsubscribeClosingNotification\",\n    value: function unsubscribeClosingNotification() {\n      if (this.closingNotification) {\n        this.closingNotification.unsubscribe();\n      }\n    }\n  }, {\n    key: \"openWindow\",\n    value: function openWindow() {\n      var innerSub = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (innerSub) {\n        this.remove(innerSub);\n        innerSub.unsubscribe();\n      }\n\n      var prevWindow = this.window;\n\n      if (prevWindow) {\n        prevWindow.complete();\n      }\n\n      var window = this.window = new Subject();\n      this.destination.next(window);\n      var closingNotifier;\n\n      try {\n        var closingSelector = this.closingSelector;\n        closingNotifier = closingSelector();\n      } catch (e) {\n        this.destination.error(e);\n        this.window.error(e);\n        return;\n      }\n\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }]);\n\n  return WindowSubscriber;\n}(OuterSubscriber); //# sourceMappingURL=windowWhen.js.map","map":{"version":3,"sources":["C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/rxjs/_esm2015/internal/operators/windowWhen.js"],"names":["Subject","OuterSubscriber","subscribeToResult","windowWhen","closingSelector","windowWhenOperatorFunction","source","lift","WindowOperator","subscriber","subscribe","WindowSubscriber","destination","openWindow","_outerValue","_innerValue","_outerIndex","_innerIndex","innerSub","error","_error","value","window","next","err","unsubscribeClosingNotification","complete","closingNotification","unsubscribe","remove","prevWindow","closingNotifier","e","add"],"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,OAAO,SAASC,UAAT,CAAoBC,eAApB,EAAqC;AACxC,SAAO,SAASC,0BAAT,CAAoCC,MAApC,EAA4C;AAC/C,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,cAAJ,CAAmBJ,eAAnB,CAAZ,CAAP;AACH,GAFD;AAGH;;IACKI,c;AACF,0BAAYJ,eAAZ,EAA6B;AAAA;;AACzB,SAAKA,eAAL,GAAuBA,eAAvB;AACH;;;;WACD,cAAKK,UAAL,EAAiBH,MAAjB,EAAyB;AACrB,aAAOA,MAAM,CAACI,SAAP,CAAiB,IAAIC,gBAAJ,CAAqBF,UAArB,EAAiC,KAAKL,eAAtC,CAAjB,CAAP;AACH;;;;;;IAECO,gB;;;;;AACF,4BAAYC,WAAZ,EAAyBR,eAAzB,EAA0C;AAAA;;AAAA;;AACtC,8BAAMQ,WAAN;AACA,UAAKA,WAAL,GAAmBA,WAAnB;AACA,UAAKR,eAAL,GAAuBA,eAAvB;;AACA,UAAKS,UAAL;;AAJsC;AAKzC;;;;WACD,oBAAWC,WAAX,EAAwBC,WAAxB,EAAqCC,WAArC,EAAkDC,WAAlD,EAA+DC,QAA/D,EAAyE;AACrE,WAAKL,UAAL,CAAgBK,QAAhB;AACH;;;WACD,qBAAYC,KAAZ,EAAmB;AACf,WAAKC,MAAL,CAAYD,KAAZ;AACH;;;WACD,wBAAeD,QAAf,EAAyB;AACrB,WAAKL,UAAL,CAAgBK,QAAhB;AACH;;;WACD,eAAMG,KAAN,EAAa;AACT,WAAKC,MAAL,CAAYC,IAAZ,CAAiBF,KAAjB;AACH;;;WACD,gBAAOG,GAAP,EAAY;AACR,WAAKF,MAAL,CAAYH,KAAZ,CAAkBK,GAAlB;AACA,WAAKZ,WAAL,CAAiBO,KAAjB,CAAuBK,GAAvB;AACA,WAAKC,8BAAL;AACH;;;WACD,qBAAY;AACR,WAAKH,MAAL,CAAYI,QAAZ;AACA,WAAKd,WAAL,CAAiBc,QAAjB;AACA,WAAKD,8BAAL;AACH;;;WACD,0CAAiC;AAC7B,UAAI,KAAKE,mBAAT,EAA8B;AAC1B,aAAKA,mBAAL,CAAyBC,WAAzB;AACH;AACJ;;;WACD,sBAA4B;AAAA,UAAjBV,QAAiB,uEAAN,IAAM;;AACxB,UAAIA,QAAJ,EAAc;AACV,aAAKW,MAAL,CAAYX,QAAZ;AACAA,QAAAA,QAAQ,CAACU,WAAT;AACH;;AACD,UAAME,UAAU,GAAG,KAAKR,MAAxB;;AACA,UAAIQ,UAAJ,EAAgB;AACZA,QAAAA,UAAU,CAACJ,QAAX;AACH;;AACD,UAAMJ,MAAM,GAAG,KAAKA,MAAL,GAAc,IAAItB,OAAJ,EAA7B;AACA,WAAKY,WAAL,CAAiBW,IAAjB,CAAsBD,MAAtB;AACA,UAAIS,eAAJ;;AACA,UAAI;AACA,YAAQ3B,eAAR,GAA4B,IAA5B,CAAQA,eAAR;AACA2B,QAAAA,eAAe,GAAG3B,eAAe,EAAjC;AACH,OAHD,CAIA,OAAO4B,CAAP,EAAU;AACN,aAAKpB,WAAL,CAAiBO,KAAjB,CAAuBa,CAAvB;AACA,aAAKV,MAAL,CAAYH,KAAZ,CAAkBa,CAAlB;AACA;AACH;;AACD,WAAKC,GAAL,CAAS,KAAKN,mBAAL,GAA2BzB,iBAAiB,CAAC,IAAD,EAAO6B,eAAP,CAArD;AACH;;;;EAxD0B9B,e,GA0D/B","sourcesContent":["import { Subject } from '../Subject';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\nexport function windowWhen(closingSelector) {\r\n    return function windowWhenOperatorFunction(source) {\r\n        return source.lift(new WindowOperator(closingSelector));\r\n    };\r\n}\r\nclass WindowOperator {\r\n    constructor(closingSelector) {\r\n        this.closingSelector = closingSelector;\r\n    }\r\n    call(subscriber, source) {\r\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\r\n    }\r\n}\r\nclass WindowSubscriber extends OuterSubscriber {\r\n    constructor(destination, closingSelector) {\r\n        super(destination);\r\n        this.destination = destination;\r\n        this.closingSelector = closingSelector;\r\n        this.openWindow();\r\n    }\r\n    notifyNext(_outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\r\n        this.openWindow(innerSub);\r\n    }\r\n    notifyError(error) {\r\n        this._error(error);\r\n    }\r\n    notifyComplete(innerSub) {\r\n        this.openWindow(innerSub);\r\n    }\r\n    _next(value) {\r\n        this.window.next(value);\r\n    }\r\n    _error(err) {\r\n        this.window.error(err);\r\n        this.destination.error(err);\r\n        this.unsubscribeClosingNotification();\r\n    }\r\n    _complete() {\r\n        this.window.complete();\r\n        this.destination.complete();\r\n        this.unsubscribeClosingNotification();\r\n    }\r\n    unsubscribeClosingNotification() {\r\n        if (this.closingNotification) {\r\n            this.closingNotification.unsubscribe();\r\n        }\r\n    }\r\n    openWindow(innerSub = null) {\r\n        if (innerSub) {\r\n            this.remove(innerSub);\r\n            innerSub.unsubscribe();\r\n        }\r\n        const prevWindow = this.window;\r\n        if (prevWindow) {\r\n            prevWindow.complete();\r\n        }\r\n        const window = this.window = new Subject();\r\n        this.destination.next(window);\r\n        let closingNotifier;\r\n        try {\r\n            const { closingSelector } = this;\r\n            closingNotifier = closingSelector();\r\n        }\r\n        catch (e) {\r\n            this.destination.error(e);\r\n            this.window.error(e);\r\n            return;\r\n        }\r\n        this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\r\n    }\r\n}\r\n//# sourceMappingURL=windowWhen.js.map"]},"metadata":{},"sourceType":"module"}