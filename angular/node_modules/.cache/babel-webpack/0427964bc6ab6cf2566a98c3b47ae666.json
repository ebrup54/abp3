{"ast":null,"code":"import _inherits from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _slicedToArray from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\r\n * @license Angular v12.0.5\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\nimport { DOCUMENT, XhrFactory as XhrFactory$1, ɵparseCookieValue } from '@angular/common';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\r\n * `HttpResponse`.\r\n *\r\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\r\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\r\n * `HttpBackend`.\r\n *\r\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\r\n *\r\n * @publicApi\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nvar HttpHandler = function HttpHandler() {\n  _classCallCheck(this, HttpHandler);\n};\n/**\r\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\r\n *\r\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\r\n *\r\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\r\n * through the interceptor chain.\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpBackend = function HttpBackend() {\n  _classCallCheck(this, HttpBackend);\n};\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Represents the header configuration options for an HTTP request.\r\n * Instances are immutable. Modifying methods return a cloned\r\n * instance with the change. The original object is never changed.\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpHeaders = /*#__PURE__*/function () {\n  /**  Constructs a new HTTP header object with the given values.*/\n  function HttpHeaders(headers) {\n    var _this = this;\n\n    _classCallCheck(this, HttpHeaders);\n\n    /**\r\n     * Internal map of lowercased header names to the normalized\r\n     * form of the name (the form seen first).\r\n     */\n    this.normalizedNames = new Map();\n    /**\r\n     * Queued updates to be materialized the next initialization.\r\n     */\n\n    this.lazyUpdate = null;\n\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = function () {\n        _this.headers = new Map();\n        headers.split('\\n').forEach(function (line) {\n          var index = line.indexOf(':');\n\n          if (index > 0) {\n            var name = line.slice(0, index);\n            var key = name.toLowerCase();\n            var value = line.slice(index + 1).trim();\n\n            _this.maybeSetNormalizedName(name, key);\n\n            if (_this.headers.has(key)) {\n              _this.headers.get(key).push(value);\n            } else {\n              _this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = function () {\n        _this.headers = new Map();\n        Object.keys(headers).forEach(function (name) {\n          var values = headers[name];\n          var key = name.toLowerCase();\n\n          if (typeof values === 'string') {\n            values = [values];\n          }\n\n          if (values.length > 0) {\n            _this.headers.set(key, values);\n\n            _this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n  /**\r\n   * Checks for existence of a given header.\r\n   *\r\n   * @param name The header name to check for existence.\r\n   *\r\n   * @returns True if the header exists, false otherwise.\r\n   */\n\n\n  _createClass(HttpHeaders, [{\n    key: \"has\",\n    value: function has(name) {\n      this.init();\n      return this.headers.has(name.toLowerCase());\n    }\n    /**\r\n     * Retrieves the first value of a given header.\r\n     *\r\n     * @param name The header name.\r\n     *\r\n     * @returns The value string if the header exists, null otherwise\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      this.init();\n      var values = this.headers.get(name.toLowerCase());\n      return values && values.length > 0 ? values[0] : null;\n    }\n    /**\r\n     * Retrieves the names of the headers.\r\n     *\r\n     * @returns A list of header names.\r\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      this.init();\n      return Array.from(this.normalizedNames.values());\n    }\n    /**\r\n     * Retrieves a list of values for a given header.\r\n     *\r\n     * @param name The header name from which to retrieve values.\r\n     *\r\n     * @returns A string of values if the header exists, null otherwise.\r\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      this.init();\n      return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\r\n     * Appends a new value to the existing set of values for a header\r\n     * and returns them in a clone of the original instance.\r\n     *\r\n     * @param name The header name for which to append the values.\r\n     * @param value The value to append.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\r\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 'a'\n      });\n    }\n    /**\r\n     * Sets or modifies a value for a given header in a clone of the original instance.\r\n     * If the header already exists, its value is replaced with the given value\r\n     * in the returned object.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to set or overide for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the newly set header value.\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 's'\n      });\n    }\n    /**\r\n     * Deletes values for a given header in a clone of the original instance.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to delete for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the given value deleted.\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 'd'\n      });\n    }\n  }, {\n    key: \"maybeSetNormalizedName\",\n    value: function maybeSetNormalizedName(name, lcName) {\n      if (!this.normalizedNames.has(lcName)) {\n        this.normalizedNames.set(lcName, name);\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      if (!!this.lazyInit) {\n        if (this.lazyInit instanceof HttpHeaders) {\n          this.copyFrom(this.lazyInit);\n        } else {\n          this.lazyInit();\n        }\n\n        this.lazyInit = null;\n\n        if (!!this.lazyUpdate) {\n          this.lazyUpdate.forEach(function (update) {\n            return _this2.applyUpdate(update);\n          });\n          this.lazyUpdate = null;\n        }\n      }\n    }\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(other) {\n      var _this3 = this;\n\n      other.init();\n      Array.from(other.headers.keys()).forEach(function (key) {\n        _this3.headers.set(key, other.headers.get(key));\n\n        _this3.normalizedNames.set(key, other.normalizedNames.get(key));\n      });\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(update) {\n      var clone = new HttpHeaders();\n      clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n      clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n      return clone;\n    }\n  }, {\n    key: \"applyUpdate\",\n    value: function applyUpdate(update) {\n      var key = update.name.toLowerCase();\n\n      switch (update.op) {\n        case 'a':\n        case 's':\n          var value = update.value;\n\n          if (typeof value === 'string') {\n            value = [value];\n          }\n\n          if (value.length === 0) {\n            return;\n          }\n\n          this.maybeSetNormalizedName(update.name, key);\n          var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n          base.push.apply(base, _toConsumableArray(value));\n          this.headers.set(key, base);\n          break;\n\n        case 'd':\n          var toDelete = update.value;\n\n          if (!toDelete) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            var existing = this.headers.get(key);\n\n            if (!existing) {\n              return;\n            }\n\n            existing = existing.filter(function (value) {\n              return toDelete.indexOf(value) === -1;\n            });\n\n            if (existing.length === 0) {\n              this.headers.delete(key);\n              this.normalizedNames.delete(key);\n            } else {\n              this.headers.set(key, existing);\n            }\n          }\n\n          break;\n      }\n    }\n    /**\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var _this4 = this;\n\n      this.init();\n      Array.from(this.normalizedNames.keys()).forEach(function (key) {\n        return fn(_this4.normalizedNames.get(key), _this4.headers.get(key));\n      });\n    }\n  }]);\n\n  return HttpHeaders;\n}();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Provides encoding and decoding of URL parameter and query-string values.\r\n *\r\n * Serializes and parses URL parameter keys and values to encode and decode them.\r\n * If you pass URL query parameters without encoding,\r\n * the query parameters can be misinterpreted at the receiving end.\r\n *\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpUrlEncodingCodec = /*#__PURE__*/function () {\n  function HttpUrlEncodingCodec() {\n    _classCallCheck(this, HttpUrlEncodingCodec);\n  }\n\n  _createClass(HttpUrlEncodingCodec, [{\n    key: \"encodeKey\",\n    value:\n    /**\r\n     * Encodes a key name for a URL parameter or query-string.\r\n     * @param key The key name.\r\n     * @returns The encoded key name.\r\n     */\n    function encodeKey(key) {\n      return standardEncoding(key);\n    }\n    /**\r\n     * Encodes the value of a URL parameter or query-string.\r\n     * @param value The value.\r\n     * @returns The encoded value.\r\n     */\n\n  }, {\n    key: \"encodeValue\",\n    value: function encodeValue(value) {\n      return standardEncoding(value);\n    }\n    /**\r\n     * Decodes an encoded URL parameter or query-string key.\r\n     * @param key The encoded key name.\r\n     * @returns The decoded key name.\r\n     */\n\n  }, {\n    key: \"decodeKey\",\n    value: function decodeKey(key) {\n      return decodeURIComponent(key);\n    }\n    /**\r\n     * Decodes an encoded URL parameter or query-string value.\r\n     * @param value The encoded value.\r\n     * @returns The decoded value.\r\n     */\n\n  }, {\n    key: \"decodeValue\",\n    value: function decodeValue(value) {\n      return decodeURIComponent(value);\n    }\n  }]);\n\n  return HttpUrlEncodingCodec;\n}();\n\nfunction paramParser(rawParams, codec) {\n  var map = new Map();\n\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    var params = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach(function (param) {\n      var eqIdx = param.indexOf('=');\n\n      var _ref = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))],\n          _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          val = _ref2[1];\n\n      var list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n\n  return map;\n}\n\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');\n}\n\nfunction valueToString(value) {\n  return \"\".concat(value);\n}\n/**\r\n * An HTTP request/response body that represents serialized parameters,\r\n * per the MIME type `application/x-www-form-urlencoded`.\r\n *\r\n * This class is immutable; all mutation operations return a new instance.\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpParams = /*#__PURE__*/function () {\n  function HttpParams() {\n    var _this5 = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HttpParams);\n\n    this.updates = null;\n    this.cloneFrom = null;\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(\"Cannot specify both fromString and fromObject.\");\n      }\n\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(function (key) {\n        var value = options.fromObject[key];\n\n        _this5.map.set(key, Array.isArray(value) ? value : [value]);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\r\n   * Reports whether the body includes one or more values for a given parameter.\r\n   * @param param The parameter name.\r\n   * @returns True if the parameter has one or more values,\r\n   * false if it has no value or is not present.\r\n   */\n\n\n  _createClass(HttpParams, [{\n    key: \"has\",\n    value: function has(param) {\n      this.init();\n      return this.map.has(param);\n    }\n    /**\r\n     * Retrieves the first value for a parameter.\r\n     * @param param The parameter name.\r\n     * @returns The first value of the given parameter,\r\n     * or `null` if the parameter is not present.\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(param) {\n      this.init();\n      var res = this.map.get(param);\n      return !!res ? res[0] : null;\n    }\n    /**\r\n     * Retrieves all values for a  parameter.\r\n     * @param param The parameter name.\r\n     * @returns All values in a string array,\r\n     * or `null` if the parameter not present.\r\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(param) {\n      this.init();\n      return this.map.get(param) || null;\n    }\n    /**\r\n     * Retrieves all the parameters for this body.\r\n     * @returns The parameter names in a string array.\r\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      this.init();\n      return Array.from(this.map.keys());\n    }\n    /**\r\n     * Appends a new value to existing values for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value to add.\r\n     * @return A new body with the appended value.\r\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 'a'\n      });\n    }\n    /**\r\n     * Constructs a new body with appended values for the given parameter name.\r\n     * @param params parameters and values\r\n     * @return A new body with the new value.\r\n     */\n\n  }, {\n    key: \"appendAll\",\n    value: function appendAll(params) {\n      var updates = [];\n      Object.keys(params).forEach(function (param) {\n        var value = params[param];\n\n        if (Array.isArray(value)) {\n          value.forEach(function (_value) {\n            updates.push({\n              param: param,\n              value: _value,\n              op: 'a'\n            });\n          });\n        } else {\n          updates.push({\n            param: param,\n            value: value,\n            op: 'a'\n          });\n        }\n      });\n      return this.clone(updates);\n    }\n    /**\r\n     * Replaces the value for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value.\r\n     * @return A new body with the new value.\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 's'\n      });\n    }\n    /**\r\n     * Removes a given value or all values from a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The value to remove, if provided.\r\n     * @return A new body with the given value removed, or with all values\r\n     * removed if no value is specified.\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 'd'\n      });\n    }\n    /**\r\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\r\n     * separated by `&`s.\r\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var _this6 = this;\n\n      this.init();\n      return this.keys().map(function (key) {\n        var eKey = _this6.encoder.encodeKey(key); // `a: ['1']` produces `'a=1'`\n        // `b: []` produces `''`\n        // `c: ['1', '2']` produces `'c=1&c=2'`\n\n\n        return _this6.map.get(key).map(function (value) {\n          return eKey + '=' + _this6.encoder.encodeValue(value);\n        }).join('&');\n      }) // filter out empty values because `b: []` produces `''`\n      // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n      .filter(function (param) {\n        return param !== '';\n      }).join('&');\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(update) {\n      var clone = new HttpParams({\n        encoder: this.encoder\n      });\n      clone.cloneFrom = this.cloneFrom || this;\n      clone.updates = (this.updates || []).concat(update);\n      return clone;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this7 = this;\n\n      if (this.map === null) {\n        this.map = new Map();\n      }\n\n      if (this.cloneFrom !== null) {\n        this.cloneFrom.init();\n        this.cloneFrom.keys().forEach(function (key) {\n          return _this7.map.set(key, _this7.cloneFrom.map.get(key));\n        });\n        this.updates.forEach(function (update) {\n          switch (update.op) {\n            case 'a':\n            case 's':\n              var base = (update.op === 'a' ? _this7.map.get(update.param) : undefined) || [];\n              base.push(valueToString(update.value));\n\n              _this7.map.set(update.param, base);\n\n              break;\n\n            case 'd':\n              if (update.value !== undefined) {\n                var _base = _this7.map.get(update.param) || [];\n\n                var idx = _base.indexOf(valueToString(update.value));\n\n                if (idx !== -1) {\n                  _base.splice(idx, 1);\n                }\n\n                if (_base.length > 0) {\n                  _this7.map.set(update.param, _base);\n                } else {\n                  _this7.map.delete(update.param);\n                }\n              } else {\n                _this7.map.delete(update.param);\n\n                break;\n              }\n\n          }\n        });\n        this.cloneFrom = this.updates = null;\n      }\n    }\n  }]);\n\n  return HttpParams;\n}();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * A token used to manipulate and access values stored in `HttpContext`.\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpContextToken = function HttpContextToken(defaultValue) {\n  _classCallCheck(this, HttpContextToken);\n\n  this.defaultValue = defaultValue;\n};\n/**\r\n * Http context stores arbitrary user defined values and ensures type safety without\r\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\r\n *\r\n * This context is mutable and is shared between cloned requests unless explicitly specified.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Usage Example\r\n *\r\n * ```typescript\r\n * // inside cache.interceptors.ts\r\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\r\n *\r\n * export class CacheInterceptor implements HttpInterceptor {\r\n *\r\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\r\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\r\n *       return ...;\r\n *     }\r\n *     return delegate.handle(req);\r\n *   }\r\n * }\r\n *\r\n * // inside a service\r\n *\r\n * this.httpClient.get('/api/weather', {\r\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\r\n * }).subscribe(...);\r\n * ```\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpContext = /*#__PURE__*/function () {\n  function HttpContext() {\n    _classCallCheck(this, HttpContext);\n\n    this.map = new Map();\n  }\n  /**\r\n   * Store a value in the context. If a value is already present it will be overwritten.\r\n   *\r\n   * @param token The reference to an instance of `HttpContextToken`.\r\n   * @param value The value to store.\r\n   *\r\n   * @returns A reference to itself for easy chaining.\r\n   */\n\n\n  _createClass(HttpContext, [{\n    key: \"set\",\n    value: function set(token, value) {\n      this.map.set(token, value);\n      return this;\n    }\n    /**\r\n     * Retrieve the value associated with the given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns The stored value or default if one is defined.\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(token) {\n      if (!this.map.has(token)) {\n        this.map.set(token, token.defaultValue());\n      }\n\n      return this.map.get(token);\n    }\n    /**\r\n     * Delete the value associated with the given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns A reference to itself for easy chaining.\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(token) {\n      this.map.delete(token);\n      return this;\n    }\n    /**\r\n     * @returns a list of tokens currently stored in the context.\r\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this.map.keys();\n    }\n  }]);\n\n  return HttpContext;\n}();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Determine whether the given HTTP method may include a body.\r\n */\n\n\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n\n    default:\n      return true;\n  }\n}\n/**\r\n * Safely assert whether the given value is an ArrayBuffer.\r\n *\r\n * In some execution environments ArrayBuffer is not defined.\r\n */\n\n\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\r\n * Safely assert whether the given value is a Blob.\r\n *\r\n * In some execution environments Blob is not defined.\r\n */\n\n\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\r\n * Safely assert whether the given value is a FormData instance.\r\n *\r\n * In some execution environments FormData is not defined.\r\n */\n\n\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\r\n * An outgoing HTTP request with an optional typed body.\r\n *\r\n * `HttpRequest` represents an outgoing request, including URL, method,\r\n * headers, body, and other request configuration options. Instances should be\r\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\r\n * method should be used.\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpRequest = /*#__PURE__*/function () {\n  function HttpRequest(method, url, third, fourth) {\n    _classCallCheck(this, HttpRequest);\n\n    this.url = url;\n    /**\r\n     * The request body, or `null` if one isn't set.\r\n     *\r\n     * Bodies are not enforced to be immutable, as they can include a reference to any\r\n     * user-defined data type. However, interceptors should take care to preserve\r\n     * idempotence by treating them as such.\r\n     */\n\n    this.body = null;\n    /**\r\n     * Whether this request should be made in a way that exposes progress events.\r\n     *\r\n     * Progress events are expensive (change detection runs on each event) and so\r\n     * they should only be requested if the consumer intends to monitor them.\r\n     */\n\n    this.reportProgress = false;\n    /**\r\n     * Whether this request should be sent with outgoing credentials (cookies).\r\n     */\n\n    this.withCredentials = false;\n    /**\r\n     * The expected response type of the server.\r\n     *\r\n     * This is used to parse the response appropriately before returning it to\r\n     * the requestee.\r\n     */\n\n    this.responseType = 'json';\n    this.method = method.toUpperCase(); // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n\n    var options; // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third;\n    } // If options have been passed, interpret them.\n\n\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials; // Override default response type of 'json' if one is provided.\n\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      } // Override headers if they're provided.\n\n\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.context) {\n        this.context = options.context;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    } // If no headers have been passed in, construct a new HttpHeaders instance.\n\n\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    } // If no context have been passed in, construct a new HttpContext instance.\n\n\n    if (!this.context) {\n      this.context = new HttpContext();\n    } // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n\n\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      var params = this.params.toString();\n\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        var qIdx = url.indexOf('?'); // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n\n        var sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\r\n   * Transform the free-form body into a serialized format suitable for\r\n   * transmission to the server.\r\n   */\n\n\n  _createClass(HttpRequest, [{\n    key: \"serializeBody\",\n    value: function serializeBody() {\n      // If no body is present, no need to serialize it.\n      if (this.body === null) {\n        return null;\n      } // Check whether the body is already in a serialized form. If so,\n      // it can just be returned directly.\n\n\n      if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || typeof this.body === 'string') {\n        return this.body;\n      } // Check whether the body is an instance of HttpUrlEncodedParams.\n\n\n      if (this.body instanceof HttpParams) {\n        return this.body.toString();\n      } // Check whether the body is an object or array, and serialize with JSON if so.\n\n\n      if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n        return JSON.stringify(this.body);\n      } // Fall back on toString() for everything else.\n\n\n      return this.body.toString();\n    }\n    /**\r\n     * Examine the body and attempt to infer an appropriate MIME type\r\n     * for it.\r\n     *\r\n     * If no such type can be inferred, this method will return `null`.\r\n     */\n\n  }, {\n    key: \"detectContentTypeHeader\",\n    value: function detectContentTypeHeader() {\n      // An empty body has no content type.\n      if (this.body === null) {\n        return null;\n      } // FormData bodies rely on the browser's content type assignment.\n\n\n      if (isFormData(this.body)) {\n        return null;\n      } // Blobs usually have their own content type. If it doesn't, then\n      // no type can be inferred.\n\n\n      if (isBlob(this.body)) {\n        return this.body.type || null;\n      } // Array buffers have unknown contents and thus no type can be inferred.\n\n\n      if (isArrayBuffer(this.body)) {\n        return null;\n      } // Technically, strings could be a form of JSON data, but it's safe enough\n      // to assume they're plain strings.\n\n\n      if (typeof this.body === 'string') {\n        return 'text/plain';\n      } // `HttpUrlEncodedParams` has its own content-type.\n\n\n      if (this.body instanceof HttpParams) {\n        return 'application/x-www-form-urlencoded;charset=UTF-8';\n      } // Arrays, objects, boolean and numbers will be encoded as JSON.\n\n\n      if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {\n        return 'application/json';\n      } // No type could be inferred.\n\n\n      return null;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _a; // For method, url, and responseType, take the current value unless\n      // it is overridden in the update hash.\n\n\n      var method = update.method || this.method;\n      var url = update.url || this.url;\n      var responseType = update.responseType || this.responseType; // The body is somewhat special - a `null` value in update.body means\n      // whatever current body is present is being overridden with an empty\n      // body, whereas an `undefined` value in update.body implies no\n      // override.\n\n      var body = update.body !== undefined ? update.body : this.body; // Carefully handle the boolean options to differentiate between\n      // `false` and `undefined` in the update args.\n\n      var withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;\n      var reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress; // Headers and params may be appended to if `setHeaders` or\n      // `setParams` are used.\n\n      var headers = update.headers || this.headers;\n      var params = update.params || this.params; // Pass on context if needed\n\n      var context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context; // Check whether the caller has asked to add headers.\n\n      if (update.setHeaders !== undefined) {\n        // Set every requested header.\n        headers = Object.keys(update.setHeaders).reduce(function (headers, name) {\n          return headers.set(name, update.setHeaders[name]);\n        }, headers);\n      } // Check whether the caller has asked to set params.\n\n\n      if (update.setParams) {\n        // Set every requested param.\n        params = Object.keys(update.setParams).reduce(function (params, param) {\n          return params.set(param, update.setParams[param]);\n        }, params);\n      } // Finally, construct the new HttpRequest using the pieces from above.\n\n\n      return new HttpRequest(method, url, body, {\n        params: params,\n        headers: headers,\n        context: context,\n        reportProgress: reportProgress,\n        responseType: responseType,\n        withCredentials: withCredentials\n      });\n    }\n  }]);\n\n  return HttpRequest;\n}();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Type enumeration for the different kinds of `HttpEvent`.\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpEventType;\n\n(function (HttpEventType) {\n  /**\r\n   * The request was sent out over the wire.\r\n   */\n  HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n  /**\r\n   * An upload progress event was received.\r\n   */\n\n  HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n  /**\r\n   * The response status code and headers were received.\r\n   */\n\n  HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n  /**\r\n   * A download progress event was received.\r\n   */\n\n  HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n  /**\r\n   * The full response including the body was received.\r\n   */\n\n  HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n  /**\r\n   * A custom event from an interceptor or a backend.\r\n   */\n\n  HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\r\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpResponseBase =\n/**\r\n * Super-constructor for all responses.\r\n *\r\n * The single parameter accepted is an initialization hash. Any properties\r\n * of the response passed there will override the default values.\r\n */\nfunction HttpResponseBase(init) {\n  var defaultStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  var defaultStatusText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'OK';\n\n  _classCallCheck(this, HttpResponseBase);\n\n  // If the hash has values passed, use them to initialize the response.\n  // Otherwise use the default values.\n  this.headers = init.headers || new HttpHeaders();\n  this.status = init.status !== undefined ? init.status : defaultStatus;\n  this.statusText = init.statusText || defaultStatusText;\n  this.url = init.url || null; // Cache the ok value to avoid defining a getter.\n\n  this.ok = this.status >= 200 && this.status < 300;\n};\n/**\r\n * A partial HTTP response which only includes the status and header data,\r\n * but no response body.\r\n *\r\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\r\n * event stream, only when progress events are requested.\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpHeaderResponse = /*#__PURE__*/function (_HttpResponseBase) {\n  _inherits(HttpHeaderResponse, _HttpResponseBase);\n\n  var _super = _createSuper(HttpHeaderResponse);\n\n  /**\r\n   * Create a new `HttpHeaderResponse` with the given parameters.\r\n   */\n  function HttpHeaderResponse() {\n    var _this8;\n\n    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HttpHeaderResponse);\n\n    _this8 = _super.call(this, init);\n    _this8.type = HttpEventType.ResponseHeader;\n    return _this8;\n  }\n  /**\r\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n   * given parameter hash.\r\n   */\n\n\n  _createClass(HttpHeaderResponse, [{\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // Perform a straightforward initialization of the new HttpHeaderResponse,\n      // overriding the current parameters with new ones if given.\n      return new HttpHeaderResponse({\n        headers: update.headers || this.headers,\n        status: update.status !== undefined ? update.status : this.status,\n        statusText: update.statusText || this.statusText,\n        url: update.url || this.url || undefined\n      });\n    }\n  }]);\n\n  return HttpHeaderResponse;\n}(HttpResponseBase);\n/**\r\n * A full HTTP response, including a typed response body (which may be `null`\r\n * if one was not returned).\r\n *\r\n * `HttpResponse` is a `HttpEvent` available on the response event\r\n * stream.\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpResponse = /*#__PURE__*/function (_HttpResponseBase2) {\n  _inherits(HttpResponse, _HttpResponseBase2);\n\n  var _super2 = _createSuper(HttpResponse);\n\n  /**\r\n   * Construct a new `HttpResponse`.\r\n   */\n  function HttpResponse() {\n    var _this9;\n\n    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HttpResponse);\n\n    _this9 = _super2.call(this, init);\n    _this9.type = HttpEventType.Response;\n    _this9.body = init.body !== undefined ? init.body : null;\n    return _this9;\n  }\n\n  _createClass(HttpResponse, [{\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new HttpResponse({\n        body: update.body !== undefined ? update.body : this.body,\n        headers: update.headers || this.headers,\n        status: update.status !== undefined ? update.status : this.status,\n        statusText: update.statusText || this.statusText,\n        url: update.url || this.url || undefined\n      });\n    }\n  }]);\n\n  return HttpResponse;\n}(HttpResponseBase);\n/**\r\n * A response that represents an error or failure, either from a\r\n * non-successful HTTP status, an error while executing the request,\r\n * or some other failure which occurred during the parsing of the response.\r\n *\r\n * Any error returned on the `Observable` response stream will be\r\n * wrapped in an `HttpErrorResponse` to provide additional context about\r\n * the state of the HTTP layer when the error occurred. The error property\r\n * will contain either a wrapped Error object or the error response returned\r\n * from the server.\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpErrorResponse = /*#__PURE__*/function (_HttpResponseBase3) {\n  _inherits(HttpErrorResponse, _HttpResponseBase3);\n\n  var _super3 = _createSuper(HttpErrorResponse);\n\n  function HttpErrorResponse(init) {\n    var _this10;\n\n    _classCallCheck(this, HttpErrorResponse);\n\n    // Initialize with a default status of 0 / Unknown Error.\n    _this10 = _super3.call(this, init, 0, 'Unknown Error');\n    _this10.name = 'HttpErrorResponse';\n    /**\r\n     * Errors are never okay, even when the status code is in the 2xx success range.\r\n     */\n\n    _this10.ok = false; // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n\n    if (_this10.status >= 200 && _this10.status < 300) {\n      _this10.message = \"Http failure during parsing for \".concat(init.url || '(unknown url)');\n    } else {\n      _this10.message = \"Http failure response for \".concat(init.url || '(unknown url)', \": \").concat(init.status, \" \").concat(init.statusText);\n    }\n\n    _this10.error = init.error || null;\n    return _this10;\n  }\n\n  return HttpErrorResponse;\n}(HttpResponseBase);\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\r\n * the given `body`. This function clones the object and adds the body.\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n *\r\n */\n\n\nfunction addBody(options, body) {\n  return {\n    body: body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials\n  };\n}\n/**\r\n * Performs HTTP requests.\r\n * This service is available as an injectable class, with methods to perform HTTP requests.\r\n * Each request method has multiple signatures, and the return type varies based on\r\n * the signature that is called (mainly the values of `observe` and `responseType`).\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n\r\n *\r\n * @usageNotes\r\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\r\n *\r\n * ### HTTP Request Example\r\n *\r\n * ```\r\n *  // GET heroes whose name contains search term\r\n * searchHeroes(term: string): observable<Hero[]>{\r\n *\r\n *  const params = new HttpParams({fromString: 'name=term'});\r\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\r\n * }\r\n * ```\r\n *\r\n * Alternatively, the parameter string can be used without invoking HttpParams\r\n * by directly joining to the URL.\r\n * ```\r\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\r\n * ```\r\n *\r\n *\r\n * ### JSONP Example\r\n * ```\r\n * requestJsonp(url, callback = 'callback') {\r\n *  return this.httpClient.jsonp(this.heroesURL, callback);\r\n * }\r\n * ```\r\n *\r\n * ### PATCH Example\r\n * ```\r\n * // PATCH one of the heroes' name\r\n * patchHero (id: number, heroName: string): Observable<{}> {\r\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\r\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\r\n *    .pipe(catchError(this.handleError('patchHero')));\r\n * }\r\n * ```\r\n *\r\n * @see [HTTP Guide](guide/http)\r\n * @see [HTTP Request](api/common/http/HttpRequest)\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpClient = /*#__PURE__*/function () {\n  function HttpClient(handler) {\n    _classCallCheck(this, HttpClient);\n\n    this.handler = handler;\n  }\n  /**\r\n   * Constructs an observable for a generic HTTP request that, when subscribed,\r\n   * fires the request through the chain of registered interceptors and on to the\r\n   * server.\r\n   *\r\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\r\n   * the call returns an observable of the raw `HttpEvent` stream.\r\n   *\r\n   * Alternatively you can pass an HTTP method as the first parameter,\r\n   * a URL string as the second, and an options hash containing the request body as the third.\r\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\r\n   * type of returned observable.\r\n   *   * The `responseType` value determines how a successful response body is parsed.\r\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\r\n   * object as a type parameter to the call.\r\n   *\r\n   * The `observe` value determines the return type, according to what you are interested in\r\n   * observing.\r\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\r\n   * progress events by default.\r\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\r\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\r\n   * parameter.\r\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\r\n   *\r\n   */\n\n\n  _createClass(HttpClient, [{\n    key: \"request\",\n    value: function request(first, url) {\n      var _this11 = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var req; // First, check whether the primary argument is an instance of `HttpRequest`.\n\n      if (first instanceof HttpRequest) {\n        // It is. The other arguments must be undefined (per the signatures) and can be\n        // ignored.\n        req = first;\n      } else {\n        // It's a string, so it represents a URL. Construct a request based on it,\n        // and incorporate the remaining arguments (assuming `GET` unless a method is\n        // provided.\n        // Figure out the headers.\n        var headers = undefined;\n\n        if (options.headers instanceof HttpHeaders) {\n          headers = options.headers;\n        } else {\n          headers = new HttpHeaders(options.headers);\n        } // Sort out parameters.\n\n\n        var params = undefined;\n\n        if (!!options.params) {\n          if (options.params instanceof HttpParams) {\n            params = options.params;\n          } else {\n            params = new HttpParams({\n              fromObject: options.params\n            });\n          }\n        } // Construct the request.\n\n\n        req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n          headers: headers,\n          context: options.context,\n          params: params,\n          reportProgress: options.reportProgress,\n          // By default, JSON is assumed to be returned for all calls.\n          responseType: options.responseType || 'json',\n          withCredentials: options.withCredentials\n        });\n      } // Start with an Observable.of() the initial request, and run the handler (which\n      // includes all interceptors) inside a concatMap(). This way, the handler runs\n      // inside an Observable chain, which causes interceptors to be re-run on every\n      // subscription (this also makes retries re-run the handler, including interceptors).\n\n\n      var events$ = of(req).pipe(concatMap(function (req) {\n        return _this11.handler.handle(req);\n      })); // If coming via the API signature which accepts a previously constructed HttpRequest,\n      // the only option is to get the event stream. Otherwise, return the event stream if\n      // that is what was requested.\n\n      if (first instanceof HttpRequest || options.observe === 'events') {\n        return events$;\n      } // The requested stream contains either the full response or the body. In either\n      // case, the first step is to filter the event stream to extract a stream of\n      // responses(s).\n\n\n      var res$ = events$.pipe(filter(function (event) {\n        return event instanceof HttpResponse;\n      })); // Decide which stream to return.\n\n      switch (options.observe || 'body') {\n        case 'body':\n          // The requested stream is the body. Map the response stream to the response\n          // body. This could be done more simply, but a misbehaving interceptor might\n          // transform the response body into a different format and ignore the requested\n          // responseType. Guard against this by validating that the response is of the\n          // requested type.\n          switch (req.responseType) {\n            case 'arraybuffer':\n              return res$.pipe(map(function (res) {\n                // Validate that the body is an ArrayBuffer.\n                if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                  throw new Error('Response is not an ArrayBuffer.');\n                }\n\n                return res.body;\n              }));\n\n            case 'blob':\n              return res$.pipe(map(function (res) {\n                // Validate that the body is a Blob.\n                if (res.body !== null && !(res.body instanceof Blob)) {\n                  throw new Error('Response is not a Blob.');\n                }\n\n                return res.body;\n              }));\n\n            case 'text':\n              return res$.pipe(map(function (res) {\n                // Validate that the body is a string.\n                if (res.body !== null && typeof res.body !== 'string') {\n                  throw new Error('Response is not a string.');\n                }\n\n                return res.body;\n              }));\n\n            case 'json':\n            default:\n              // No validation needed for JSON responses, as they can be of any type.\n              return res$.pipe(map(function (res) {\n                return res.body;\n              }));\n          }\n\n        case 'response':\n          // The response stream was requested directly, so return it.\n          return res$;\n\n        default:\n          // Guard against new future observe types being added.\n          throw new Error(\"Unreachable: unhandled observe type \".concat(options.observe, \"}\"));\n      }\n    }\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `DELETE` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     *\r\n     * @param url     The endpoint URL.\r\n     * @param options The HTTP options to send with the request.\r\n     *\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('DELETE', url, options);\n    }\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `GET` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('GET', url, options);\n    }\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `HEAD` request to execute on the server. The `HEAD` method returns\r\n     * meta information about the resource without transferring the\r\n     * resource itself. See the individual overloads for\r\n     * details on the return type.\r\n     */\n\n  }, {\n    key: \"head\",\n    value: function head(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('HEAD', url, options);\n    }\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\r\n     * `JSONP` to be dispatched via the interceptor pipeline.\r\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\r\n     * API endpoints that don't support newer,\r\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\r\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\r\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\r\n     * application making the request.\r\n     * The endpoint API must support JSONP callback for JSONP requests to work.\r\n     * The resource API returns the JSON response wrapped in a callback function.\r\n     * You can pass the callback function name as one of the query parameters.\r\n     * Note that JSONP requests can only be used with `GET` requests.\r\n     *\r\n     * @param url The resource URL.\r\n     * @param callbackParam The callback function name.\r\n     *\r\n     */\n\n  }, {\n    key: \"jsonp\",\n    value: function jsonp(url, callbackParam) {\n      return this.request('JSONP', url, {\n        params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n        observe: 'body',\n        responseType: 'json'\n      });\n    }\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes the configured\r\n     * `OPTIONS` request to execute on the server. This method allows the client\r\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\r\n     * without implying a resource action. See the individual overloads for\r\n     * details on the return type.\r\n     */\n\n  }, {\n    key: \"options\",\n    value: function options(url) {\n      var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return this.request('OPTIONS', url, _options);\n    }\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PATCH` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\n\n  }, {\n    key: \"patch\",\n    value: function patch(url, body) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `POST` request to execute on the server. The server responds with the location of\r\n     * the replaced resource. See the individual overloads for\r\n     * details on the return type.\r\n     */\n\n  }, {\n    key: \"post\",\n    value: function post(url, body) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request('POST', url, addBody(options, body));\n    }\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\r\n     * with a new set of values.\r\n     * See the individual overloads for details on the return type.\r\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(url, body) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request('PUT', url, addBody(options, body));\n    }\n  }]);\n\n  return HttpClient;\n}();\n\nHttpClient.ɵfac = function HttpClient_Factory(t) {\n  return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler));\n};\n\nHttpClient.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: HttpClient,\n  factory: HttpClient.ɵfac\n});\n\nHttpClient.ctorParameters = function () {\n  return [{\n    type: HttpHandler\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClient, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpHandler\n    }];\n  }, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\r\n *\r\n *\r\n */\n\n\nvar HttpInterceptorHandler = /*#__PURE__*/function () {\n  function HttpInterceptorHandler(next, interceptor) {\n    _classCallCheck(this, HttpInterceptorHandler);\n\n    this.next = next;\n    this.interceptor = interceptor;\n  }\n\n  _createClass(HttpInterceptorHandler, [{\n    key: \"handle\",\n    value: function handle(req) {\n      return this.interceptor.intercept(req, this.next);\n    }\n  }]);\n\n  return HttpInterceptorHandler;\n}();\n/**\r\n * A multi-provider token that represents the array of registered\r\n * `HttpInterceptor` objects.\r\n *\r\n * @publicApi\r\n */\n\n\nvar HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\n\nvar NoopInterceptor = /*#__PURE__*/function () {\n  function NoopInterceptor() {\n    _classCallCheck(this, NoopInterceptor);\n  }\n\n  _createClass(NoopInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      return next.handle(req);\n    }\n  }]);\n\n  return NoopInterceptor;\n}();\n\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) {\n  return new (t || NoopInterceptor)();\n};\n\nNoopInterceptor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: NoopInterceptor,\n  factory: NoopInterceptor.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n\n\nvar nextRequestId = 0; // Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.'; // Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\r\n * DI token/abstract type representing a map of JSONP callbacks.\r\n *\r\n * In the browser, this should always be the `window` object.\r\n *\r\n *\r\n */\n\nvar JsonpCallbackContext = function JsonpCallbackContext() {\n  _classCallCheck(this, JsonpCallbackContext);\n};\n/**\r\n * Processes an `HttpRequest` with the JSONP method,\r\n * by performing JSONP style requests.\r\n * @see `HttpHandler`\r\n * @see `HttpXhrBackend`\r\n *\r\n * @publicApi\r\n */\n\n\nvar JsonpClientBackend = /*#__PURE__*/function () {\n  function JsonpClientBackend(callbackMap, document) {\n    _classCallCheck(this, JsonpClientBackend);\n\n    this.callbackMap = callbackMap;\n    this.document = document;\n    /**\r\n     * A resolved promise that can be used to schedule microtasks in the event handlers.\r\n     */\n\n    this.resolvedPromise = Promise.resolve();\n  }\n  /**\r\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\r\n   */\n\n\n  _createClass(JsonpClientBackend, [{\n    key: \"nextCallback\",\n    value: function nextCallback() {\n      return \"ng_jsonp_callback_\".concat(nextRequestId++);\n    }\n    /**\r\n     * Processes a JSONP request and returns an event stream of the results.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     *\r\n     */\n\n  }, {\n    key: \"handle\",\n    value: function handle(req) {\n      var _this12 = this;\n\n      // Firstly, check both the method and response type. If either doesn't match\n      // then the request was improperly routed here and cannot be handled.\n      if (req.method !== 'JSONP') {\n        throw new Error(JSONP_ERR_WRONG_METHOD);\n      } else if (req.responseType !== 'json') {\n        throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n      } // Everything else happens inside the Observable boundary.\n\n\n      return new Observable(function (observer) {\n        // The first step to make a request is to generate the callback name, and replace the\n        // callback placeholder in the URL with the name. Care has to be taken here to ensure\n        // a trailing &, if matched, gets inserted back into the URL in the correct place.\n        var callback = _this12.nextCallback();\n\n        var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\".concat(callback, \"$1\")); // Construct the <script> tag and point it at the URL.\n\n        var node = _this12.document.createElement('script');\n\n        node.src = url; // A JSONP request requires waiting for multiple callbacks. These variables\n        // are closed over and track state across those callbacks.\n        // The response object, if one has been received, or null otherwise.\n\n        var body = null; // Whether the response callback has been called.\n\n        var finished = false; // Whether the request has been cancelled (and thus any other callbacks)\n        // should be ignored.\n\n        var cancelled = false; // Set the response callback in this.callbackMap (which will be the window\n        // object in the browser. The script being loaded via the <script> tag will\n        // eventually call this callback.\n\n        _this12.callbackMap[callback] = function (data) {\n          // Data has been received from the JSONP script. Firstly, delete this callback.\n          delete _this12.callbackMap[callback]; // Next, make sure the request wasn't cancelled in the meantime.\n\n          if (cancelled) {\n            return;\n          } // Set state to indicate data was received.\n\n\n          body = data;\n          finished = true;\n        }; // cleanup() is a utility closure that removes the <script> from the page and\n        // the response callback from the window. This logic is used in both the\n        // success, error, and cancellation paths, so it's extracted out for convenience.\n\n\n        var cleanup = function cleanup() {\n          // Remove the <script> tag if it's still on the page.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          } // Remove the response callback from the callbackMap (window object in the\n          // browser).\n\n\n          delete _this12.callbackMap[callback];\n        }; // onLoad() is the success callback which runs after the response callback\n        // if the JSONP script loads successfully. The event itself is unimportant.\n        // If something went wrong, onLoad() may run without the response callback\n        // having been invoked.\n\n\n        var onLoad = function onLoad(event) {\n          // Do nothing if the request has been cancelled.\n          if (cancelled) {\n            return;\n          } // We wrap it in an extra Promise, to ensure the microtask\n          // is scheduled after the loaded endpoint has executed any potential microtask itself,\n          // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n\n\n          _this12.resolvedPromise.then(function () {\n            // Cleanup the page.\n            cleanup(); // Check whether the response callback has run.\n\n            if (!finished) {\n              // It hasn't, something went wrong with the request. Return an error via\n              // the Observable error path. All JSONP errors have status 0.\n              observer.error(new HttpErrorResponse({\n                url: url,\n                status: 0,\n                statusText: 'JSONP Error',\n                error: new Error(JSONP_ERR_NO_CALLBACK)\n              }));\n              return;\n            } // Success. body either contains the response body or null if none was\n            // returned.\n\n\n            observer.next(new HttpResponse({\n              body: body,\n              status: 200\n              /* Ok */\n              ,\n              statusText: 'OK',\n              url: url\n            })); // Complete the stream, the response is over.\n\n            observer.complete();\n          });\n        }; // onError() is the error callback, which runs if the script returned generates\n        // a Javascript error. It emits the error via the Observable error channel as\n        // a HttpErrorResponse.\n\n\n        var onError = function onError(error) {\n          // If the request was already cancelled, no need to emit anything.\n          if (cancelled) {\n            return;\n          }\n\n          cleanup(); // Wrap the error in a HttpErrorResponse.\n\n          observer.error(new HttpErrorResponse({\n            error: error,\n            status: 0,\n            statusText: 'JSONP Error',\n            url: url\n          }));\n        }; // Subscribe to both the success (load) and error events on the <script> tag,\n        // and add it to the page.\n\n\n        node.addEventListener('load', onLoad);\n        node.addEventListener('error', onError);\n\n        _this12.document.body.appendChild(node); // The request has now been successfully sent.\n\n\n        observer.next({\n          type: HttpEventType.Sent\n        }); // Cancellation handler.\n\n        return function () {\n          // Track the cancellation so event listeners won't do anything even if already scheduled.\n          cancelled = true; // Remove the event listeners so they won't run if the events later fire.\n\n          node.removeEventListener('load', onLoad);\n          node.removeEventListener('error', onError); // And finally, clean up the page.\n\n          cleanup();\n        };\n      });\n    }\n  }]);\n\n  return JsonpClientBackend;\n}();\n\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) {\n  return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nJsonpClientBackend.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: JsonpClientBackend,\n  factory: JsonpClientBackend.ɵfac\n});\n\nJsonpClientBackend.ctorParameters = function () {\n  return [{\n    type: JsonpCallbackContext\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpCallbackContext\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * Identifies requests with the method JSONP and\r\n * shifts them to the `JsonpClientBackend`.\r\n *\r\n * @see `HttpInterceptor`\r\n *\r\n * @publicApi\r\n */\n\n\nvar JsonpInterceptor = /*#__PURE__*/function () {\n  function JsonpInterceptor(jsonp) {\n    _classCallCheck(this, JsonpInterceptor);\n\n    this.jsonp = jsonp;\n  }\n  /**\r\n   * Identifies and handles a given JSONP request.\r\n   * @param req The outgoing request object to handle.\r\n   * @param next The next interceptor in the chain, or the backend\r\n   * if no interceptors remain in the chain.\r\n   * @returns An observable of the event stream.\r\n   */\n\n\n  _createClass(JsonpInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      if (req.method === 'JSONP') {\n        return this.jsonp.handle(req);\n      } // Fall through for normal HTTP requests.\n\n\n      return next.handle(req);\n    }\n  }]);\n\n  return JsonpInterceptor;\n}();\n\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) {\n  return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend));\n};\n\nJsonpInterceptor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: JsonpInterceptor,\n  factory: JsonpInterceptor.ɵfac\n});\n\nJsonpInterceptor.ctorParameters = function () {\n  return [{\n    type: JsonpClientBackend\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpClientBackend\n    }];\n  }, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * XMLHttpRequest.responseURL or the X-Request-URL header.\r\n */\n\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n\n  return null;\n}\n/**\r\n * Uses `XMLHttpRequest` to send requests to a backend server.\r\n * @see `HttpHandler`\r\n * @see `JsonpClientBackend`\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpXhrBackend = /*#__PURE__*/function () {\n  function HttpXhrBackend(xhrFactory) {\n    _classCallCheck(this, HttpXhrBackend);\n\n    this.xhrFactory = xhrFactory;\n  }\n  /**\r\n   * Processes a request and returns a stream of response events.\r\n   * @param req The request object.\r\n   * @returns An observable of the response events.\r\n   */\n\n\n  _createClass(HttpXhrBackend, [{\n    key: \"handle\",\n    value: function handle(req) {\n      var _this13 = this;\n\n      // Quick check to give a better error message when a user attempts to use\n      // HttpClient.jsonp() without installing the HttpClientJsonpModule\n      if (req.method === 'JSONP') {\n        throw new Error(\"Attempted to construct Jsonp request without HttpClientJsonpModule installed.\");\n      } // Everything happens on Observable subscription.\n\n\n      return new Observable(function (observer) {\n        // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n        var xhr = _this13.xhrFactory.build();\n\n        xhr.open(req.method, req.urlWithParams);\n\n        if (!!req.withCredentials) {\n          xhr.withCredentials = true;\n        } // Add all the requested headers.\n\n\n        req.headers.forEach(function (name, values) {\n          return xhr.setRequestHeader(name, values.join(','));\n        }); // Add an Accept header if one isn't present already.\n\n        if (!req.headers.has('Accept')) {\n          xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n        } // Auto-detect the Content-Type header if one isn't present already.\n\n\n        if (!req.headers.has('Content-Type')) {\n          var detectedType = req.detectContentTypeHeader(); // Sometimes Content-Type detection fails.\n\n          if (detectedType !== null) {\n            xhr.setRequestHeader('Content-Type', detectedType);\n          }\n        } // Set the responseType if one was requested.\n\n\n        if (req.responseType) {\n          var responseType = req.responseType.toLowerCase(); // JSON responses need to be processed as text. This is because if the server\n          // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n          // xhr.response will be null, and xhr.responseText cannot be accessed to\n          // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n          // is parsed by first requesting text and then applying JSON.parse.\n\n          xhr.responseType = responseType !== 'json' ? responseType : 'text';\n        } // Serialize the request body if one is present. If not, this will be set to null.\n\n\n        var reqBody = req.serializeBody(); // If progress events are enabled, response headers will be delivered\n        // in two events - the HttpHeaderResponse event and the full HttpResponse\n        // event. However, since response headers don't change in between these\n        // two events, it doesn't make sense to parse them twice. So headerResponse\n        // caches the data extracted from the response whenever it's first parsed,\n        // to ensure parsing isn't duplicated.\n\n        var headerResponse = null; // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n        // state, and memoizes it into headerResponse.\n\n        var partialFromXhr = function partialFromXhr() {\n          if (headerResponse !== null) {\n            return headerResponse;\n          } // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\n\n\n          var status = xhr.status === 1223 ? 204\n          /* NoContent */\n          : xhr.status;\n          var statusText = xhr.statusText || 'OK'; // Parse headers from XMLHttpRequest - this step is lazy.\n\n          var headers = new HttpHeaders(xhr.getAllResponseHeaders()); // Read the response URL from the XMLHttpResponse instance and fall back on the\n          // request URL.\n\n          var url = getResponseUrl(xhr) || req.url; // Construct the HttpHeaderResponse and memoize it.\n\n          headerResponse = new HttpHeaderResponse({\n            headers: headers,\n            status: status,\n            statusText: statusText,\n            url: url\n          });\n          return headerResponse;\n        }; // Next, a few closures are defined for the various events which XMLHttpRequest can\n        // emit. This allows them to be unregistered as event listeners later.\n        // First up is the load event, which represents a response being fully available.\n\n\n        var onLoad = function onLoad() {\n          // Read response state from the memoized partial data.\n          var _partialFromXhr = partialFromXhr(),\n              headers = _partialFromXhr.headers,\n              status = _partialFromXhr.status,\n              statusText = _partialFromXhr.statusText,\n              url = _partialFromXhr.url; // The body will be read out if present.\n\n\n          var body = null;\n\n          if (status !== 204\n          /* NoContent */\n          ) {\n              // Use XMLHttpRequest.response if set, responseText otherwise.\n              body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n            } // Normalize another potential bug (this one comes from CORS).\n\n\n          if (status === 0) {\n            status = !!body ? 200\n            /* Ok */\n            : 0;\n          } // ok determines whether the response will be transmitted on the event or\n          // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n          // but a successful status code can still result in an error if the user\n          // asked for JSON data and the body cannot be parsed as such.\n\n\n          var ok = status >= 200 && status < 300; // Check whether the body needs to be parsed as JSON (in many cases the browser\n          // will have done that already).\n\n          if (req.responseType === 'json' && typeof body === 'string') {\n            // Save the original body, before attempting XSSI prefix stripping.\n            var originalBody = body;\n            body = body.replace(XSSI_PREFIX, '');\n\n            try {\n              // Attempt the parse. If it fails, a parse error should be delivered to the user.\n              body = body !== '' ? JSON.parse(body) : null;\n            } catch (error) {\n              // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n              // JSON response. Restore the original body (including any XSSI prefix) to deliver\n              // a better error response.\n              body = originalBody; // If this was an error request to begin with, leave it as a string, it probably\n              // just isn't JSON. Otherwise, deliver the parsing error to the user.\n\n              if (ok) {\n                // Even though the response status was 2xx, this is still an error.\n                ok = false; // The parse error contains the text of the body that failed to parse.\n\n                body = {\n                  error: error,\n                  text: body\n                };\n              }\n            }\n          }\n\n          if (ok) {\n            // A successful response is delivered on the event stream.\n            observer.next(new HttpResponse({\n              body: body,\n              headers: headers,\n              status: status,\n              statusText: statusText,\n              url: url || undefined\n            })); // The full body has been received and delivered, no further events\n            // are possible. This request is complete.\n\n            observer.complete();\n          } else {\n            // An unsuccessful request is delivered on the error channel.\n            observer.error(new HttpErrorResponse({\n              // The error in this case is the response body (error from the server).\n              error: body,\n              headers: headers,\n              status: status,\n              statusText: statusText,\n              url: url || undefined\n            }));\n          }\n        }; // The onError callback is called when something goes wrong at the network level.\n        // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n        // transmitted on the error channel.\n\n\n        var onError = function onError(error) {\n          var _partialFromXhr2 = partialFromXhr(),\n              url = _partialFromXhr2.url;\n\n          var res = new HttpErrorResponse({\n            error: error,\n            status: xhr.status || 0,\n            statusText: xhr.statusText || 'Unknown Error',\n            url: url || undefined\n          });\n          observer.error(res);\n        }; // The sentHeaders flag tracks whether the HttpResponseHeaders event\n        // has been sent on the stream. This is necessary to track if progress\n        // is enabled since the event will be sent on only the first download\n        // progerss event.\n\n\n        var sentHeaders = false; // The download progress event handler, which is only registered if\n        // progress events are enabled.\n\n        var onDownProgress = function onDownProgress(event) {\n          // Send the HttpResponseHeaders event if it hasn't been sent already.\n          if (!sentHeaders) {\n            observer.next(partialFromXhr());\n            sentHeaders = true;\n          } // Start building the download progress event to deliver on the response\n          // event stream.\n\n\n          var progressEvent = {\n            type: HttpEventType.DownloadProgress,\n            loaded: event.loaded\n          }; // Set the total number of bytes in the event if it's available.\n\n          if (event.lengthComputable) {\n            progressEvent.total = event.total;\n          } // If the request was for text content and a partial response is\n          // available on XMLHttpRequest, include it in the progress event\n          // to allow for streaming reads.\n\n\n          if (req.responseType === 'text' && !!xhr.responseText) {\n            progressEvent.partialText = xhr.responseText;\n          } // Finally, fire the event.\n\n\n          observer.next(progressEvent);\n        }; // The upload progress event handler, which is only registered if\n        // progress events are enabled.\n\n\n        var onUpProgress = function onUpProgress(event) {\n          // Upload progress events are simpler. Begin building the progress\n          // event.\n          var progress = {\n            type: HttpEventType.UploadProgress,\n            loaded: event.loaded\n          }; // If the total number of bytes being uploaded is available, include\n          // it.\n\n          if (event.lengthComputable) {\n            progress.total = event.total;\n          } // Send the event.\n\n\n          observer.next(progress);\n        }; // By default, register for load and error events.\n\n\n        xhr.addEventListener('load', onLoad);\n        xhr.addEventListener('error', onError);\n        xhr.addEventListener('timeout', onError);\n        xhr.addEventListener('abort', onError); // Progress events are only enabled if requested.\n\n        if (req.reportProgress) {\n          // Download progress is always enabled if requested.\n          xhr.addEventListener('progress', onDownProgress); // Upload progress depends on whether there is a body to upload.\n\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.addEventListener('progress', onUpProgress);\n          }\n        } // Fire the request, and notify the event stream that it was fired.\n\n\n        xhr.send(reqBody);\n        observer.next({\n          type: HttpEventType.Sent\n        }); // This is the return from the Observable function, which is the\n        // request cancellation handler.\n\n        return function () {\n          // On a cancellation, remove all registered event listeners.\n          xhr.removeEventListener('error', onError);\n          xhr.removeEventListener('abort', onError);\n          xhr.removeEventListener('load', onLoad);\n          xhr.removeEventListener('timeout', onError);\n\n          if (req.reportProgress) {\n            xhr.removeEventListener('progress', onDownProgress);\n\n            if (reqBody !== null && xhr.upload) {\n              xhr.upload.removeEventListener('progress', onUpProgress);\n            }\n          } // Finally, abort the in-flight request.\n\n\n          if (xhr.readyState !== xhr.DONE) {\n            xhr.abort();\n          }\n        };\n      });\n    }\n  }]);\n\n  return HttpXhrBackend;\n}();\n\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) {\n  return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(ɵngcc1.XhrFactory));\n};\n\nHttpXhrBackend.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: HttpXhrBackend,\n  factory: HttpXhrBackend.ɵfac\n});\n\nHttpXhrBackend.ctorParameters = function () {\n  return [{\n    type: XhrFactory$1\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc1.XhrFactory\n    }];\n  }, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\r\n * Retrieves the current XSRF token to use with the next outgoing request.\r\n *\r\n * @publicApi\r\n */\n\nvar HttpXsrfTokenExtractor = function HttpXsrfTokenExtractor() {\n  _classCallCheck(this, HttpXsrfTokenExtractor);\n};\n/**\r\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\r\n */\n\n\nvar HttpXsrfCookieExtractor = /*#__PURE__*/function () {\n  function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n    _classCallCheck(this, HttpXsrfCookieExtractor);\n\n    this.doc = doc;\n    this.platform = platform;\n    this.cookieName = cookieName;\n    this.lastCookieString = '';\n    this.lastToken = null;\n    /**\r\n     * @internal for testing\r\n     */\n\n    this.parseCount = 0;\n  }\n\n  _createClass(HttpXsrfCookieExtractor, [{\n    key: \"getToken\",\n    value: function getToken() {\n      if (this.platform === 'server') {\n        return null;\n      }\n\n      var cookieString = this.doc.cookie || '';\n\n      if (cookieString !== this.lastCookieString) {\n        this.parseCount++;\n        this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n        this.lastCookieString = cookieString;\n      }\n\n      return this.lastToken;\n    }\n  }]);\n\n  return HttpXsrfCookieExtractor;\n}();\n\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) {\n  return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME));\n};\n\nHttpXsrfCookieExtractor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: HttpXsrfCookieExtractor,\n  factory: HttpXsrfCookieExtractor.ɵfac\n});\n\nHttpXsrfCookieExtractor.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [XSRF_COOKIE_NAME]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_COOKIE_NAME]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\r\n */\n\n\nvar HttpXsrfInterceptor = /*#__PURE__*/function () {\n  function HttpXsrfInterceptor(tokenService, headerName) {\n    _classCallCheck(this, HttpXsrfInterceptor);\n\n    this.tokenService = tokenService;\n    this.headerName = headerName;\n  }\n\n  _createClass(HttpXsrfInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      var lcUrl = req.url.toLowerCase(); // Skip both non-mutating requests and absolute URLs.\n      // Non-mutating requests don't require a token, and absolute URLs require special handling\n      // anyway as the cookie set\n      // on our origin is not the same as the token expected by another origin.\n\n      if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n        return next.handle(req);\n      }\n\n      var token = this.tokenService.getToken(); // Be careful not to overwrite an existing header of the same name.\n\n      if (token !== null && !req.headers.has(this.headerName)) {\n        req = req.clone({\n          headers: req.headers.set(this.headerName, token)\n        });\n      }\n\n      return next.handle(req);\n    }\n  }]);\n\n  return HttpXsrfInterceptor;\n}();\n\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) {\n  return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME));\n};\n\nHttpXsrfInterceptor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: HttpXsrfInterceptor,\n  factory: HttpXsrfInterceptor.ɵfac\n});\n\nHttpXsrfInterceptor.ctorParameters = function () {\n  return [{\n    type: HttpXsrfTokenExtractor\n  }, {\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [XSRF_HEADER_NAME]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpXsrfTokenExtractor\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_HEADER_NAME]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * An injectable `HttpHandler` that applies multiple interceptors\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * The interceptors are loaded lazily from the injector, to allow\r\n * interceptors to themselves inject classes depending indirectly\r\n * on `HttpInterceptingHandler` itself.\r\n * @see `HttpInterceptor`\r\n */\n\n\nvar HttpInterceptingHandler = /*#__PURE__*/function () {\n  function HttpInterceptingHandler(backend, injector) {\n    _classCallCheck(this, HttpInterceptingHandler);\n\n    this.backend = backend;\n    this.injector = injector;\n    this.chain = null;\n  }\n\n  _createClass(HttpInterceptingHandler, [{\n    key: \"handle\",\n    value: function handle(req) {\n      if (this.chain === null) {\n        var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n        this.chain = interceptors.reduceRight(function (next, interceptor) {\n          return new HttpInterceptorHandler(next, interceptor);\n        }, this.backend);\n      }\n\n      return this.chain.handle(req);\n    }\n  }]);\n\n  return HttpInterceptingHandler;\n}();\n\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) {\n  return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n};\n\nHttpInterceptingHandler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: HttpInterceptingHandler,\n  factory: HttpInterceptingHandler.ɵfac\n});\n\nHttpInterceptingHandler.ctorParameters = function () {\n  return [{\n    type: HttpBackend\n  }, {\n    type: Injector\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpBackend\n    }, {\n      type: ɵngcc0.Injector\n    }];\n  }, null);\n})();\n/**\r\n * Constructs an `HttpHandler` that applies interceptors\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * Use as a factory function within `HttpClientModule`.\r\n *\r\n *\r\n */\n\n\nfunction interceptingHandler(backend) {\n  var interceptors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (!interceptors) {\n    return backend;\n  }\n\n  return interceptors.reduceRight(function (next, interceptor) {\n    return new HttpInterceptorHandler(next, interceptor);\n  }, backend);\n}\n/**\r\n * Factory function that determines where to store JSONP callbacks.\r\n *\r\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\r\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\r\n *\r\n *\r\n */\n\n\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n\n  return {};\n}\n/**\r\n * Configures XSRF protection support for outgoing requests.\r\n *\r\n * For a server that supports a cookie-based XSRF protection system,\r\n * use directly to configure XSRF protection with the correct\r\n * cookie and header names.\r\n *\r\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\r\n * and the default header name is `X-XSRF-TOKEN`.\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpClientXsrfModule = /*#__PURE__*/function () {\n  function HttpClientXsrfModule() {\n    _classCallCheck(this, HttpClientXsrfModule);\n  }\n\n  _createClass(HttpClientXsrfModule, null, [{\n    key: \"disable\",\n    value:\n    /**\r\n     * Disable the default XSRF protection.\r\n     */\n    function disable() {\n      return {\n        ngModule: HttpClientXsrfModule,\n        providers: [{\n          provide: HttpXsrfInterceptor,\n          useClass: NoopInterceptor\n        }]\n      };\n    }\n    /**\r\n     * Configure XSRF protection.\r\n     * @param options An object that can specify either or both\r\n     * cookie name or header name.\r\n     * - Cookie name default is `XSRF-TOKEN`.\r\n     * - Header name default is `X-XSRF-TOKEN`.\r\n     *\r\n     */\n\n  }, {\n    key: \"withOptions\",\n    value: function withOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: HttpClientXsrfModule,\n        providers: [options.cookieName ? {\n          provide: XSRF_COOKIE_NAME,\n          useValue: options.cookieName\n        } : [], options.headerName ? {\n          provide: XSRF_HEADER_NAME,\n          useValue: options.headerName\n        } : []]\n      };\n    }\n  }]);\n\n  return HttpClientXsrfModule;\n}();\n\nHttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) {\n  return new (t || HttpClientXsrfModule)();\n};\n\nHttpClientXsrfModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: HttpClientXsrfModule\n});\nHttpClientXsrfModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [HttpXsrfInterceptor, {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpXsrfInterceptor,\n    multi: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }, {\n    provide: XSRF_COOKIE_NAME,\n    useValue: 'XSRF-TOKEN'\n  }, {\n    provide: XSRF_HEADER_NAME,\n    useValue: 'X-XSRF-TOKEN'\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n    type: NgModule,\n    args: [{\n      providers: [HttpXsrfInterceptor, {\n        provide: HTTP_INTERCEPTORS,\n        useExisting: HttpXsrfInterceptor,\n        multi: true\n      }, {\n        provide: HttpXsrfTokenExtractor,\n        useClass: HttpXsrfCookieExtractor\n      }, {\n        provide: XSRF_COOKIE_NAME,\n        useValue: 'XSRF-TOKEN'\n      }, {\n        provide: XSRF_HEADER_NAME,\n        useValue: 'X-XSRF-TOKEN'\n      }]\n    }]\n  }], null, null);\n})();\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpClientModule = function HttpClientModule() {\n  _classCallCheck(this, HttpClientModule);\n};\n\nHttpClientModule.ɵfac = function HttpClientModule_Factory(t) {\n  return new (t || HttpClientModule)();\n};\n\nHttpClientModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: HttpClientModule\n});\nHttpClientModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [HttpClient, {\n    provide: HttpHandler,\n    useClass: HttpInterceptingHandler\n  }, HttpXhrBackend, {\n    provide: HttpBackend,\n    useExisting: HttpXhrBackend\n  }],\n  imports: [[HttpClientXsrfModule.withOptions({\n    cookieName: 'XSRF-TOKEN',\n    headerName: 'X-XSRF-TOKEN'\n  })]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\n    type: NgModule,\n    args: [{\n      /**\r\n       * Optional configuration for XSRF protection.\r\n       */\n      imports: [HttpClientXsrfModule.withOptions({\n        cookieName: 'XSRF-TOKEN',\n        headerName: 'X-XSRF-TOKEN'\n      })],\n\n      /**\r\n       * Configures the [dependency injector](guide/glossary#injector) where it is imported\r\n       * with supporting services for HTTP communications.\r\n       */\n      providers: [HttpClient, {\n        provide: HttpHandler,\n        useClass: HttpInterceptingHandler\n      }, HttpXhrBackend, {\n        provide: HttpBackend,\n        useExisting: HttpXhrBackend\n      }]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, {\n    imports: [HttpClientXsrfModule]\n  });\n})();\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for JSONP.\r\n * Without this module, Jsonp requests reach the backend\r\n * with method JSONP, where they are rejected.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n */\n\n\nvar HttpClientJsonpModule = function HttpClientJsonpModule() {\n  _classCallCheck(this, HttpClientJsonpModule);\n};\n\nHttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) {\n  return new (t || HttpClientJsonpModule)();\n};\n\nHttpClientJsonpModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: HttpClientJsonpModule\n});\nHttpClientJsonpModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [JsonpClientBackend, {\n    provide: JsonpCallbackContext,\n    useFactory: jsonpCallbackContext\n  }, {\n    provide: HTTP_INTERCEPTORS,\n    useClass: JsonpInterceptor,\n    multi: true\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [JsonpClientBackend, {\n        provide: JsonpCallbackContext,\n        useFactory: jsonpCallbackContext\n      }, {\n        provide: HTTP_INTERCEPTORS,\n        useClass: JsonpInterceptor,\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * A wrapper around the `XMLHttpRequest` constructor.\r\n *\r\n * @publicApi\r\n * @see `XhrFactory`\r\n * @deprecated\r\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\r\n */\n\n\nvar XhrFactory = XhrFactory$1;\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_d, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_e, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_f, HttpXsrfInterceptor as ɵangular_packages_common_http_http_g }; //# sourceMappingURL=http.js.map","map":{"version":3,"sources":["C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js"],"names":["DOCUMENT","XhrFactory","XhrFactory$1","ɵparseCookieValue","Injectable","InjectionToken","Inject","PLATFORM_ID","Injector","NgModule","of","Observable","concatMap","filter","map","ɵngcc0","ɵngcc1","HttpHandler","HttpBackend","HttpHeaders","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","length","init","Array","from","clone","op","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","delete","existing","fn","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","paramParser","rawParams","codec","params","replace","param","eqIdx","decodeKey","decodeValue","val","list","v","encodeURIComponent","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","_value","eKey","encodeKey","encodeValue","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","urlWithParams","toString","qIdx","sep","JSON","stringify","type","_a","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","first","req","events$","pipe","handle","res$","event","request","callbackParam","append","ɵfac","HttpClient_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","ctorParameters","ngDevMode","ɵsetClassMetadata","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","NoopInterceptor_Factory","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","observer","callback","nextCallback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","then","complete","onError","addEventListener","appendChild","Sent","removeEventListener","JsonpClientBackend_Factory","decorators","args","JsonpInterceptor","jsonp","JsonpInterceptor_Factory","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","readyState","DONE","abort","HttpXhrBackend_Factory","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","HttpXsrfCookieExtractor_Factory","String","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","getToken","HttpXsrfInterceptor_Factory","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","HttpInterceptingHandler_Factory","interceptingHandler","jsonpCallbackContext","window","HttpClientXsrfModule","ngModule","providers","provide","useClass","useValue","HttpClientXsrfModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useExisting","multi","HttpClientModule","HttpClientModule_Factory","imports","withOptions","ngJitMode","ɵɵsetNgModuleScope","HttpClientJsonpModule","HttpClientJsonpModule_Factory","useFactory","ɵHttpInterceptingHandler","ɵangular_packages_common_http_http_a","ɵangular_packages_common_http_http_b","ɵangular_packages_common_http_http_c","ɵangular_packages_common_http_http_d","ɵangular_packages_common_http_http_e","ɵangular_packages_common_http_http_f","ɵangular_packages_common_http_http_g"],"mappings":"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gE,GAAL,IAAY,eAAxD,eAA4EhE,IAAI,CAACwF,MAAjF,cAA2FxF,IAAI,CAACyF,UAAhG;AACH;;AACD,YAAKQ,KAAL,GAAajG,IAAI,CAACiG,KAAL,IAAc,IAA3B;AAjBc;AAkBjB;;;EAnB2BZ,gB;AAsBhC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASa,OAAT,CAAiB/D,OAAjB,EAA0BgC,IAA1B,EAAgC;AAC5B,SAAO;AACHA,IAAAA,IAAI,EAAJA,IADG;AAEH5F,IAAAA,OAAO,EAAE4D,OAAO,CAAC5D,OAFd;AAGHiG,IAAAA,OAAO,EAAErC,OAAO,CAACqC,OAHd;AAIH2B,IAAAA,OAAO,EAAEhE,OAAO,CAACgE,OAJd;AAKH5E,IAAAA,MAAM,EAAEY,OAAO,CAACZ,MALb;AAMH6C,IAAAA,cAAc,EAAEjC,OAAO,CAACiC,cANrB;AAOHE,IAAAA,YAAY,EAAEnC,OAAO,CAACmC,YAPnB;AAQHD,IAAAA,eAAe,EAAElC,OAAO,CAACkC;AARtB,GAAP;AAUH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACM+B,U;AACF,sBAAYC,OAAZ,EAAqB;AAAA;;AACjB,SAAKA,OAAL,GAAeA,OAAf;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACI,iBAAQC,KAAR,EAAetC,GAAf,EAAkC;AAAA;;AAAA,UAAd7B,OAAc,uEAAJ,EAAI;AAC9B,UAAIoE,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","sourcesContent":["/**\r\n * @license Angular v12.0.5\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { DOCUMENT, XhrFactory as XhrFactory$1, ɵparseCookieValue } from '@angular/common';\r\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\r\nimport { of, Observable } from 'rxjs';\r\nimport { concatMap, filter, map } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\r\n * `HttpResponse`.\r\n *\r\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\r\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\r\n * `HttpBackend`.\r\n *\r\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\r\n *\r\n * @publicApi\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/common';\r\nclass HttpHandler {\r\n}\r\n/**\r\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\r\n *\r\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\r\n *\r\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\r\n * through the interceptor chain.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpBackend {\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents the header configuration options for an HTTP request.\r\n * Instances are immutable. Modifying methods return a cloned\r\n * instance with the change. The original object is never changed.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHeaders {\r\n    /**  Constructs a new HTTP header object with the given values.*/\r\n    constructor(headers) {\r\n        /**\r\n         * Internal map of lowercased header names to the normalized\r\n         * form of the name (the form seen first).\r\n         */\r\n        this.normalizedNames = new Map();\r\n        /**\r\n         * Queued updates to be materialized the next initialization.\r\n         */\r\n        this.lazyUpdate = null;\r\n        if (!headers) {\r\n            this.headers = new Map();\r\n        }\r\n        else if (typeof headers === 'string') {\r\n            this.lazyInit = () => {\r\n                this.headers = new Map();\r\n                headers.split('\\n').forEach(line => {\r\n                    const index = line.indexOf(':');\r\n                    if (index > 0) {\r\n                        const name = line.slice(0, index);\r\n                        const key = name.toLowerCase();\r\n                        const value = line.slice(index + 1).trim();\r\n                        this.maybeSetNormalizedName(name, key);\r\n                        if (this.headers.has(key)) {\r\n                            this.headers.get(key).push(value);\r\n                        }\r\n                        else {\r\n                            this.headers.set(key, [value]);\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        else {\r\n            this.lazyInit = () => {\r\n                this.headers = new Map();\r\n                Object.keys(headers).forEach(name => {\r\n                    let values = headers[name];\r\n                    const key = name.toLowerCase();\r\n                    if (typeof values === 'string') {\r\n                        values = [values];\r\n                    }\r\n                    if (values.length > 0) {\r\n                        this.headers.set(key, values);\r\n                        this.maybeSetNormalizedName(name, key);\r\n                    }\r\n                });\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Checks for existence of a given header.\r\n     *\r\n     * @param name The header name to check for existence.\r\n     *\r\n     * @returns True if the header exists, false otherwise.\r\n     */\r\n    has(name) {\r\n        this.init();\r\n        return this.headers.has(name.toLowerCase());\r\n    }\r\n    /**\r\n     * Retrieves the first value of a given header.\r\n     *\r\n     * @param name The header name.\r\n     *\r\n     * @returns The value string if the header exists, null otherwise\r\n     */\r\n    get(name) {\r\n        this.init();\r\n        const values = this.headers.get(name.toLowerCase());\r\n        return values && values.length > 0 ? values[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves the names of the headers.\r\n     *\r\n     * @returns A list of header names.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.normalizedNames.values());\r\n    }\r\n    /**\r\n     * Retrieves a list of values for a given header.\r\n     *\r\n     * @param name The header name from which to retrieve values.\r\n     *\r\n     * @returns A string of values if the header exists, null otherwise.\r\n     */\r\n    getAll(name) {\r\n        this.init();\r\n        return this.headers.get(name.toLowerCase()) || null;\r\n    }\r\n    /**\r\n     * Appends a new value to the existing set of values for a header\r\n     * and returns them in a clone of the original instance.\r\n     *\r\n     * @param name The header name for which to append the values.\r\n     * @param value The value to append.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\r\n     */\r\n    append(name, value) {\r\n        return this.clone({ name, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Sets or modifies a value for a given header in a clone of the original instance.\r\n     * If the header already exists, its value is replaced with the given value\r\n     * in the returned object.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to set or overide for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the newly set header value.\r\n     */\r\n    set(name, value) {\r\n        return this.clone({ name, value, op: 's' });\r\n    }\r\n    /**\r\n     * Deletes values for a given header in a clone of the original instance.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to delete for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the given value deleted.\r\n     */\r\n    delete(name, value) {\r\n        return this.clone({ name, value, op: 'd' });\r\n    }\r\n    maybeSetNormalizedName(name, lcName) {\r\n        if (!this.normalizedNames.has(lcName)) {\r\n            this.normalizedNames.set(lcName, name);\r\n        }\r\n    }\r\n    init() {\r\n        if (!!this.lazyInit) {\r\n            if (this.lazyInit instanceof HttpHeaders) {\r\n                this.copyFrom(this.lazyInit);\r\n            }\r\n            else {\r\n                this.lazyInit();\r\n            }\r\n            this.lazyInit = null;\r\n            if (!!this.lazyUpdate) {\r\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\r\n                this.lazyUpdate = null;\r\n            }\r\n        }\r\n    }\r\n    copyFrom(other) {\r\n        other.init();\r\n        Array.from(other.headers.keys()).forEach(key => {\r\n            this.headers.set(key, other.headers.get(key));\r\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\r\n        });\r\n    }\r\n    clone(update) {\r\n        const clone = new HttpHeaders();\r\n        clone.lazyInit =\r\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\r\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\r\n        return clone;\r\n    }\r\n    applyUpdate(update) {\r\n        const key = update.name.toLowerCase();\r\n        switch (update.op) {\r\n            case 'a':\r\n            case 's':\r\n                let value = update.value;\r\n                if (typeof value === 'string') {\r\n                    value = [value];\r\n                }\r\n                if (value.length === 0) {\r\n                    return;\r\n                }\r\n                this.maybeSetNormalizedName(update.name, key);\r\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\r\n                base.push(...value);\r\n                this.headers.set(key, base);\r\n                break;\r\n            case 'd':\r\n                const toDelete = update.value;\r\n                if (!toDelete) {\r\n                    this.headers.delete(key);\r\n                    this.normalizedNames.delete(key);\r\n                }\r\n                else {\r\n                    let existing = this.headers.get(key);\r\n                    if (!existing) {\r\n                        return;\r\n                    }\r\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\r\n                    if (existing.length === 0) {\r\n                        this.headers.delete(key);\r\n                        this.normalizedNames.delete(key);\r\n                    }\r\n                    else {\r\n                        this.headers.set(key, existing);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    forEach(fn) {\r\n        this.init();\r\n        Array.from(this.normalizedNames.keys())\r\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provides encoding and decoding of URL parameter and query-string values.\r\n *\r\n * Serializes and parses URL parameter keys and values to encode and decode them.\r\n * If you pass URL query parameters without encoding,\r\n * the query parameters can be misinterpreted at the receiving end.\r\n *\r\n *\r\n * @publicApi\r\n */\r\nclass HttpUrlEncodingCodec {\r\n    /**\r\n     * Encodes a key name for a URL parameter or query-string.\r\n     * @param key The key name.\r\n     * @returns The encoded key name.\r\n     */\r\n    encodeKey(key) {\r\n        return standardEncoding(key);\r\n    }\r\n    /**\r\n     * Encodes the value of a URL parameter or query-string.\r\n     * @param value The value.\r\n     * @returns The encoded value.\r\n     */\r\n    encodeValue(value) {\r\n        return standardEncoding(value);\r\n    }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string key.\r\n     * @param key The encoded key name.\r\n     * @returns The decoded key name.\r\n     */\r\n    decodeKey(key) {\r\n        return decodeURIComponent(key);\r\n    }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string value.\r\n     * @param value The encoded value.\r\n     * @returns The decoded value.\r\n     */\r\n    decodeValue(value) {\r\n        return decodeURIComponent(value);\r\n    }\r\n}\r\nfunction paramParser(rawParams, codec) {\r\n    const map = new Map();\r\n    if (rawParams.length > 0) {\r\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\r\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\r\n        // may start with the `?` char, so we strip it if it's present.\r\n        const params = rawParams.replace(/^\\?/, '').split('&');\r\n        params.forEach((param) => {\r\n            const eqIdx = param.indexOf('=');\r\n            const [key, val] = eqIdx == -1 ?\r\n                [codec.decodeKey(param), ''] :\r\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\r\n            const list = map.get(key) || [];\r\n            list.push(val);\r\n            map.set(key, list);\r\n        });\r\n    }\r\n    return map;\r\n}\r\nfunction standardEncoding(v) {\r\n    return encodeURIComponent(v)\r\n        .replace(/%40/gi, '@')\r\n        .replace(/%3A/gi, ':')\r\n        .replace(/%24/gi, '$')\r\n        .replace(/%2C/gi, ',')\r\n        .replace(/%3B/gi, ';')\r\n        .replace(/%2B/gi, '+')\r\n        .replace(/%3D/gi, '=')\r\n        .replace(/%3F/gi, '?')\r\n        .replace(/%2F/gi, '/');\r\n}\r\nfunction valueToString(value) {\r\n    return `${value}`;\r\n}\r\n/**\r\n * An HTTP request/response body that represents serialized parameters,\r\n * per the MIME type `application/x-www-form-urlencoded`.\r\n *\r\n * This class is immutable; all mutation operations return a new instance.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpParams {\r\n    constructor(options = {}) {\r\n        this.updates = null;\r\n        this.cloneFrom = null;\r\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\r\n        if (!!options.fromString) {\r\n            if (!!options.fromObject) {\r\n                throw new Error(`Cannot specify both fromString and fromObject.`);\r\n            }\r\n            this.map = paramParser(options.fromString, this.encoder);\r\n        }\r\n        else if (!!options.fromObject) {\r\n            this.map = new Map();\r\n            Object.keys(options.fromObject).forEach(key => {\r\n                const value = options.fromObject[key];\r\n                this.map.set(key, Array.isArray(value) ? value : [value]);\r\n            });\r\n        }\r\n        else {\r\n            this.map = null;\r\n        }\r\n    }\r\n    /**\r\n     * Reports whether the body includes one or more values for a given parameter.\r\n     * @param param The parameter name.\r\n     * @returns True if the parameter has one or more values,\r\n     * false if it has no value or is not present.\r\n     */\r\n    has(param) {\r\n        this.init();\r\n        return this.map.has(param);\r\n    }\r\n    /**\r\n     * Retrieves the first value for a parameter.\r\n     * @param param The parameter name.\r\n     * @returns The first value of the given parameter,\r\n     * or `null` if the parameter is not present.\r\n     */\r\n    get(param) {\r\n        this.init();\r\n        const res = this.map.get(param);\r\n        return !!res ? res[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves all values for a  parameter.\r\n     * @param param The parameter name.\r\n     * @returns All values in a string array,\r\n     * or `null` if the parameter not present.\r\n     */\r\n    getAll(param) {\r\n        this.init();\r\n        return this.map.get(param) || null;\r\n    }\r\n    /**\r\n     * Retrieves all the parameters for this body.\r\n     * @returns The parameter names in a string array.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.map.keys());\r\n    }\r\n    /**\r\n     * Appends a new value to existing values for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value to add.\r\n     * @return A new body with the appended value.\r\n     */\r\n    append(param, value) {\r\n        return this.clone({ param, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Constructs a new body with appended values for the given parameter name.\r\n     * @param params parameters and values\r\n     * @return A new body with the new value.\r\n     */\r\n    appendAll(params) {\r\n        const updates = [];\r\n        Object.keys(params).forEach(param => {\r\n            const value = params[param];\r\n            if (Array.isArray(value)) {\r\n                value.forEach(_value => {\r\n                    updates.push({ param, value: _value, op: 'a' });\r\n                });\r\n            }\r\n            else {\r\n                updates.push({ param, value: value, op: 'a' });\r\n            }\r\n        });\r\n        return this.clone(updates);\r\n    }\r\n    /**\r\n     * Replaces the value for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value.\r\n     * @return A new body with the new value.\r\n     */\r\n    set(param, value) {\r\n        return this.clone({ param, value, op: 's' });\r\n    }\r\n    /**\r\n     * Removes a given value or all values from a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The value to remove, if provided.\r\n     * @return A new body with the given value removed, or with all values\r\n     * removed if no value is specified.\r\n     */\r\n    delete(param, value) {\r\n        return this.clone({ param, value, op: 'd' });\r\n    }\r\n    /**\r\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\r\n     * separated by `&`s.\r\n     */\r\n    toString() {\r\n        this.init();\r\n        return this.keys()\r\n            .map(key => {\r\n            const eKey = this.encoder.encodeKey(key);\r\n            // `a: ['1']` produces `'a=1'`\r\n            // `b: []` produces `''`\r\n            // `c: ['1', '2']` produces `'c=1&c=2'`\r\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\r\n                .join('&');\r\n        })\r\n            // filter out empty values because `b: []` produces `''`\r\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\r\n            .filter(param => param !== '')\r\n            .join('&');\r\n    }\r\n    clone(update) {\r\n        const clone = new HttpParams({ encoder: this.encoder });\r\n        clone.cloneFrom = this.cloneFrom || this;\r\n        clone.updates = (this.updates || []).concat(update);\r\n        return clone;\r\n    }\r\n    init() {\r\n        if (this.map === null) {\r\n            this.map = new Map();\r\n        }\r\n        if (this.cloneFrom !== null) {\r\n            this.cloneFrom.init();\r\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\r\n            this.updates.forEach(update => {\r\n                switch (update.op) {\r\n                    case 'a':\r\n                    case 's':\r\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\r\n                        base.push(valueToString(update.value));\r\n                        this.map.set(update.param, base);\r\n                        break;\r\n                    case 'd':\r\n                        if (update.value !== undefined) {\r\n                            let base = this.map.get(update.param) || [];\r\n                            const idx = base.indexOf(valueToString(update.value));\r\n                            if (idx !== -1) {\r\n                                base.splice(idx, 1);\r\n                            }\r\n                            if (base.length > 0) {\r\n                                this.map.set(update.param, base);\r\n                            }\r\n                            else {\r\n                                this.map.delete(update.param);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.map.delete(update.param);\r\n                            break;\r\n                        }\r\n                }\r\n            });\r\n            this.cloneFrom = this.updates = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A token used to manipulate and access values stored in `HttpContext`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpContextToken {\r\n    constructor(defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n}\r\n/**\r\n * Http context stores arbitrary user defined values and ensures type safety without\r\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\r\n *\r\n * This context is mutable and is shared between cloned requests unless explicitly specified.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Usage Example\r\n *\r\n * ```typescript\r\n * // inside cache.interceptors.ts\r\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\r\n *\r\n * export class CacheInterceptor implements HttpInterceptor {\r\n *\r\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\r\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\r\n *       return ...;\r\n *     }\r\n *     return delegate.handle(req);\r\n *   }\r\n * }\r\n *\r\n * // inside a service\r\n *\r\n * this.httpClient.get('/api/weather', {\r\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\r\n * }).subscribe(...);\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nclass HttpContext {\r\n    constructor() {\r\n        this.map = new Map();\r\n    }\r\n    /**\r\n     * Store a value in the context. If a value is already present it will be overwritten.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     * @param value The value to store.\r\n     *\r\n     * @returns A reference to itself for easy chaining.\r\n     */\r\n    set(token, value) {\r\n        this.map.set(token, value);\r\n        return this;\r\n    }\r\n    /**\r\n     * Retrieve the value associated with the given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns The stored value or default if one is defined.\r\n     */\r\n    get(token) {\r\n        if (!this.map.has(token)) {\r\n            this.map.set(token, token.defaultValue());\r\n        }\r\n        return this.map.get(token);\r\n    }\r\n    /**\r\n     * Delete the value associated with the given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns A reference to itself for easy chaining.\r\n     */\r\n    delete(token) {\r\n        this.map.delete(token);\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns a list of tokens currently stored in the context.\r\n     */\r\n    keys() {\r\n        return this.map.keys();\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Determine whether the given HTTP method may include a body.\r\n */\r\nfunction mightHaveBody(method) {\r\n    switch (method) {\r\n        case 'DELETE':\r\n        case 'GET':\r\n        case 'HEAD':\r\n        case 'OPTIONS':\r\n        case 'JSONP':\r\n            return false;\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n/**\r\n * Safely assert whether the given value is an ArrayBuffer.\r\n *\r\n * In some execution environments ArrayBuffer is not defined.\r\n */\r\nfunction isArrayBuffer(value) {\r\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\r\n}\r\n/**\r\n * Safely assert whether the given value is a Blob.\r\n *\r\n * In some execution environments Blob is not defined.\r\n */\r\nfunction isBlob(value) {\r\n    return typeof Blob !== 'undefined' && value instanceof Blob;\r\n}\r\n/**\r\n * Safely assert whether the given value is a FormData instance.\r\n *\r\n * In some execution environments FormData is not defined.\r\n */\r\nfunction isFormData(value) {\r\n    return typeof FormData !== 'undefined' && value instanceof FormData;\r\n}\r\n/**\r\n * An outgoing HTTP request with an optional typed body.\r\n *\r\n * `HttpRequest` represents an outgoing request, including URL, method,\r\n * headers, body, and other request configuration options. Instances should be\r\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\r\n * method should be used.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpRequest {\r\n    constructor(method, url, third, fourth) {\r\n        this.url = url;\r\n        /**\r\n         * The request body, or `null` if one isn't set.\r\n         *\r\n         * Bodies are not enforced to be immutable, as they can include a reference to any\r\n         * user-defined data type. However, interceptors should take care to preserve\r\n         * idempotence by treating them as such.\r\n         */\r\n        this.body = null;\r\n        /**\r\n         * Whether this request should be made in a way that exposes progress events.\r\n         *\r\n         * Progress events are expensive (change detection runs on each event) and so\r\n         * they should only be requested if the consumer intends to monitor them.\r\n         */\r\n        this.reportProgress = false;\r\n        /**\r\n         * Whether this request should be sent with outgoing credentials (cookies).\r\n         */\r\n        this.withCredentials = false;\r\n        /**\r\n         * The expected response type of the server.\r\n         *\r\n         * This is used to parse the response appropriately before returning it to\r\n         * the requestee.\r\n         */\r\n        this.responseType = 'json';\r\n        this.method = method.toUpperCase();\r\n        // Next, need to figure out which argument holds the HttpRequestInit\r\n        // options, if any.\r\n        let options;\r\n        // Check whether a body argument is expected. The only valid way to omit\r\n        // the body argument is to use a known no-body method like GET.\r\n        if (mightHaveBody(this.method) || !!fourth) {\r\n            // Body is the third argument, options are the fourth.\r\n            this.body = (third !== undefined) ? third : null;\r\n            options = fourth;\r\n        }\r\n        else {\r\n            // No body required, options are the third argument. The body stays null.\r\n            options = third;\r\n        }\r\n        // If options have been passed, interpret them.\r\n        if (options) {\r\n            // Normalize reportProgress and withCredentials.\r\n            this.reportProgress = !!options.reportProgress;\r\n            this.withCredentials = !!options.withCredentials;\r\n            // Override default response type of 'json' if one is provided.\r\n            if (!!options.responseType) {\r\n                this.responseType = options.responseType;\r\n            }\r\n            // Override headers if they're provided.\r\n            if (!!options.headers) {\r\n                this.headers = options.headers;\r\n            }\r\n            if (!!options.context) {\r\n                this.context = options.context;\r\n            }\r\n            if (!!options.params) {\r\n                this.params = options.params;\r\n            }\r\n        }\r\n        // If no headers have been passed in, construct a new HttpHeaders instance.\r\n        if (!this.headers) {\r\n            this.headers = new HttpHeaders();\r\n        }\r\n        // If no context have been passed in, construct a new HttpContext instance.\r\n        if (!this.context) {\r\n            this.context = new HttpContext();\r\n        }\r\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\r\n        if (!this.params) {\r\n            this.params = new HttpParams();\r\n            this.urlWithParams = url;\r\n        }\r\n        else {\r\n            // Encode the parameters to a string in preparation for inclusion in the URL.\r\n            const params = this.params.toString();\r\n            if (params.length === 0) {\r\n                // No parameters, the visible URL is just the URL given at creation time.\r\n                this.urlWithParams = url;\r\n            }\r\n            else {\r\n                // Does the URL already have query parameters? Look for '?'.\r\n                const qIdx = url.indexOf('?');\r\n                // There are 3 cases to handle:\r\n                // 1) No existing parameters -> append '?' followed by params.\r\n                // 2) '?' exists and is followed by existing query string ->\r\n                //    append '&' followed by params.\r\n                // 3) '?' exists at the end of the url -> append params directly.\r\n                // This basically amounts to determining the character, if any, with\r\n                // which to join the URL and parameters.\r\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\r\n                this.urlWithParams = url + sep + params;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Transform the free-form body into a serialized format suitable for\r\n     * transmission to the server.\r\n     */\r\n    serializeBody() {\r\n        // If no body is present, no need to serialize it.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // Check whether the body is already in a serialized form. If so,\r\n        // it can just be returned directly.\r\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\r\n            typeof this.body === 'string') {\r\n            return this.body;\r\n        }\r\n        // Check whether the body is an instance of HttpUrlEncodedParams.\r\n        if (this.body instanceof HttpParams) {\r\n            return this.body.toString();\r\n        }\r\n        // Check whether the body is an object or array, and serialize with JSON if so.\r\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\r\n            Array.isArray(this.body)) {\r\n            return JSON.stringify(this.body);\r\n        }\r\n        // Fall back on toString() for everything else.\r\n        return this.body.toString();\r\n    }\r\n    /**\r\n     * Examine the body and attempt to infer an appropriate MIME type\r\n     * for it.\r\n     *\r\n     * If no such type can be inferred, this method will return `null`.\r\n     */\r\n    detectContentTypeHeader() {\r\n        // An empty body has no content type.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // FormData bodies rely on the browser's content type assignment.\r\n        if (isFormData(this.body)) {\r\n            return null;\r\n        }\r\n        // Blobs usually have their own content type. If it doesn't, then\r\n        // no type can be inferred.\r\n        if (isBlob(this.body)) {\r\n            return this.body.type || null;\r\n        }\r\n        // Array buffers have unknown contents and thus no type can be inferred.\r\n        if (isArrayBuffer(this.body)) {\r\n            return null;\r\n        }\r\n        // Technically, strings could be a form of JSON data, but it's safe enough\r\n        // to assume they're plain strings.\r\n        if (typeof this.body === 'string') {\r\n            return 'text/plain';\r\n        }\r\n        // `HttpUrlEncodedParams` has its own content-type.\r\n        if (this.body instanceof HttpParams) {\r\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\r\n        }\r\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\r\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\r\n            typeof this.body === 'boolean') {\r\n            return 'application/json';\r\n        }\r\n        // No type could be inferred.\r\n        return null;\r\n    }\r\n    clone(update = {}) {\r\n        var _a;\r\n        // For method, url, and responseType, take the current value unless\r\n        // it is overridden in the update hash.\r\n        const method = update.method || this.method;\r\n        const url = update.url || this.url;\r\n        const responseType = update.responseType || this.responseType;\r\n        // The body is somewhat special - a `null` value in update.body means\r\n        // whatever current body is present is being overridden with an empty\r\n        // body, whereas an `undefined` value in update.body implies no\r\n        // override.\r\n        const body = (update.body !== undefined) ? update.body : this.body;\r\n        // Carefully handle the boolean options to differentiate between\r\n        // `false` and `undefined` in the update args.\r\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\r\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\r\n        // Headers and params may be appended to if `setHeaders` or\r\n        // `setParams` are used.\r\n        let headers = update.headers || this.headers;\r\n        let params = update.params || this.params;\r\n        // Pass on context if needed\r\n        const context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context;\r\n        // Check whether the caller has asked to add headers.\r\n        if (update.setHeaders !== undefined) {\r\n            // Set every requested header.\r\n            headers =\r\n                Object.keys(update.setHeaders)\r\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\r\n        }\r\n        // Check whether the caller has asked to set params.\r\n        if (update.setParams) {\r\n            // Set every requested param.\r\n            params = Object.keys(update.setParams)\r\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\r\n        }\r\n        // Finally, construct the new HttpRequest using the pieces from above.\r\n        return new HttpRequest(method, url, body, {\r\n            params,\r\n            headers,\r\n            context,\r\n            reportProgress,\r\n            responseType,\r\n            withCredentials,\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Type enumeration for the different kinds of `HttpEvent`.\r\n *\r\n * @publicApi\r\n */\r\nvar HttpEventType;\r\n(function (HttpEventType) {\r\n    /**\r\n     * The request was sent out over the wire.\r\n     */\r\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\r\n    /**\r\n     * An upload progress event was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\r\n    /**\r\n     * The response status code and headers were received.\r\n     */\r\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\r\n    /**\r\n     * A download progress event was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\r\n    /**\r\n     * The full response including the body was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\r\n    /**\r\n     * A custom event from an interceptor or a backend.\r\n     */\r\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\r\n})(HttpEventType || (HttpEventType = {}));\r\n/**\r\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpResponseBase {\r\n    /**\r\n     * Super-constructor for all responses.\r\n     *\r\n     * The single parameter accepted is an initialization hash. Any properties\r\n     * of the response passed there will override the default values.\r\n     */\r\n    constructor(init, defaultStatus = 200 /* Ok */, defaultStatusText = 'OK') {\r\n        // If the hash has values passed, use them to initialize the response.\r\n        // Otherwise use the default values.\r\n        this.headers = init.headers || new HttpHeaders();\r\n        this.status = init.status !== undefined ? init.status : defaultStatus;\r\n        this.statusText = init.statusText || defaultStatusText;\r\n        this.url = init.url || null;\r\n        // Cache the ok value to avoid defining a getter.\r\n        this.ok = this.status >= 200 && this.status < 300;\r\n    }\r\n}\r\n/**\r\n * A partial HTTP response which only includes the status and header data,\r\n * but no response body.\r\n *\r\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\r\n * event stream, only when progress events are requested.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHeaderResponse extends HttpResponseBase {\r\n    /**\r\n     * Create a new `HttpHeaderResponse` with the given parameters.\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.ResponseHeader;\r\n    }\r\n    /**\r\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n     * given parameter hash.\r\n     */\r\n    clone(update = {}) {\r\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\r\n        // overriding the current parameters with new ones if given.\r\n        return new HttpHeaderResponse({\r\n            headers: update.headers || this.headers,\r\n            status: update.status !== undefined ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A full HTTP response, including a typed response body (which may be `null`\r\n * if one was not returned).\r\n *\r\n * `HttpResponse` is a `HttpEvent` available on the response event\r\n * stream.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpResponse extends HttpResponseBase {\r\n    /**\r\n     * Construct a new `HttpResponse`.\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.Response;\r\n        this.body = init.body !== undefined ? init.body : null;\r\n    }\r\n    clone(update = {}) {\r\n        return new HttpResponse({\r\n            body: (update.body !== undefined) ? update.body : this.body,\r\n            headers: update.headers || this.headers,\r\n            status: (update.status !== undefined) ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A response that represents an error or failure, either from a\r\n * non-successful HTTP status, an error while executing the request,\r\n * or some other failure which occurred during the parsing of the response.\r\n *\r\n * Any error returned on the `Observable` response stream will be\r\n * wrapped in an `HttpErrorResponse` to provide additional context about\r\n * the state of the HTTP layer when the error occurred. The error property\r\n * will contain either a wrapped Error object or the error response returned\r\n * from the server.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpErrorResponse extends HttpResponseBase {\r\n    constructor(init) {\r\n        // Initialize with a default status of 0 / Unknown Error.\r\n        super(init, 0, 'Unknown Error');\r\n        this.name = 'HttpErrorResponse';\r\n        /**\r\n         * Errors are never okay, even when the status code is in the 2xx success range.\r\n         */\r\n        this.ok = false;\r\n        // If the response was successful, then this was a parse error. Otherwise, it was\r\n        // a protocol-level failure of some sort. Either the request failed in transit\r\n        // or the server returned an unsuccessful status code.\r\n        if (this.status >= 200 && this.status < 300) {\r\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\r\n        }\r\n        else {\r\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\r\n        }\r\n        this.error = init.error || null;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\r\n * the given `body`. This function clones the object and adds the body.\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n *\r\n */\r\nfunction addBody(options, body) {\r\n    return {\r\n        body,\r\n        headers: options.headers,\r\n        context: options.context,\r\n        observe: options.observe,\r\n        params: options.params,\r\n        reportProgress: options.reportProgress,\r\n        responseType: options.responseType,\r\n        withCredentials: options.withCredentials,\r\n    };\r\n}\r\n/**\r\n * Performs HTTP requests.\r\n * This service is available as an injectable class, with methods to perform HTTP requests.\r\n * Each request method has multiple signatures, and the return type varies based on\r\n * the signature that is called (mainly the values of `observe` and `responseType`).\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n\r\n *\r\n * @usageNotes\r\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\r\n *\r\n * ### HTTP Request Example\r\n *\r\n * ```\r\n *  // GET heroes whose name contains search term\r\n * searchHeroes(term: string): observable<Hero[]>{\r\n *\r\n *  const params = new HttpParams({fromString: 'name=term'});\r\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\r\n * }\r\n * ```\r\n *\r\n * Alternatively, the parameter string can be used without invoking HttpParams\r\n * by directly joining to the URL.\r\n * ```\r\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\r\n * ```\r\n *\r\n *\r\n * ### JSONP Example\r\n * ```\r\n * requestJsonp(url, callback = 'callback') {\r\n *  return this.httpClient.jsonp(this.heroesURL, callback);\r\n * }\r\n * ```\r\n *\r\n * ### PATCH Example\r\n * ```\r\n * // PATCH one of the heroes' name\r\n * patchHero (id: number, heroName: string): Observable<{}> {\r\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\r\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\r\n *    .pipe(catchError(this.handleError('patchHero')));\r\n * }\r\n * ```\r\n *\r\n * @see [HTTP Guide](guide/http)\r\n * @see [HTTP Request](api/common/http/HttpRequest)\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClient {\r\n    constructor(handler) {\r\n        this.handler = handler;\r\n    }\r\n    /**\r\n     * Constructs an observable for a generic HTTP request that, when subscribed,\r\n     * fires the request through the chain of registered interceptors and on to the\r\n     * server.\r\n     *\r\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\r\n     * the call returns an observable of the raw `HttpEvent` stream.\r\n     *\r\n     * Alternatively you can pass an HTTP method as the first parameter,\r\n     * a URL string as the second, and an options hash containing the request body as the third.\r\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\r\n     * type of returned observable.\r\n     *   * The `responseType` value determines how a successful response body is parsed.\r\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\r\n     * object as a type parameter to the call.\r\n     *\r\n     * The `observe` value determines the return type, according to what you are interested in\r\n     * observing.\r\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\r\n     * progress events by default.\r\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\r\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\r\n     * parameter.\r\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\r\n     *\r\n     */\r\n    request(first, url, options = {}) {\r\n        let req;\r\n        // First, check whether the primary argument is an instance of `HttpRequest`.\r\n        if (first instanceof HttpRequest) {\r\n            // It is. The other arguments must be undefined (per the signatures) and can be\r\n            // ignored.\r\n            req = first;\r\n        }\r\n        else {\r\n            // It's a string, so it represents a URL. Construct a request based on it,\r\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\r\n            // provided.\r\n            // Figure out the headers.\r\n            let headers = undefined;\r\n            if (options.headers instanceof HttpHeaders) {\r\n                headers = options.headers;\r\n            }\r\n            else {\r\n                headers = new HttpHeaders(options.headers);\r\n            }\r\n            // Sort out parameters.\r\n            let params = undefined;\r\n            if (!!options.params) {\r\n                if (options.params instanceof HttpParams) {\r\n                    params = options.params;\r\n                }\r\n                else {\r\n                    params = new HttpParams({ fromObject: options.params });\r\n                }\r\n            }\r\n            // Construct the request.\r\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\r\n                headers,\r\n                context: options.context,\r\n                params,\r\n                reportProgress: options.reportProgress,\r\n                // By default, JSON is assumed to be returned for all calls.\r\n                responseType: options.responseType || 'json',\r\n                withCredentials: options.withCredentials,\r\n            });\r\n        }\r\n        // Start with an Observable.of() the initial request, and run the handler (which\r\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\r\n        // inside an Observable chain, which causes interceptors to be re-run on every\r\n        // subscription (this also makes retries re-run the handler, including interceptors).\r\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\r\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\r\n        // the only option is to get the event stream. Otherwise, return the event stream if\r\n        // that is what was requested.\r\n        if (first instanceof HttpRequest || options.observe === 'events') {\r\n            return events$;\r\n        }\r\n        // The requested stream contains either the full response or the body. In either\r\n        // case, the first step is to filter the event stream to extract a stream of\r\n        // responses(s).\r\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\r\n        // Decide which stream to return.\r\n        switch (options.observe || 'body') {\r\n            case 'body':\r\n                // The requested stream is the body. Map the response stream to the response\r\n                // body. This could be done more simply, but a misbehaving interceptor might\r\n                // transform the response body into a different format and ignore the requested\r\n                // responseType. Guard against this by validating that the response is of the\r\n                // requested type.\r\n                switch (req.responseType) {\r\n                    case 'arraybuffer':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is an ArrayBuffer.\r\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\r\n                                throw new Error('Response is not an ArrayBuffer.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'blob':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is a Blob.\r\n                            if (res.body !== null && !(res.body instanceof Blob)) {\r\n                                throw new Error('Response is not a Blob.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'text':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is a string.\r\n                            if (res.body !== null && typeof res.body !== 'string') {\r\n                                throw new Error('Response is not a string.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'json':\r\n                    default:\r\n                        // No validation needed for JSON responses, as they can be of any type.\r\n                        return res$.pipe(map((res) => res.body));\r\n                }\r\n            case 'response':\r\n                // The response stream was requested directly, so return it.\r\n                return res$;\r\n            default:\r\n                // Guard against new future observe types being added.\r\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\r\n        }\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `DELETE` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     *\r\n     * @param url     The endpoint URL.\r\n     * @param options The HTTP options to send with the request.\r\n     *\r\n     */\r\n    delete(url, options = {}) {\r\n        return this.request('DELETE', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `GET` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    get(url, options = {}) {\r\n        return this.request('GET', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `HEAD` request to execute on the server. The `HEAD` method returns\r\n     * meta information about the resource without transferring the\r\n     * resource itself. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    head(url, options = {}) {\r\n        return this.request('HEAD', url, options);\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\r\n     * `JSONP` to be dispatched via the interceptor pipeline.\r\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\r\n     * API endpoints that don't support newer,\r\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\r\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\r\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\r\n     * application making the request.\r\n     * The endpoint API must support JSONP callback for JSONP requests to work.\r\n     * The resource API returns the JSON response wrapped in a callback function.\r\n     * You can pass the callback function name as one of the query parameters.\r\n     * Note that JSONP requests can only be used with `GET` requests.\r\n     *\r\n     * @param url The resource URL.\r\n     * @param callbackParam The callback function name.\r\n     *\r\n     */\r\n    jsonp(url, callbackParam) {\r\n        return this.request('JSONP', url, {\r\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\r\n            observe: 'body',\r\n            responseType: 'json',\r\n        });\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes the configured\r\n     * `OPTIONS` request to execute on the server. This method allows the client\r\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\r\n     * without implying a resource action. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    options(url, options = {}) {\r\n        return this.request('OPTIONS', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PATCH` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    patch(url, body, options = {}) {\r\n        return this.request('PATCH', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `POST` request to execute on the server. The server responds with the location of\r\n     * the replaced resource. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    post(url, body, options = {}) {\r\n        return this.request('POST', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\r\n     * with a new set of values.\r\n     * See the individual overloads for details on the return type.\r\n     */\r\n    put(url, body, options = {}) {\r\n        return this.request('PUT', url, addBody(options, body));\r\n    }\r\n}\r\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\r\nHttpClient.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\r\nHttpClient.ctorParameters = () => [\r\n    { type: HttpHandler }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClient, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\r\n *\r\n *\r\n */\r\nclass HttpInterceptorHandler {\r\n    constructor(next, interceptor) {\r\n        this.next = next;\r\n        this.interceptor = interceptor;\r\n    }\r\n    handle(req) {\r\n        return this.interceptor.intercept(req, this.next);\r\n    }\r\n}\r\n/**\r\n * A multi-provider token that represents the array of registered\r\n * `HttpInterceptor` objects.\r\n *\r\n * @publicApi\r\n */\r\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\r\nclass NoopInterceptor {\r\n    intercept(req, next) {\r\n        return next.handle(req);\r\n    }\r\n}\r\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\r\nNoopInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\r\n        type: Injectable\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Every request made through JSONP needs a callback name that's unique across the\r\n// whole page. Each request is assigned an id and the callback name is constructed\r\n// from that. The next id to be assigned is tracked in a global variable here that\r\n// is shared among all applications on the page.\r\nlet nextRequestId = 0;\r\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\r\n// passed in its URL.\r\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\r\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\r\n// have a request method JSONP.\r\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\r\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\r\n/**\r\n * DI token/abstract type representing a map of JSONP callbacks.\r\n *\r\n * In the browser, this should always be the `window` object.\r\n *\r\n *\r\n */\r\nclass JsonpCallbackContext {\r\n}\r\n/**\r\n * Processes an `HttpRequest` with the JSONP method,\r\n * by performing JSONP style requests.\r\n * @see `HttpHandler`\r\n * @see `HttpXhrBackend`\r\n *\r\n * @publicApi\r\n */\r\nclass JsonpClientBackend {\r\n    constructor(callbackMap, document) {\r\n        this.callbackMap = callbackMap;\r\n        this.document = document;\r\n        /**\r\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\r\n         */\r\n        this.resolvedPromise = Promise.resolve();\r\n    }\r\n    /**\r\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\r\n     */\r\n    nextCallback() {\r\n        return `ng_jsonp_callback_${nextRequestId++}`;\r\n    }\r\n    /**\r\n     * Processes a JSONP request and returns an event stream of the results.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     *\r\n     */\r\n    handle(req) {\r\n        // Firstly, check both the method and response type. If either doesn't match\r\n        // then the request was improperly routed here and cannot be handled.\r\n        if (req.method !== 'JSONP') {\r\n            throw new Error(JSONP_ERR_WRONG_METHOD);\r\n        }\r\n        else if (req.responseType !== 'json') {\r\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\r\n        }\r\n        // Everything else happens inside the Observable boundary.\r\n        return new Observable((observer) => {\r\n            // The first step to make a request is to generate the callback name, and replace the\r\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\r\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\r\n            const callback = this.nextCallback();\r\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\r\n            // Construct the <script> tag and point it at the URL.\r\n            const node = this.document.createElement('script');\r\n            node.src = url;\r\n            // A JSONP request requires waiting for multiple callbacks. These variables\r\n            // are closed over and track state across those callbacks.\r\n            // The response object, if one has been received, or null otherwise.\r\n            let body = null;\r\n            // Whether the response callback has been called.\r\n            let finished = false;\r\n            // Whether the request has been cancelled (and thus any other callbacks)\r\n            // should be ignored.\r\n            let cancelled = false;\r\n            // Set the response callback in this.callbackMap (which will be the window\r\n            // object in the browser. The script being loaded via the <script> tag will\r\n            // eventually call this callback.\r\n            this.callbackMap[callback] = (data) => {\r\n                // Data has been received from the JSONP script. Firstly, delete this callback.\r\n                delete this.callbackMap[callback];\r\n                // Next, make sure the request wasn't cancelled in the meantime.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // Set state to indicate data was received.\r\n                body = data;\r\n                finished = true;\r\n            };\r\n            // cleanup() is a utility closure that removes the <script> from the page and\r\n            // the response callback from the window. This logic is used in both the\r\n            // success, error, and cancellation paths, so it's extracted out for convenience.\r\n            const cleanup = () => {\r\n                // Remove the <script> tag if it's still on the page.\r\n                if (node.parentNode) {\r\n                    node.parentNode.removeChild(node);\r\n                }\r\n                // Remove the response callback from the callbackMap (window object in the\r\n                // browser).\r\n                delete this.callbackMap[callback];\r\n            };\r\n            // onLoad() is the success callback which runs after the response callback\r\n            // if the JSONP script loads successfully. The event itself is unimportant.\r\n            // If something went wrong, onLoad() may run without the response callback\r\n            // having been invoked.\r\n            const onLoad = (event) => {\r\n                // Do nothing if the request has been cancelled.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // We wrap it in an extra Promise, to ensure the microtask\r\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\r\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\r\n                this.resolvedPromise.then(() => {\r\n                    // Cleanup the page.\r\n                    cleanup();\r\n                    // Check whether the response callback has run.\r\n                    if (!finished) {\r\n                        // It hasn't, something went wrong with the request. Return an error via\r\n                        // the Observable error path. All JSONP errors have status 0.\r\n                        observer.error(new HttpErrorResponse({\r\n                            url,\r\n                            status: 0,\r\n                            statusText: 'JSONP Error',\r\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\r\n                        }));\r\n                        return;\r\n                    }\r\n                    // Success. body either contains the response body or null if none was\r\n                    // returned.\r\n                    observer.next(new HttpResponse({\r\n                        body,\r\n                        status: 200 /* Ok */,\r\n                        statusText: 'OK',\r\n                        url,\r\n                    }));\r\n                    // Complete the stream, the response is over.\r\n                    observer.complete();\r\n                });\r\n            };\r\n            // onError() is the error callback, which runs if the script returned generates\r\n            // a Javascript error. It emits the error via the Observable error channel as\r\n            // a HttpErrorResponse.\r\n            const onError = (error) => {\r\n                // If the request was already cancelled, no need to emit anything.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                cleanup();\r\n                // Wrap the error in a HttpErrorResponse.\r\n                observer.error(new HttpErrorResponse({\r\n                    error,\r\n                    status: 0,\r\n                    statusText: 'JSONP Error',\r\n                    url,\r\n                }));\r\n            };\r\n            // Subscribe to both the success (load) and error events on the <script> tag,\r\n            // and add it to the page.\r\n            node.addEventListener('load', onLoad);\r\n            node.addEventListener('error', onError);\r\n            this.document.body.appendChild(node);\r\n            // The request has now been successfully sent.\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // Cancellation handler.\r\n            return () => {\r\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\r\n                cancelled = true;\r\n                // Remove the event listeners so they won't run if the events later fire.\r\n                node.removeEventListener('load', onLoad);\r\n                node.removeEventListener('error', onError);\r\n                // And finally, clean up the page.\r\n                cleanup();\r\n            };\r\n        });\r\n    }\r\n}\r\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\r\nJsonpClientBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\r\nJsonpClientBackend.ctorParameters = () => [\r\n    { type: JsonpCallbackContext },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, null); })();\r\n/**\r\n * Identifies requests with the method JSONP and\r\n * shifts them to the `JsonpClientBackend`.\r\n *\r\n * @see `HttpInterceptor`\r\n *\r\n * @publicApi\r\n */\r\nclass JsonpInterceptor {\r\n    constructor(jsonp) {\r\n        this.jsonp = jsonp;\r\n    }\r\n    /**\r\n     * Identifies and handles a given JSONP request.\r\n     * @param req The outgoing request object to handle.\r\n     * @param next The next interceptor in the chain, or the backend\r\n     * if no interceptors remain in the chain.\r\n     * @returns An observable of the event stream.\r\n     */\r\n    intercept(req, next) {\r\n        if (req.method === 'JSONP') {\r\n            return this.jsonp.handle(req);\r\n        }\r\n        // Fall through for normal HTTP requests.\r\n        return next.handle(req);\r\n    }\r\n}\r\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\r\nJsonpInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\r\nJsonpInterceptor.ctorParameters = () => [\r\n    { type: JsonpClientBackend }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\r\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * XMLHttpRequest.responseURL or the X-Request-URL header.\r\n */\r\nfunction getResponseUrl(xhr) {\r\n    if ('responseURL' in xhr && xhr.responseURL) {\r\n        return xhr.responseURL;\r\n    }\r\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\r\n        return xhr.getResponseHeader('X-Request-URL');\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Uses `XMLHttpRequest` to send requests to a backend server.\r\n * @see `HttpHandler`\r\n * @see `JsonpClientBackend`\r\n *\r\n * @publicApi\r\n */\r\nclass HttpXhrBackend {\r\n    constructor(xhrFactory) {\r\n        this.xhrFactory = xhrFactory;\r\n    }\r\n    /**\r\n     * Processes a request and returns a stream of response events.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     */\r\n    handle(req) {\r\n        // Quick check to give a better error message when a user attempts to use\r\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\r\n        if (req.method === 'JSONP') {\r\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\r\n        }\r\n        // Everything happens on Observable subscription.\r\n        return new Observable((observer) => {\r\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\r\n            const xhr = this.xhrFactory.build();\r\n            xhr.open(req.method, req.urlWithParams);\r\n            if (!!req.withCredentials) {\r\n                xhr.withCredentials = true;\r\n            }\r\n            // Add all the requested headers.\r\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\r\n            // Add an Accept header if one isn't present already.\r\n            if (!req.headers.has('Accept')) {\r\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\r\n            }\r\n            // Auto-detect the Content-Type header if one isn't present already.\r\n            if (!req.headers.has('Content-Type')) {\r\n                const detectedType = req.detectContentTypeHeader();\r\n                // Sometimes Content-Type detection fails.\r\n                if (detectedType !== null) {\r\n                    xhr.setRequestHeader('Content-Type', detectedType);\r\n                }\r\n            }\r\n            // Set the responseType if one was requested.\r\n            if (req.responseType) {\r\n                const responseType = req.responseType.toLowerCase();\r\n                // JSON responses need to be processed as text. This is because if the server\r\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\r\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\r\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\r\n                // is parsed by first requesting text and then applying JSON.parse.\r\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\r\n            }\r\n            // Serialize the request body if one is present. If not, this will be set to null.\r\n            const reqBody = req.serializeBody();\r\n            // If progress events are enabled, response headers will be delivered\r\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\r\n            // event. However, since response headers don't change in between these\r\n            // two events, it doesn't make sense to parse them twice. So headerResponse\r\n            // caches the data extracted from the response whenever it's first parsed,\r\n            // to ensure parsing isn't duplicated.\r\n            let headerResponse = null;\r\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\r\n            // state, and memoizes it into headerResponse.\r\n            const partialFromXhr = () => {\r\n                if (headerResponse !== null) {\r\n                    return headerResponse;\r\n                }\r\n                // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\r\n                const status = xhr.status === 1223 ? 204 /* NoContent */ : xhr.status;\r\n                const statusText = xhr.statusText || 'OK';\r\n                // Parse headers from XMLHttpRequest - this step is lazy.\r\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\r\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\r\n                // request URL.\r\n                const url = getResponseUrl(xhr) || req.url;\r\n                // Construct the HttpHeaderResponse and memoize it.\r\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\r\n                return headerResponse;\r\n            };\r\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\r\n            // emit. This allows them to be unregistered as event listeners later.\r\n            // First up is the load event, which represents a response being fully available.\r\n            const onLoad = () => {\r\n                // Read response state from the memoized partial data.\r\n                let { headers, status, statusText, url } = partialFromXhr();\r\n                // The body will be read out if present.\r\n                let body = null;\r\n                if (status !== 204 /* NoContent */) {\r\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\r\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\r\n                }\r\n                // Normalize another potential bug (this one comes from CORS).\r\n                if (status === 0) {\r\n                    status = !!body ? 200 /* Ok */ : 0;\r\n                }\r\n                // ok determines whether the response will be transmitted on the event or\r\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\r\n                // but a successful status code can still result in an error if the user\r\n                // asked for JSON data and the body cannot be parsed as such.\r\n                let ok = status >= 200 && status < 300;\r\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\r\n                // will have done that already).\r\n                if (req.responseType === 'json' && typeof body === 'string') {\r\n                    // Save the original body, before attempting XSSI prefix stripping.\r\n                    const originalBody = body;\r\n                    body = body.replace(XSSI_PREFIX, '');\r\n                    try {\r\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\r\n                        body = body !== '' ? JSON.parse(body) : null;\r\n                    }\r\n                    catch (error) {\r\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\r\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\r\n                        // a better error response.\r\n                        body = originalBody;\r\n                        // If this was an error request to begin with, leave it as a string, it probably\r\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\r\n                        if (ok) {\r\n                            // Even though the response status was 2xx, this is still an error.\r\n                            ok = false;\r\n                            // The parse error contains the text of the body that failed to parse.\r\n                            body = { error, text: body };\r\n                        }\r\n                    }\r\n                }\r\n                if (ok) {\r\n                    // A successful response is delivered on the event stream.\r\n                    observer.next(new HttpResponse({\r\n                        body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                    // The full body has been received and delivered, no further events\r\n                    // are possible. This request is complete.\r\n                    observer.complete();\r\n                }\r\n                else {\r\n                    // An unsuccessful request is delivered on the error channel.\r\n                    observer.error(new HttpErrorResponse({\r\n                        // The error in this case is the response body (error from the server).\r\n                        error: body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                }\r\n            };\r\n            // The onError callback is called when something goes wrong at the network level.\r\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\r\n            // transmitted on the error channel.\r\n            const onError = (error) => {\r\n                const { url } = partialFromXhr();\r\n                const res = new HttpErrorResponse({\r\n                    error,\r\n                    status: xhr.status || 0,\r\n                    statusText: xhr.statusText || 'Unknown Error',\r\n                    url: url || undefined,\r\n                });\r\n                observer.error(res);\r\n            };\r\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\r\n            // has been sent on the stream. This is necessary to track if progress\r\n            // is enabled since the event will be sent on only the first download\r\n            // progerss event.\r\n            let sentHeaders = false;\r\n            // The download progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            const onDownProgress = (event) => {\r\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\r\n                if (!sentHeaders) {\r\n                    observer.next(partialFromXhr());\r\n                    sentHeaders = true;\r\n                }\r\n                // Start building the download progress event to deliver on the response\r\n                // event stream.\r\n                let progressEvent = {\r\n                    type: HttpEventType.DownloadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // Set the total number of bytes in the event if it's available.\r\n                if (event.lengthComputable) {\r\n                    progressEvent.total = event.total;\r\n                }\r\n                // If the request was for text content and a partial response is\r\n                // available on XMLHttpRequest, include it in the progress event\r\n                // to allow for streaming reads.\r\n                if (req.responseType === 'text' && !!xhr.responseText) {\r\n                    progressEvent.partialText = xhr.responseText;\r\n                }\r\n                // Finally, fire the event.\r\n                observer.next(progressEvent);\r\n            };\r\n            // The upload progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            const onUpProgress = (event) => {\r\n                // Upload progress events are simpler. Begin building the progress\r\n                // event.\r\n                let progress = {\r\n                    type: HttpEventType.UploadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // If the total number of bytes being uploaded is available, include\r\n                // it.\r\n                if (event.lengthComputable) {\r\n                    progress.total = event.total;\r\n                }\r\n                // Send the event.\r\n                observer.next(progress);\r\n            };\r\n            // By default, register for load and error events.\r\n            xhr.addEventListener('load', onLoad);\r\n            xhr.addEventListener('error', onError);\r\n            xhr.addEventListener('timeout', onError);\r\n            xhr.addEventListener('abort', onError);\r\n            // Progress events are only enabled if requested.\r\n            if (req.reportProgress) {\r\n                // Download progress is always enabled if requested.\r\n                xhr.addEventListener('progress', onDownProgress);\r\n                // Upload progress depends on whether there is a body to upload.\r\n                if (reqBody !== null && xhr.upload) {\r\n                    xhr.upload.addEventListener('progress', onUpProgress);\r\n                }\r\n            }\r\n            // Fire the request, and notify the event stream that it was fired.\r\n            xhr.send(reqBody);\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // This is the return from the Observable function, which is the\r\n            // request cancellation handler.\r\n            return () => {\r\n                // On a cancellation, remove all registered event listeners.\r\n                xhr.removeEventListener('error', onError);\r\n                xhr.removeEventListener('abort', onError);\r\n                xhr.removeEventListener('load', onLoad);\r\n                xhr.removeEventListener('timeout', onError);\r\n                if (req.reportProgress) {\r\n                    xhr.removeEventListener('progress', onDownProgress);\r\n                    if (reqBody !== null && xhr.upload) {\r\n                        xhr.upload.removeEventListener('progress', onUpProgress);\r\n                    }\r\n                }\r\n                // Finally, abort the in-flight request.\r\n                if (xhr.readyState !== xhr.DONE) {\r\n                    xhr.abort();\r\n                }\r\n            };\r\n        });\r\n    }\r\n}\r\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(ɵngcc1.XhrFactory)); };\r\nHttpXhrBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\r\nHttpXhrBackend.ctorParameters = () => [\r\n    { type: XhrFactory$1 }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: ɵngcc1.XhrFactory }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\r\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\r\n/**\r\n * Retrieves the current XSRF token to use with the next outgoing request.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpXsrfTokenExtractor {\r\n}\r\n/**\r\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\r\n */\r\nclass HttpXsrfCookieExtractor {\r\n    constructor(doc, platform, cookieName) {\r\n        this.doc = doc;\r\n        this.platform = platform;\r\n        this.cookieName = cookieName;\r\n        this.lastCookieString = '';\r\n        this.lastToken = null;\r\n        /**\r\n         * @internal for testing\r\n         */\r\n        this.parseCount = 0;\r\n    }\r\n    getToken() {\r\n        if (this.platform === 'server') {\r\n            return null;\r\n        }\r\n        const cookieString = this.doc.cookie || '';\r\n        if (cookieString !== this.lastCookieString) {\r\n            this.parseCount++;\r\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\r\n            this.lastCookieString = cookieString;\r\n        }\r\n        return this.lastToken;\r\n    }\r\n}\r\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\r\nHttpXsrfCookieExtractor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\r\nHttpXsrfCookieExtractor.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\r\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [XSRF_COOKIE_NAME]\r\n            }] }]; }, null); })();\r\n/**\r\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\r\n */\r\nclass HttpXsrfInterceptor {\r\n    constructor(tokenService, headerName) {\r\n        this.tokenService = tokenService;\r\n        this.headerName = headerName;\r\n    }\r\n    intercept(req, next) {\r\n        const lcUrl = req.url.toLowerCase();\r\n        // Skip both non-mutating requests and absolute URLs.\r\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\r\n        // anyway as the cookie set\r\n        // on our origin is not the same as the token expected by another origin.\r\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\r\n            lcUrl.startsWith('https://')) {\r\n            return next.handle(req);\r\n        }\r\n        const token = this.tokenService.getToken();\r\n        // Be careful not to overwrite an existing header of the same name.\r\n        if (token !== null && !req.headers.has(this.headerName)) {\r\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\r\n        }\r\n        return next.handle(req);\r\n    }\r\n}\r\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\r\nHttpXsrfInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\r\nHttpXsrfInterceptor.ctorParameters = () => [\r\n    { type: HttpXsrfTokenExtractor },\r\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\r\n                type: Inject,\r\n                args: [XSRF_HEADER_NAME]\r\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An injectable `HttpHandler` that applies multiple interceptors\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * The interceptors are loaded lazily from the injector, to allow\r\n * interceptors to themselves inject classes depending indirectly\r\n * on `HttpInterceptingHandler` itself.\r\n * @see `HttpInterceptor`\r\n */\r\nclass HttpInterceptingHandler {\r\n    constructor(backend, injector) {\r\n        this.backend = backend;\r\n        this.injector = injector;\r\n        this.chain = null;\r\n    }\r\n    handle(req) {\r\n        if (this.chain === null) {\r\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\r\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\r\n        }\r\n        return this.chain.handle(req);\r\n    }\r\n}\r\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\r\nHttpInterceptingHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\r\nHttpInterceptingHandler.ctorParameters = () => [\r\n    { type: HttpBackend },\r\n    { type: Injector }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\r\n/**\r\n * Constructs an `HttpHandler` that applies interceptors\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * Use as a factory function within `HttpClientModule`.\r\n *\r\n *\r\n */\r\nfunction interceptingHandler(backend, interceptors = []) {\r\n    if (!interceptors) {\r\n        return backend;\r\n    }\r\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\r\n}\r\n/**\r\n * Factory function that determines where to store JSONP callbacks.\r\n *\r\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\r\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\r\n *\r\n *\r\n */\r\nfunction jsonpCallbackContext() {\r\n    if (typeof window === 'object') {\r\n        return window;\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Configures XSRF protection support for outgoing requests.\r\n *\r\n * For a server that supports a cookie-based XSRF protection system,\r\n * use directly to configure XSRF protection with the correct\r\n * cookie and header names.\r\n *\r\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\r\n * and the default header name is `X-XSRF-TOKEN`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientXsrfModule {\r\n    /**\r\n     * Disable the default XSRF protection.\r\n     */\r\n    static disable() {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\r\n            ],\r\n        };\r\n    }\r\n    /**\r\n     * Configure XSRF protection.\r\n     * @param options An object that can specify either or both\r\n     * cookie name or header name.\r\n     * - Cookie name default is `XSRF-TOKEN`.\r\n     * - Header name default is `X-XSRF-TOKEN`.\r\n     *\r\n     */\r\n    static withOptions(options = {}) {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\r\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\r\n            ],\r\n        };\r\n    }\r\n}\r\nHttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); };\r\nHttpClientXsrfModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\r\nHttpClientXsrfModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\r\n        HttpXsrfInterceptor,\r\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\r\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\r\n    ] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                providers: [\r\n                    HttpXsrfInterceptor,\r\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\r\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientModule {\r\n}\r\nHttpClientModule.ɵfac = function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); };\r\nHttpClientModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\r\nHttpClientModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\r\n        HttpClient,\r\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\r\n        HttpXhrBackend,\r\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\r\n    ], imports: [[\r\n            HttpClientXsrfModule.withOptions({\r\n                cookieName: 'XSRF-TOKEN',\r\n                headerName: 'X-XSRF-TOKEN'\r\n            }),\r\n        ]] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                /**\r\n                 * Optional configuration for XSRF protection.\r\n                 */\r\n                imports: [\r\n                    HttpClientXsrfModule.withOptions({\r\n                        cookieName: 'XSRF-TOKEN',\r\n                        headerName: 'X-XSRF-TOKEN'\r\n                    }),\r\n                ],\r\n                /**\r\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\r\n                 * with supporting services for HTTP communications.\r\n                 */\r\n                providers: [\r\n                    HttpClient,\r\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\r\n                    HttpXhrBackend,\r\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\r\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for JSONP.\r\n * Without this module, Jsonp requests reach the backend\r\n * with method JSONP, where they are rejected.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientJsonpModule {\r\n}\r\nHttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); };\r\nHttpClientJsonpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\r\nHttpClientJsonpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\r\n        JsonpClientBackend,\r\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\r\n    ] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                providers: [\r\n                    JsonpClientBackend,\r\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A wrapper around the `XMLHttpRequest` constructor.\r\n *\r\n * @publicApi\r\n * @see `XhrFactory`\r\n * @deprecated\r\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\r\n */\r\nconst XhrFactory = XhrFactory$1;\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_d, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_e, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_f, HttpXsrfInterceptor as ɵangular_packages_common_http_http_g };\r\n\r\n//# sourceMappingURL=http.js.map"]},"metadata":{},"sourceType":"module"}