{"ast":null,"code":"import _get from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\n\nvar RetryWhenOperator = /*#__PURE__*/function () {\n  function RetryWhenOperator(notifier, source) {\n    _classCallCheck(this, RetryWhenOperator);\n\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  _createClass(RetryWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n  }]);\n\n  return RetryWhenOperator;\n}();\n\nvar RetryWhenSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(RetryWhenSubscriber, _SimpleOuterSubscribe);\n\n  var _super = _createSuper(RetryWhenSubscriber);\n\n  function RetryWhenSubscriber(destination, notifier, source) {\n    var _this;\n\n    _classCallCheck(this, RetryWhenSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.notifier = notifier;\n    _this.source = source;\n    return _this;\n  }\n\n  _createClass(RetryWhenSubscriber, [{\n    key: \"error\",\n    value: function error(err) {\n      if (!this.isStopped) {\n        var errors = this.errors;\n        var retries = this.retries;\n        var retriesSubscription = this.retriesSubscription;\n\n        if (!retries) {\n          errors = new Subject();\n\n          try {\n            var notifier = this.notifier;\n            retries = notifier(errors);\n          } catch (e) {\n            return _get(_getPrototypeOf(RetryWhenSubscriber.prototype), \"error\", this).call(this, e);\n          }\n\n          retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n        } else {\n          this.errors = undefined;\n          this.retriesSubscription = undefined;\n        }\n\n        this._unsubscribeAndRecycle();\n\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        errors.next(err);\n      }\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var errors = this.errors,\n          retriesSubscription = this.retriesSubscription;\n\n      if (errors) {\n        errors.unsubscribe();\n        this.errors = undefined;\n      }\n\n      if (retriesSubscription) {\n        retriesSubscription.unsubscribe();\n        this.retriesSubscription = undefined;\n      }\n\n      this.retries = undefined;\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext() {\n      var _unsubscribe = this._unsubscribe;\n      this._unsubscribe = null;\n\n      this._unsubscribeAndRecycle();\n\n      this._unsubscribe = _unsubscribe;\n      this.source.subscribe(this);\n    }\n  }]);\n\n  return RetryWhenSubscriber;\n}(SimpleOuterSubscriber); //# sourceMappingURL=retryWhen.js.map","map":{"version":3,"sources":["C:/Users/Nigem/Desktop/source/abp3/angular/node_modules/rxjs/_esm2015/internal/operators/retryWhen.js"],"names":["Subject","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","retryWhen","notifier","source","lift","RetryWhenOperator","subscriber","subscribe","RetryWhenSubscriber","destination","err","isStopped","errors","retries","retriesSubscription","e","undefined","_unsubscribeAndRecycle","next","unsubscribe","_unsubscribe"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,qBAAT,EAAgCC,cAAhC,EAAgDC,qBAAhD,QAA6E,mBAA7E;AACA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AAChC,SAAO,UAACC,MAAD;AAAA,WAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,iBAAJ,CAAsBH,QAAtB,EAAgCC,MAAhC,CAAZ,CAAZ;AAAA,GAAP;AACH;;IACKE,iB;AACF,6BAAYH,QAAZ,EAAsBC,MAAtB,EAA8B;AAAA;;AAC1B,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;;;WACD,cAAKG,UAAL,EAAiBH,MAAjB,EAAyB;AACrB,aAAOA,MAAM,CAACI,SAAP,CAAiB,IAAIC,mBAAJ,CAAwBF,UAAxB,EAAoC,KAAKJ,QAAzC,EAAmD,KAAKC,MAAxD,CAAjB,CAAP;AACH;;;;;;IAECK,mB;;;;;AACF,+BAAYC,WAAZ,EAAyBP,QAAzB,EAAmCC,MAAnC,EAA2C;AAAA;;AAAA;;AACvC,8BAAMM,WAAN;AACA,UAAKP,QAAL,GAAgBA,QAAhB;AACA,UAAKC,MAAL,GAAcA,MAAd;AAHuC;AAI1C;;;;WACD,eAAMO,GAAN,EAAW;AACP,UAAI,CAAC,KAAKC,SAAV,EAAqB;AACjB,YAAIC,MAAM,GAAG,KAAKA,MAAlB;AACA,YAAIC,OAAO,GAAG,KAAKA,OAAnB;AACA,YAAIC,mBAAmB,GAAG,KAAKA,mBAA/B;;AACA,YAAI,CAACD,OAAL,EAAc;AACVD,UAAAA,MAAM,GAAG,IAAIf,OAAJ,EAAT;;AACA,cAAI;AACA,gBAAQK,QAAR,GAAqB,IAArB,CAAQA,QAAR;AACAW,YAAAA,OAAO,GAAGX,QAAQ,CAACU,MAAD,CAAlB;AACH,WAHD,CAIA,OAAOG,CAAP,EAAU;AACN,kGAAmBA,CAAnB;AACH;;AACDD,UAAAA,mBAAmB,GAAGf,cAAc,CAACc,OAAD,EAAU,IAAIb,qBAAJ,CAA0B,IAA1B,CAAV,CAApC;AACH,SAVD,MAWK;AACD,eAAKY,MAAL,GAAcI,SAAd;AACA,eAAKF,mBAAL,GAA2BE,SAA3B;AACH;;AACD,aAAKC,sBAAL;;AACA,aAAKL,MAAL,GAAcA,MAAd;AACA,aAAKC,OAAL,GAAeA,OAAf;AACA,aAAKC,mBAAL,GAA2BA,mBAA3B;AACAF,QAAAA,MAAM,CAACM,IAAP,CAAYR,GAAZ;AACH;AACJ;;;WACD,wBAAe;AACX,UAAQE,MAAR,GAAwC,IAAxC,CAAQA,MAAR;AAAA,UAAgBE,mBAAhB,GAAwC,IAAxC,CAAgBA,mBAAhB;;AACA,UAAIF,MAAJ,EAAY;AACRA,QAAAA,MAAM,CAACO,WAAP;AACA,aAAKP,MAAL,GAAcI,SAAd;AACH;;AACD,UAAIF,mBAAJ,EAAyB;AACrBA,QAAAA,mBAAmB,CAACK,WAApB;AACA,aAAKL,mBAAL,GAA2BE,SAA3B;AACH;;AACD,WAAKH,OAAL,GAAeG,SAAf;AACH;;;WACD,sBAAa;AACT,UAAQI,YAAR,GAAyB,IAAzB,CAAQA,YAAR;AACA,WAAKA,YAAL,GAAoB,IAApB;;AACA,WAAKH,sBAAL;;AACA,WAAKG,YAAL,GAAoBA,YAApB;AACA,WAAKjB,MAAL,CAAYI,SAAZ,CAAsB,IAAtB;AACH;;;;EAnD6BT,qB,GAqDlC","sourcesContent":["import { Subject } from '../Subject';\r\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\r\nexport function retryWhen(notifier) {\r\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\r\n}\r\nclass RetryWhenOperator {\r\n    constructor(notifier, source) {\r\n        this.notifier = notifier;\r\n        this.source = source;\r\n    }\r\n    call(subscriber, source) {\r\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\r\n    }\r\n}\r\nclass RetryWhenSubscriber extends SimpleOuterSubscriber {\r\n    constructor(destination, notifier, source) {\r\n        super(destination);\r\n        this.notifier = notifier;\r\n        this.source = source;\r\n    }\r\n    error(err) {\r\n        if (!this.isStopped) {\r\n            let errors = this.errors;\r\n            let retries = this.retries;\r\n            let retriesSubscription = this.retriesSubscription;\r\n            if (!retries) {\r\n                errors = new Subject();\r\n                try {\r\n                    const { notifier } = this;\r\n                    retries = notifier(errors);\r\n                }\r\n                catch (e) {\r\n                    return super.error(e);\r\n                }\r\n                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\r\n            }\r\n            else {\r\n                this.errors = undefined;\r\n                this.retriesSubscription = undefined;\r\n            }\r\n            this._unsubscribeAndRecycle();\r\n            this.errors = errors;\r\n            this.retries = retries;\r\n            this.retriesSubscription = retriesSubscription;\r\n            errors.next(err);\r\n        }\r\n    }\r\n    _unsubscribe() {\r\n        const { errors, retriesSubscription } = this;\r\n        if (errors) {\r\n            errors.unsubscribe();\r\n            this.errors = undefined;\r\n        }\r\n        if (retriesSubscription) {\r\n            retriesSubscription.unsubscribe();\r\n            this.retriesSubscription = undefined;\r\n        }\r\n        this.retries = undefined;\r\n    }\r\n    notifyNext() {\r\n        const { _unsubscribe } = this;\r\n        this._unsubscribe = null;\r\n        this._unsubscribeAndRecycle();\r\n        this._unsubscribe = _unsubscribe;\r\n        this.source.subscribe(this);\r\n    }\r\n}\r\n//# sourceMappingURL=retryWhen.js.map"]},"metadata":{},"sourceType":"module"}